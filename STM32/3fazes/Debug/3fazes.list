
3fazes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006924  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae0  08006ae0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000090  08006b78  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  08006b78  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018394  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035d0  00000000  00000000  00038454  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e6e  00000000  00000000  0003dad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a7c  00000000  00000000  0005693e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d9da  00000000  00000000  000673ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c4  00000000  00000000  000f4e10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006aa4 	.word	0x08006aa4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08006aa4 	.word	0x08006aa4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fc7b 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f827 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f96b 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f8a7 	bl	800063c <MX_I2C1_Init>
  MX_I2S2_Init();
 80004ee:	f000 f8d3 	bl	8000698 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f2:	f000 f8ff 	bl	80006f4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f6:	f000 f92d 	bl	8000754 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fa:	f005 ff23 	bl	8006344 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int DELAY = 5000;
 80004fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000502:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <main+0x58>)
 800050c:	f000 ff8c 	bl	8001428 <HAL_GPIO_WritePin>
	  HAL_Delay(DELAY);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fcd2 	bl	8000ebc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <main+0x58>)
 8000520:	f000 ff82 	bl	8001428 <HAL_GPIO_WritePin>
	  HAL_Delay(DELAY);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fcc8 	bl	8000ebc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800052c:	e7ea      	b.n	8000504 <main+0x2c>
 800052e:	bf00      	nop
 8000530:	40020c00 	.word	0x40020c00

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b09a      	sub	sp, #104	; 0x68
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f006 f9ec 	bl	8006920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
 8000568:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <SystemClock_Config+0x100>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	4a30      	ldr	r2, [pc, #192]	; (8000634 <SystemClock_Config+0x100>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000578:	6413      	str	r3, [r2, #64]	; 0x40
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <SystemClock_Config+0x100>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <SystemClock_Config+0x104>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <SystemClock_Config+0x104>)
 8000590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0x104>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ba:	23c0      	movs	r3, #192	; 0xc0
 80005bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005be:	2304      	movs	r3, #4
 80005c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005c2:	2308      	movs	r3, #8
 80005c4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f968 	bl	80038a0 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005d6:	f000 f9cd 	bl	8000974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f4:	2103      	movs	r1, #3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fbc2 	bl	8003d80 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000602:	f000 f9b7 	bl	8000974 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000606:	2301      	movs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800060a:	23c8      	movs	r3, #200	; 0xc8
 800060c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800060e:	2305      	movs	r3, #5
 8000610:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fd8e 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000626:	f000 f9a5 	bl	8000974 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3768      	adds	r7, #104	; 0x68
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f002 fb39 	bl	8002cf0 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 f976 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000c0 	.word	0x200000c0
 8000690:	40005400 	.word	0x40005400
 8000694:	000186a0 	.word	0x000186a0

08000698 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2S2_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_I2S2_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <MX_I2S2_Init+0x58>)
 80006c0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2S2_Init+0x50>)
 80006d6:	f002 fc43 	bl	8002f60 <HAL_I2S_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f948 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000016c 	.word	0x2000016c
 80006ec:	40003800 	.word	0x40003800
 80006f0:	00017700 	.word	0x00017700

080006f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_I2S3_Init+0x54>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <MX_I2S3_Init+0x58>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2S3_Init+0x54>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_I2S3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_I2S3_Init+0x54>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_I2S3_Init+0x54>)
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <MX_I2S3_Init+0x5c>)
 800071e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_I2S3_Init+0x54>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2S3_Init+0x54>)
 8000734:	f002 fc14 	bl	8002f60 <HAL_I2S_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073e:	f000 f919 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001b4 	.word	0x200001b4
 800074c:	40003c00 	.word	0x40003c00
 8000750:	00017700 	.word	0x00017700

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f003 fe17 	bl	80043d8 <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f000 f8e0 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000114 	.word	0x20000114
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <MX_GPIO_Init+0x19c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a5f      	ldr	r2, [pc, #380]	; (800095c <MX_GPIO_Init+0x19c>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <MX_GPIO_Init+0x19c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b59      	ldr	r3, [pc, #356]	; (800095c <MX_GPIO_Init+0x19c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a58      	ldr	r2, [pc, #352]	; (800095c <MX_GPIO_Init+0x19c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b56      	ldr	r3, [pc, #344]	; (800095c <MX_GPIO_Init+0x19c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b52      	ldr	r3, [pc, #328]	; (800095c <MX_GPIO_Init+0x19c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a51      	ldr	r2, [pc, #324]	; (800095c <MX_GPIO_Init+0x19c>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b4f      	ldr	r3, [pc, #316]	; (800095c <MX_GPIO_Init+0x19c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b4b      	ldr	r3, [pc, #300]	; (800095c <MX_GPIO_Init+0x19c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a4a      	ldr	r2, [pc, #296]	; (800095c <MX_GPIO_Init+0x19c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b48      	ldr	r3, [pc, #288]	; (800095c <MX_GPIO_Init+0x19c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <MX_GPIO_Init+0x19c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a43      	ldr	r2, [pc, #268]	; (800095c <MX_GPIO_Init+0x19c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <MX_GPIO_Init+0x19c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x19c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a3c      	ldr	r2, [pc, #240]	; (800095c <MX_GPIO_Init+0x19c>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_GPIO_Init+0x19c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4837      	ldr	r0, [pc, #220]	; (8000960 <MX_GPIO_Init+0x1a0>)
 8000884:	f000 fdd0 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4835      	ldr	r0, [pc, #212]	; (8000964 <MX_GPIO_Init+0x1a4>)
 800088e:	f000 fdcb 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000892:	2200      	movs	r2, #0
 8000894:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000898:	4833      	ldr	r0, [pc, #204]	; (8000968 <MX_GPIO_Init+0x1a8>)
 800089a:	f000 fdc5 	bl	8001428 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800089e:	2304      	movs	r3, #4
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	482b      	ldr	r0, [pc, #172]	; (8000960 <MX_GPIO_Init+0x1a0>)
 80008b2:	f000 fc37 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008b6:	2308      	movs	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4824      	ldr	r0, [pc, #144]	; (8000960 <MX_GPIO_Init+0x1a0>)
 80008ce:	f000 fc29 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008d2:	2332      	movs	r3, #50	; 0x32
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x1ac>)
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	481e      	ldr	r0, [pc, #120]	; (8000960 <MX_GPIO_Init+0x1a0>)
 80008e6:	f000 fc1d 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_GPIO_Init+0x1a4>)
 8000902:	f000 fc0f 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_GPIO_Init+0x1ac>)
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4815      	ldr	r0, [pc, #84]	; (8000970 <MX_GPIO_Init+0x1b0>)
 800091a:	f000 fc03 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800091e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000922:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_GPIO_Init+0x1a8>)
 8000938:	f000 fbf4 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800093c:	2320      	movs	r3, #32
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_GPIO_Init+0x1a8>)
 8000950:	f000 fbe8 	bl	8001124 <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40020800 	.word	0x40020800
 8000968:	40020c00 	.word	0x40020c00
 800096c:	10120000 	.word	0x10120000
 8000970:	40020000 	.word	0x40020000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_I2C_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12c      	bne.n	8000a50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <HAL_I2C_MspInit+0x8c>)
 8000a30:	f000 fb78 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_I2C_MspInit+0x88>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400

08000a64 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a59      	ldr	r2, [pc, #356]	; (8000be8 <HAL_I2S_MspInit+0x184>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d15b      	bne.n	8000b3e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	4b58      	ldr	r3, [pc, #352]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a57      	ldr	r2, [pc, #348]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b55      	ldr	r3, [pc, #340]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	4b51      	ldr	r3, [pc, #324]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a50      	ldr	r2, [pc, #320]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000aea:	2306      	movs	r3, #6
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	483e      	ldr	r0, [pc, #248]	; (8000bf0 <HAL_I2S_MspInit+0x18c>)
 8000af6:	f000 fb15 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4836      	ldr	r0, [pc, #216]	; (8000bf0 <HAL_I2S_MspInit+0x18c>)
 8000b16:	f000 fb05 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	482f      	ldr	r0, [pc, #188]	; (8000bf4 <HAL_I2S_MspInit+0x190>)
 8000b38:	f000 faf4 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b3c:	e04f      	b.n	8000bde <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2d      	ldr	r2, [pc, #180]	; (8000bf8 <HAL_I2S_MspInit+0x194>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d14a      	bne.n	8000bde <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_I2S_MspInit+0x188>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bac:	2306      	movs	r3, #6
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4811      	ldr	r0, [pc, #68]	; (8000bfc <HAL_I2S_MspInit+0x198>)
 8000bb8:	f000 fab4 	bl	8001124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bbc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_I2S_MspInit+0x18c>)
 8000bda:	f000 faa3 	bl	8001124 <HAL_GPIO_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3738      	adds	r7, #56	; 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40003800 	.word	0x40003800
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40003c00 	.word	0x40003c00
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c5a:	23e0      	movs	r3, #224	; 0xe0
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_SPI_MspInit+0x8c>)
 8000c76:	f000 fa55 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f8ca 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <OTG_FS_IRQHandler+0x10>)
 8000cf2:	f000 fe37 	bl	8001964 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200005cc 	.word	0x200005cc

08000d00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x50>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x16>
		heap_end = &end;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <_sbrk+0x50>)
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <_sbrk+0x54>)
 8000d14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <_sbrk+0x50>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <_sbrk+0x50>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4413      	add	r3, r2
 8000d24:	466a      	mov	r2, sp
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d907      	bls.n	8000d3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d2a:	f005 fdbf 	bl	80068ac <__errno>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	230c      	movs	r3, #12
 8000d32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d38:	e006      	b.n	8000d48 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <_sbrk+0x50>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <_sbrk+0x50>)
 8000d44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000ac 	.word	0x200000ac
 8000d54:	20000898 	.word	0x20000898

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <SystemInit+0x28>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <SystemInit+0x28>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SystemInit+0x28>)
 8000d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d72:	609a      	str	r2, [r3, #8]
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d8a:	e003      	b.n	8000d94 <LoopCopyDataInit>

08000d8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d92:	3104      	adds	r1, #4

08000d94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d9c:	d3f6      	bcc.n	8000d8c <CopyDataInit>
  ldr  r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000da0:	e002      	b.n	8000da8 <LoopFillZerobss>

08000da2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000da2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000da4:	f842 3b04 	str.w	r3, [r2], #4

08000da8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000daa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dac:	d3f9      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd3 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f005 fd81 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fb8f 	bl	80004d8 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dc0:	08006ae8 	.word	0x08006ae8
  ldr  r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000dcc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000dd0:	20000894 	.word	0x20000894

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f94d 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fdba 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f965 	bl	800110a <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e58:	f000 f92d 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	200001fc 	.word	0x200001fc

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001fc 	.word	0x200001fc

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_Delay+0x40>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000008 	.word	0x20000008

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e159      	b.n	80013f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8148 	bne.w	80013ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d00b      	beq.n	800117e <HAL_GPIO_Init+0x5a>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001172:	2b11      	cmp	r3, #17
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b12      	cmp	r3, #18
 800117c:	d130      	bne.n	80011e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0xfc>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b12      	cmp	r3, #18
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80a2 	beq.w	80013ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b56      	ldr	r3, [pc, #344]	; (8001408 <HAL_GPIO_Init+0x2e4>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a55      	ldr	r2, [pc, #340]	; (8001408 <HAL_GPIO_Init+0x2e4>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_GPIO_Init+0x2e4>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x2e8>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_GPIO_Init+0x2ec>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x202>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a47      	ldr	r2, [pc, #284]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x1fe>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_Init+0x2f4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x1fa>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_Init+0x2f8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x1f6>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a44      	ldr	r2, [pc, #272]	; (8001420 <HAL_GPIO_Init+0x2fc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x1f2>
 8001312:	2304      	movs	r3, #4
 8001314:	e008      	b.n	8001328 <HAL_GPIO_Init+0x204>
 8001316:	2307      	movs	r3, #7
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x204>
 800131a:	2303      	movs	r3, #3
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x204>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x204>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x204>
 8001326:	2300      	movs	r3, #0
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001338:	4934      	ldr	r1, [pc, #208]	; (800140c <HAL_GPIO_Init+0x2e8>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <HAL_GPIO_Init+0x300>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136a:	4a2e      	ldr	r2, [pc, #184]	; (8001424 <HAL_GPIO_Init+0x300>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HAL_GPIO_Init+0x300>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001394:	4a23      	ldr	r2, [pc, #140]	; (8001424 <HAL_GPIO_Init+0x300>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_GPIO_Init+0x300>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a19      	ldr	r2, [pc, #100]	; (8001424 <HAL_GPIO_Init+0x300>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_GPIO_Init+0x300>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_GPIO_Init+0x300>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b0f      	cmp	r3, #15
 80013f8:	f67f aea2 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	3724      	adds	r7, #36	; 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800145a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145c:	b08f      	sub	sp, #60	; 0x3c
 800145e:	af0a      	add	r7, sp, #40	; 0x28
 8001460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e054      	b.n	8001516 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f004 ffb0 	bl	80063ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f86a 	bl	8004584 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	687e      	ldr	r6, [r7, #4]
 80014b8:	466d      	mov	r5, sp
 80014ba:	f106 0410 	add.w	r4, r6, #16
 80014be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ce:	1d33      	adds	r3, r6, #4
 80014d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f002 ffe4 	bl	80044a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 f861 	bl	80045a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	687e      	ldr	r6, [r7, #4]
 80014ec:	466d      	mov	r5, sp
 80014ee:	f106 0410 	add.w	r4, r6, #16
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001502:	1d33      	adds	r3, r6, #4
 8001504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f003 f974 	bl	80047f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800151e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800151e:	b590      	push	{r4, r7, lr}
 8001520:	b089      	sub	sp, #36	; 0x24
 8001522:	af04      	add	r7, sp, #16
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	4608      	mov	r0, r1
 8001528:	4611      	mov	r1, r2
 800152a:	461a      	mov	r2, r3
 800152c:	4603      	mov	r3, r0
 800152e:	70fb      	strb	r3, [r7, #3]
 8001530:	460b      	mov	r3, r1
 8001532:	70bb      	strb	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_HCD_HC_Init+0x28>
 8001542:	2302      	movs	r3, #2
 8001544:	e07f      	b.n	8001646 <HAL_HCD_HC_Init+0x128>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	333d      	adds	r3, #61	; 0x3d
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	3338      	adds	r3, #56	; 0x38
 8001572:	787a      	ldrb	r2, [r7, #1]
 8001574:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3340      	adds	r3, #64	; 0x40
 8001586:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001588:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3339      	adds	r3, #57	; 0x39
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	333f      	adds	r3, #63	; 0x3f
 80015ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	78bb      	ldrb	r3, [r7, #2]
 80015b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	333a      	adds	r3, #58	; 0x3a
 80015cc:	4602      	mov	r2, r0
 80015ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da0a      	bge.n	80015ee <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	333b      	adds	r3, #59	; 0x3b
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e009      	b.n	8001602 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	333b      	adds	r3, #59	; 0x3b
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	333c      	adds	r3, #60	; 0x3c
 8001612:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001616:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	787c      	ldrb	r4, [r7, #1]
 800161e:	78ba      	ldrb	r2, [r7, #2]
 8001620:	78f9      	ldrb	r1, [r7, #3]
 8001622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	4623      	mov	r3, r4
 8001634:	f003 fa1e 	bl	8004a74 <USB_HC_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_HCD_HC_Halt+0x1e>
 8001668:	2302      	movs	r3, #2
 800166a:	e00f      	b.n	800168c <HAL_HCD_HC_Halt+0x3e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f003 fc58 	bl	8004f32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	70fb      	strb	r3, [r7, #3]
 80016a6:	460b      	mov	r3, r1
 80016a8:	70bb      	strb	r3, [r7, #2]
 80016aa:	4613      	mov	r3, r2
 80016ac:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	333b      	adds	r3, #59	; 0x3b
 80016be:	78ba      	ldrb	r2, [r7, #2]
 80016c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	333f      	adds	r3, #63	; 0x3f
 80016d2:	787a      	ldrb	r2, [r7, #1]
 80016d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016d6:	7c3b      	ldrb	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10a      	bne.n	80016f2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3342      	adds	r3, #66	; 0x42
 80016ec:	2203      	movs	r2, #3
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e009      	b.n	8001706 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3342      	adds	r3, #66	; 0x42
 8001702:	2202      	movs	r2, #2
 8001704:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001706:	787b      	ldrb	r3, [r7, #1]
 8001708:	2b03      	cmp	r3, #3
 800170a:	f200 80d6 	bhi.w	80018ba <HAL_HCD_HC_SubmitRequest+0x226>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001725 	.word	0x08001725
 8001718:	080018a5 	.word	0x080018a5
 800171c:	08001791 	.word	0x08001791
 8001720:	0800181b 	.word	0x0800181b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001724:	7c3b      	ldrb	r3, [r7, #16]
 8001726:	2b01      	cmp	r3, #1
 8001728:	f040 80c9 	bne.w	80018be <HAL_HCD_HC_SubmitRequest+0x22a>
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80c5 	bne.w	80018be <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001734:	8b3b      	ldrh	r3, [r7, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3351      	adds	r3, #81	; 0x51
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3351      	adds	r3, #81	; 0x51
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10a      	bne.n	800177a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3342      	adds	r3, #66	; 0x42
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001778:	e0a1      	b.n	80018be <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3342      	adds	r3, #66	; 0x42
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
      break;
 800178e:	e096      	b.n	80018be <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001790:	78bb      	ldrb	r3, [r7, #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d120      	bne.n	80017d8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3351      	adds	r3, #81	; 0x51
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017c0:	e07e      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e073      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	3350      	adds	r3, #80	; 0x50
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	3342      	adds	r3, #66	; 0x42
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
      break;
 8001802:	e05d      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3342      	adds	r3, #66	; 0x42
 8001814:	2202      	movs	r2, #2
 8001816:	701a      	strb	r2, [r3, #0]
      break;
 8001818:	e052      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800181a:	78bb      	ldrb	r3, [r7, #2]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d120      	bne.n	8001862 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3351      	adds	r3, #81	; 0x51
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10a      	bne.n	800184c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800184a:	e039      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3342      	adds	r3, #66	; 0x42
 800185c:	2202      	movs	r2, #2
 800185e:	701a      	strb	r2, [r3, #0]
      break;
 8001860:	e02e      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3350      	adds	r3, #80	; 0x50
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10a      	bne.n	800188e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3342      	adds	r3, #66	; 0x42
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
      break;
 800188c:	e018      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	3342      	adds	r3, #66	; 0x42
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]
      break;
 80018a2:	e00d      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3342      	adds	r3, #66	; 0x42
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
      break;
 80018b8:	e002      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80018be:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3344      	adds	r3, #68	; 0x44
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	8b39      	ldrh	r1, [r7, #24]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4403      	add	r3, r0
 80018e4:	3348      	adds	r3, #72	; 0x48
 80018e6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	335c      	adds	r3, #92	; 0x5c
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	334c      	adds	r3, #76	; 0x4c
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3339      	adds	r3, #57	; 0x39
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	335d      	adds	r3, #93	; 0x5d
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	3338      	adds	r3, #56	; 0x38
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	18d1      	adds	r1, r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	f003 f998 	bl	8004c88 <USB_HC_StartXfer>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop

08001964 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fef7 	bl	800476e <USB_GetMode>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	f040 80f1 	bne.w	8001b6a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fedb 	bl	8004748 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80e7 	beq.w	8001b68 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fed2 	bl	8004748 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ae:	d104      	bne.n	80019ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fec2 	bl	8004748 <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ce:	d104      	bne.n	80019da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 feb2 	bl	8004748 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ee:	d104      	bne.n	80019fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fea2 	bl	8004748 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d103      	bne.n	8001a16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fe94 	bl	8004748 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a2a:	d117      	bne.n	8001a5c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f004 fd51 	bl	80064e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 ff8d 	bl	800496c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fe71 	bl	8004748 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d102      	bne.n	8001a78 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f001 f8ac 	bl	8002bd0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fe63 	bl	8004748 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d106      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f004 fd0f 	bl	80064b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2208      	movs	r2, #8
 8001a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 fe52 	bl	8004748 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aae:	d138      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fa2b 	bl	8004f10 <USB_HC_ReadInterrupt>
 8001aba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e025      	b.n	8001b0e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d018      	beq.n	8001b08 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aec:	d106      	bne.n	8001afc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8b3 	bl	8001c60 <HCD_HC_IN_IRQHandler>
 8001afa:	e005      	b.n	8001b08 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fc43 	bl	800238e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d3d4      	bcc.n	8001ac2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fe0e 	bl	8004748 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d101      	bne.n	8001b3a <HAL_HCD_IRQHandler+0x1d6>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_HCD_IRQHandler+0x1d8>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d014      	beq.n	8001b6a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0210 	bic.w	r2, r2, #16
 8001b4e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 ff91 	bl	8002a78 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0210 	orr.w	r2, r2, #16
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	e000      	b.n	8001b6a <HAL_HCD_IRQHandler+0x206>
      return;
 8001b68:	bf00      	nop
    }
  }
}
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_HCD_Start+0x16>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e013      	b.n	8001bae <HAL_HCD_Start+0x3e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fce5 	bl	8004562 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 ff1e 	bl	80049e0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_HCD_Stop+0x16>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00d      	b.n	8001be8 <HAL_HCD_Stop+0x32>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fae5 	bl	80051a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	335c      	adds	r3, #92	; 0x5c
 8001c0c:	781b      	ldrb	r3, [r3, #0]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	334c      	adds	r3, #76	; 0x4c
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fefe 	bl	8004a52 <USB_GetCurrentFrame>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d119      	bne.n	8001cc4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	0151      	lsls	r1, r2, #5
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	440a      	add	r2, r1
 8001cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	60d3      	str	r3, [r2, #12]
 8001cc2:	e095      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d109      	bne.n	8001cee <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2320      	movs	r3, #32
 8001cea:	6093      	str	r3, [r2, #8]
 8001cec:	e080      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d134      	bne.n	8001d6e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	0151      	lsls	r1, r2, #5
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	440a      	add	r2, r1
 8001d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	335d      	adds	r3, #93	; 0x5d
 8001d34:	2205      	movs	r2, #5
 8001d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	2310      	movs	r3, #16
 8001d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	2308      	movs	r3, #8
 8001d5a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 f8e3 	bl	8004f32 <USB_HC_Halt>
 8001d6c:	e040      	b.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d84:	d134      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 f8be 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	335d      	adds	r3, #93	; 0x5d
 8001dd8:	2208      	movs	r2, #8
 8001dda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	461a      	mov	r2, r3
 8001dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e06:	d122      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	0151      	lsls	r1, r2, #5
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	440a      	add	r2, r1
 8001e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 f87d 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	461a      	mov	r2, r3
 8001e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e4c:	e29b      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	f040 80c1 	bne.w	8001fe8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01b      	beq.n	8001ea6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3348      	adds	r3, #72	; 0x48
 8001e7e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0159      	lsls	r1, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e92:	1ad1      	subs	r1, r2, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4403      	add	r3, r0
 8001ea2:	334c      	adds	r3, #76	; 0x4c
 8001ea4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	335d      	adds	r3, #93	; 0x5d
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3358      	adds	r3, #88	; 0x58
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	2301      	movs	r3, #1
 8001ede:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	333f      	adds	r3, #63	; 0x3f
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	333f      	adds	r3, #63	; 0x3f
 8001f06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d121      	bne.n	8001f50 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	0151      	lsls	r1, r2, #5
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	440a      	add	r2, r1
 8001f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fffb 	bl	8004f32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2310      	movs	r3, #16
 8001f4c:	6093      	str	r3, [r2, #8]
 8001f4e:	e034      	b.n	8001fba <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	333f      	adds	r3, #63	; 0x3f
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d129      	bne.n	8001fba <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f84:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	335c      	adds	r3, #92	; 0x5c
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	b2d8      	uxtb	r0, r3
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	335c      	adds	r3, #92	; 0x5c
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f004 faa5 	bl	8006504 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3350      	adds	r3, #80	; 0x50
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2d8      	uxtb	r0, r3
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	3350      	adds	r3, #80	; 0x50
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	e1ce      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	f040 80f1 	bne.w	80021e2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	0151      	lsls	r1, r2, #5
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	440a      	add	r2, r1
 8002016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800201a:	f023 0302 	bic.w	r3, r3, #2
 800201e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	335d      	adds	r3, #93	; 0x5d
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10a      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	335c      	adds	r3, #92	; 0x5c
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e0b0      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	335d      	adds	r3, #93	; 0x5d
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10a      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	335c      	adds	r3, #92	; 0x5c
 8002072:	2205      	movs	r2, #5
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e09a      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	335d      	adds	r3, #93	; 0x5d
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d00a      	beq.n	80020a4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	335d      	adds	r3, #93	; 0x5d
 800209e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d156      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	3358      	adds	r3, #88	; 0x58
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4403      	add	r3, r0
 80020c6:	3358      	adds	r3, #88	; 0x58
 80020c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	3358      	adds	r3, #88	; 0x58
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d914      	bls.n	800210a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3358      	adds	r3, #88	; 0x58
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	335c      	adds	r3, #92	; 0x5c
 8002104:	2204      	movs	r2, #4
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e009      	b.n	800211e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	335c      	adds	r3, #92	; 0x5c
 800211a:	2202      	movs	r2, #2
 800211c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002134:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800213c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02d      	b.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	335d      	adds	r3, #93	; 0x5d
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d122      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	335c      	adds	r3, #92	; 0x5c
 8002178:	2202      	movs	r2, #2
 800217a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002192:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800219a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	461a      	mov	r2, r3
 80021bc:	2302      	movs	r3, #2
 80021be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4601      	mov	r1, r0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f004 f992 	bl	8006504 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021e0:	e0d1      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d13e      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	0151      	lsls	r1, r2, #5
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	440a      	add	r2, r1
 800220e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3358      	adds	r3, #88	; 0x58
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4403      	add	r3, r0
 800223a:	3358      	adds	r3, #88	; 0x58
 800223c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	335d      	adds	r3, #93	; 0x5d
 800224e:	2206      	movs	r2, #6
 8002250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fe68 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	6093      	str	r3, [r2, #8]
}
 8002274:	e087      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d17c      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	333f      	adds	r3, #63	; 0x3f
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d122      	bne.n	80022e8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3358      	adds	r3, #88	; 0x58
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fe26 	bl	8004f32 <USB_HC_Halt>
 80022e6:	e045      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	333f      	adds	r3, #63	; 0x3f
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	333f      	adds	r3, #63	; 0x3f
 800230e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002310:	2b02      	cmp	r3, #2
 8002312:	d12f      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	3358      	adds	r3, #88	; 0x58
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d121      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	335d      	adds	r3, #93	; 0x5d
 8002340:	2203      	movs	r2, #3
 8002342:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	0151      	lsls	r1, r2, #5
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	440a      	add	r2, r1
 800235a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fddf 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2310      	movs	r3, #16
 8002384:	6093      	str	r3, [r2, #8]
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d119      	bne.n	80023f2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	2304      	movs	r3, #4
 80023ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	0151      	lsls	r1, r2, #5
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	440a      	add	r2, r1
 80023e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80023f0:	e33e      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b20      	cmp	r3, #32
 8002406:	d141      	bne.n	800248c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2320      	movs	r3, #32
 8002418:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	333d      	adds	r3, #61	; 0x3d
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 831f 	bne.w	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	333d      	adds	r3, #61	; 0x3d
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	335c      	adds	r3, #92	; 0x5c
 8002456:	2202      	movs	r2, #2
 8002458:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	0151      	lsls	r1, r2, #5
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	440a      	add	r2, r1
 8002470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fd54 	bl	8004f32 <USB_HC_Halt>
}
 800248a:	e2f1      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d13f      	bne.n	8002522 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	335d      	adds	r3, #93	; 0x5d
 80024b2:	2204      	movs	r2, #4
 80024b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	333d      	adds	r3, #61	; 0x3d
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	3358      	adds	r3, #88	; 0x58
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	0151      	lsls	r1, r2, #5
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	440a      	add	r2, r1
 80024f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fd12 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	461a      	mov	r2, r3
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	6093      	str	r3, [r2, #8]
}
 8002520:	e2a6      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002538:	d122      	bne.n	8002580 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	0151      	lsls	r1, r2, #5
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	440a      	add	r2, r1
 8002550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fce4 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257c:	6093      	str	r3, [r2, #8]
}
 800257e:	e277      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d135      	bne.n	8002602 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	3358      	adds	r3, #88	; 0x58
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	0151      	lsls	r1, r2, #5
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	440a      	add	r2, r1
 80025c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fcac 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e6:	461a      	mov	r2, r3
 80025e8:	2301      	movs	r3, #1
 80025ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	335d      	adds	r3, #93	; 0x5d
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
}
 8002600:	e236      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d12b      	bne.n	8002670 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	2308      	movs	r3, #8
 8002628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fc6c 	bl	8004f32 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	335d      	adds	r3, #93	; 0x5d
 800266a:	2205      	movs	r2, #5
 800266c:	701a      	strb	r2, [r3, #0]
}
 800266e:	e1ff      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b10      	cmp	r3, #16
 8002684:	d155      	bne.n	8002732 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3358      	adds	r3, #88	; 0x58
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	335d      	adds	r3, #93	; 0x5d
 80026aa:	2203      	movs	r2, #3
 80026ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	333d      	adds	r3, #61	; 0x3d
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d114      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	333c      	adds	r3, #60	; 0x3c
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	333d      	adds	r3, #61	; 0x3d
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	0151      	lsls	r1, r2, #5
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	440a      	add	r2, r1
 8002704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f002 fc0a 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	2310      	movs	r3, #16
 800272e:	6093      	str	r3, [r2, #8]
}
 8002730:	e19e      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d12b      	bne.n	80027a0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	0151      	lsls	r1, r2, #5
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	440a      	add	r2, r1
 800275e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fbdd 	bl	8004f32 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	335d      	adds	r3, #93	; 0x5d
 8002788:	2206      	movs	r2, #6
 800278a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	461a      	mov	r2, r3
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	6093      	str	r3, [r2, #8]
}
 800279e:	e167      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b6:	d135      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fba5 	bl	8004f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	461a      	mov	r2, r3
 80027f6:	2310      	movs	r3, #16
 80027f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	461a      	mov	r2, r3
 8002808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	335d      	adds	r3, #93	; 0x5d
 800281e:	2208      	movs	r2, #8
 8002820:	701a      	strb	r2, [r3, #0]
}
 8002822:	e125      	b.n	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	f040 811a 	bne.w	8002a70 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	440a      	add	r2, r1
 8002852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002856:	f023 0302 	bic.w	r3, r3, #2
 800285a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	335d      	adds	r3, #93	; 0x5d
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d137      	bne.n	80028e2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	335c      	adds	r3, #92	; 0x5c
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	333f      	adds	r3, #63	; 0x3f
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d00b      	beq.n	80028b4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	333f      	adds	r3, #63	; 0x3f
 80028ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	f040 80c5 	bne.w	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3351      	adds	r3, #81	; 0x51
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2d8      	uxtb	r0, r3
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3351      	adds	r3, #81	; 0x51
 80028dc:	4602      	mov	r2, r0
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e0ad      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	335d      	adds	r3, #93	; 0x5d
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10a      	bne.n	800290e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	335c      	adds	r3, #92	; 0x5c
 8002908:	2202      	movs	r2, #2
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e097      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	335d      	adds	r3, #93	; 0x5d
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d10a      	bne.n	800293a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e081      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	335d      	adds	r3, #93	; 0x5d
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d10a      	bne.n	8002966 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	2205      	movs	r2, #5
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e06b      	b.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	335d      	adds	r3, #93	; 0x5d
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d00a      	beq.n	8002992 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	335d      	adds	r3, #93	; 0x5d
 800298c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800298e:	2b08      	cmp	r3, #8
 8002990:	d155      	bne.n	8002a3e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	3358      	adds	r3, #88	; 0x58
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1c59      	adds	r1, r3, #1
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4403      	add	r3, r0
 80029b4:	3358      	adds	r3, #88	; 0x58
 80029b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3358      	adds	r3, #88	; 0x58
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d914      	bls.n	80029f8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	3358      	adds	r3, #88	; 0x58
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	335c      	adds	r3, #92	; 0x5c
 80029f2:	2204      	movs	r2, #4
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e009      	b.n	8002a0c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	335c      	adds	r3, #92	; 0x5c
 8002a08:	2202      	movs	r2, #2
 8002a0a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a22:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a2a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	b2d8      	uxtb	r0, r3
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4601      	mov	r1, r0
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f003 fd4a 	bl	8006504 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a70:	bf00      	nop
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	0c5b      	lsrs	r3, r3, #17
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d003      	beq.n	8002abc <HCD_RXQLVL_IRQHandler+0x44>
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	f000 8082 	beq.w	8002bbe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002aba:	e083      	b.n	8002bc4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d07f      	beq.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	3344      	adds	r3, #68	; 0x44
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d074      	beq.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	3344      	adds	r3, #68	; 0x44
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	b292      	uxth	r2, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f001 fdff 	bl	80046f6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3344      	adds	r3, #68	; 0x44
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	18d1      	adds	r1, r2, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4403      	add	r3, r0
 8002b1c:	3344      	adds	r3, #68	; 0x44
 8002b1e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	334c      	adds	r3, #76	; 0x4c
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	18d1      	adds	r1, r2, r3
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4403      	add	r3, r0
 8002b44:	334c      	adds	r3, #76	; 0x4c
 8002b46:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HCD_RXQLVL_IRQHandler+0x154>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d031      	beq.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3350      	adds	r3, #80	; 0x50
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3350      	adds	r3, #80	; 0x50
 8002bb8:	4602      	mov	r2, r0
 8002bba:	701a      	strb	r2, [r3, #0]
      break;
 8002bbc:	e001      	b.n	8002bc2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002bc2:	bf00      	nop
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	; 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	1ff80000 	.word	0x1ff80000

08002bd0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bfc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d113      	bne.n	8002c30 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10a      	bne.n	8002c28 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c20:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f003 fc52 	bl	80064cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d147      	bne.n	8002cca <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d129      	bne.n	8002ca0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d113      	bne.n	8002c7c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c5e:	d106      	bne.n	8002c6e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2102      	movs	r1, #2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 fe80 	bl	800496c <USB_InitFSLSPClkSel>
 8002c6c:	e011      	b.n	8002c92 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2101      	movs	r1, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 fe79 	bl	800496c <USB_InitFSLSPClkSel>
 8002c7a:	e00a      	b.n	8002c92 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c90:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f003 fc44 	bl	8006520 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f003 fc17 	bl	80064cc <HAL_HCD_Connect_Callback>
 8002c9e:	e014      	b.n	8002cca <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f003 fc4b 	bl	800653c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002cb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cb8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cc8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d103      	bne.n	8002cdc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e11f      	b.n	8002f42 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fe5c 	bl	80009d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d54:	f001 f9de 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a7b      	ldr	r2, [pc, #492]	; (8002f4c <HAL_I2C_Init+0x25c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d807      	bhi.n	8002d74 <HAL_I2C_Init+0x84>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a7a      	ldr	r2, [pc, #488]	; (8002f50 <HAL_I2C_Init+0x260>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e006      	b.n	8002d82 <HAL_I2C_Init+0x92>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a77      	ldr	r2, [pc, #476]	; (8002f54 <HAL_I2C_Init+0x264>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0db      	b.n	8002f42 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a72      	ldr	r2, [pc, #456]	; (8002f58 <HAL_I2C_Init+0x268>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0c9b      	lsrs	r3, r3, #18
 8002d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a64      	ldr	r2, [pc, #400]	; (8002f4c <HAL_I2C_Init+0x25c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_I2C_Init+0xd4>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	e009      	b.n	8002dd8 <HAL_I2C_Init+0xe8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <HAL_I2C_Init+0x26c>)
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4956      	ldr	r1, [pc, #344]	; (8002f4c <HAL_I2C_Init+0x25c>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d80d      	bhi.n	8002e14 <HAL_I2C_Init+0x124>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e59      	subs	r1, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e06:	3301      	adds	r3, #1
 8002e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	bf38      	it	cc
 8002e10:	2304      	movcc	r3, #4
 8002e12:	e04f      	b.n	8002eb4 <HAL_I2C_Init+0x1c4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d111      	bne.n	8002e40 <HAL_I2C_Init+0x150>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e58      	subs	r0, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e012      	b.n	8002e66 <HAL_I2C_Init+0x176>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	0099      	lsls	r1, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Init+0x17e>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e022      	b.n	8002eb4 <HAL_I2C_Init+0x1c4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10e      	bne.n	8002e94 <HAL_I2C_Init+0x1a4>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e58      	subs	r0, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	440b      	add	r3, r1
 8002e84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e92:	e00f      	b.n	8002eb4 <HAL_I2C_Init+0x1c4>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	6809      	ldr	r1, [r1, #0]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ee2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6911      	ldr	r1, [r2, #16]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	000186a0 	.word	0x000186a0
 8002f50:	001e847f 	.word	0x001e847f
 8002f54:	003d08ff 	.word	0x003d08ff
 8002f58:	431bde83 	.word	0x431bde83
 8002f5c:	10624dd3 	.word	0x10624dd3

08002f60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e128      	b.n	80031c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a90      	ldr	r2, [pc, #576]	; (80031cc <HAL_I2S_Init+0x26c>)
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fd fd69 	bl	8000a64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fa8:	f023 030f 	bic.w	r3, r3, #15
 8002fac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d060      	beq.n	8003080 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e001      	b.n	8002fd0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d802      	bhi.n	8002fde <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f001 f99c 	bl	800431c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fe4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d125      	bne.n	800303c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d010      	beq.n	800301a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	461a      	mov	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	3305      	adds	r3, #5
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	e01f      	b.n	800305a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	fbb2 f2f3 	udiv	r2, r2, r3
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	3305      	adds	r3, #5
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e00e      	b.n	800305a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	fbb2 f2f3 	udiv	r2, r2, r3
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	3305      	adds	r3, #5
 8003058:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_I2S_Init+0x270>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	08db      	lsrs	r3, r3, #3
 8003064:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e003      	b.n	8003088 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003080:	2302      	movs	r3, #2
 8003082:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d902      	bls.n	8003094 <HAL_I2S_Init+0x134>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2bff      	cmp	r3, #255	; 0xff
 8003092:	d907      	bls.n	80030a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e08f      	b.n	80031c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	ea42 0103 	orr.w	r1, r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030c2:	f023 030f 	bic.w	r3, r3, #15
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6851      	ldr	r1, [r2, #4]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6892      	ldr	r2, [r2, #8]
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68d2      	ldr	r2, [r2, #12]
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6992      	ldr	r2, [r2, #24]
 80030da:	430a      	orrs	r2, r1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d161      	bne.n	80031b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <HAL_I2S_Init+0x274>)
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <HAL_I2S_Init+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <HAL_I2S_Init+0x1a4>
 8003100:	4b36      	ldr	r3, [pc, #216]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003102:	e001      	b.n	8003108 <HAL_I2S_Init+0x1a8>
 8003104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4932      	ldr	r1, [pc, #200]	; (80031d8 <HAL_I2S_Init+0x278>)
 8003110:	428a      	cmp	r2, r1
 8003112:	d101      	bne.n	8003118 <HAL_I2S_Init+0x1b8>
 8003114:	4a31      	ldr	r2, [pc, #196]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003116:	e001      	b.n	800311c <HAL_I2S_Init+0x1bc>
 8003118:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800311c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003120:	f023 030f 	bic.w	r3, r3, #15
 8003124:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_I2S_Init+0x278>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_I2S_Init+0x1d4>
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x1d8>
 8003134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003138:	2202      	movs	r2, #2
 800313a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <HAL_I2S_Init+0x278>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_I2S_Init+0x1ea>
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_I2S_Init+0x27c>)
 8003148:	e001      	b.n	800314e <HAL_I2S_Init+0x1ee>
 800314a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315a:	d003      	beq.n	8003164 <HAL_I2S_Init+0x204>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e001      	b.n	8003170 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	b299      	uxth	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003186:	4303      	orrs	r3, r0
 8003188:	b29b      	uxth	r3, r3
 800318a:	430b      	orrs	r3, r1
 800318c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800318e:	4313      	orrs	r3, r2
 8003190:	b29a      	uxth	r2, r3
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	4313      	orrs	r3, r2
 8003196:	b29b      	uxth	r3, r3
 8003198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800319c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <HAL_I2S_Init+0x278>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_I2S_Init+0x24c>
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_I2S_Init+0x27c>)
 80031aa:	e001      	b.n	80031b0 <HAL_I2S_Init+0x250>
 80031ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b0:	897a      	ldrh	r2, [r7, #10]
 80031b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	080032d7 	.word	0x080032d7
 80031d0:	cccccccd 	.word	0xcccccccd
 80031d4:	080033ed 	.word	0x080033ed
 80031d8:	40003800 	.word	0x40003800
 80031dc:	40003400 	.word	0x40003400

080031e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10e      	bne.n	8003270 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003260:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffb8 	bl	80031e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	b292      	uxth	r2, r2
 800328c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10e      	bne.n	80032ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff93 	bl	80031f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d13a      	bne.n	8003368 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d109      	bne.n	8003310 <I2S_IRQHandler+0x3a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d102      	bne.n	8003310 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffb4 	bl	8003278 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d126      	bne.n	8003368 <I2S_IRQHandler+0x92>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b20      	cmp	r3, #32
 8003326:	d11f      	bne.n	8003368 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003336:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f043 0202 	orr.w	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff50 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d136      	bne.n	80033e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	d109      	bne.n	8003392 <I2S_IRQHandler+0xbc>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d102      	bne.n	8003392 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff45 	bl	800321c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b08      	cmp	r3, #8
 800339a:	d122      	bne.n	80033e2 <I2S_IRQHandler+0x10c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d11b      	bne.n	80033e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ff13 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4aa2      	ldr	r2, [pc, #648]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003406:	4ba2      	ldr	r3, [pc, #648]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003408:	e001      	b.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a9b      	ldr	r2, [pc, #620]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003424:	4b9a      	ldr	r3, [pc, #616]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003426:	e001      	b.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003428:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d004      	beq.n	8003444 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 8099 	bne.w	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d107      	bne.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f925 	bl	80036a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9c8 	bl	8003808 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d13a      	bne.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d035      	beq.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7e      	ldr	r2, [pc, #504]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003496:	4b7e      	ldr	r3, [pc, #504]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003498:	e001      	b.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4979      	ldr	r1, [pc, #484]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034a6:	428b      	cmp	r3, r1
 80034a8:	d101      	bne.n	80034ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034aa:	4b79      	ldr	r3, [pc, #484]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ac:	e001      	b.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fe88 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b08      	cmp	r3, #8
 8003500:	f040 80be 	bne.w	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80b8 	beq.w	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800351e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a59      	ldr	r2, [pc, #356]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800352a:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800352c:	e001      	b.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4954      	ldr	r1, [pc, #336]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800353a:	428b      	cmp	r3, r1
 800353c:	d101      	bne.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003540:	e001      	b.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fe4a 	bl	8003208 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003574:	e084      	b.n	8003680 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b02      	cmp	r3, #2
 800357e:	d107      	bne.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8be 	bl	800370c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8fd 	bl	80037a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d12f      	bne.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02a      	beq.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2e      	ldr	r2, [pc, #184]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035da:	e001      	b.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4929      	ldr	r1, [pc, #164]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035e8:	428b      	cmp	r3, r1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035ee:	e001      	b.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fdfa 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d131      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02c      	beq.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003634:	e001      	b.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4912      	ldr	r1, [pc, #72]	; (800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003642:	428b      	cmp	r3, r1
 8003644:	d101      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003648:	e001      	b.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003652:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003662:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fdc5 	bl	8003208 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800367e:	e000      	b.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003680:	bf00      	nop
}
 8003682:	bf00      	nop
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40003800 	.word	0x40003800
 8003690:	40003400 	.word	0x40003400

08003694 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c99      	adds	r1, r3, #2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6251      	str	r1, [r2, #36]	; 0x24
 80036ba:	881a      	ldrh	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d113      	bne.n	8003702 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ffc9 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c99      	adds	r1, r3, #2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6251      	str	r1, [r2, #36]	; 0x24
 800371e:	8819      	ldrh	r1, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <I2SEx_TxISR_I2SExt+0x90>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <I2SEx_TxISR_I2SExt+0x22>
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <I2SEx_TxISR_I2SExt+0x94>)
 800372c:	e001      	b.n	8003732 <I2SEx_TxISR_I2SExt+0x26>
 800372e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003732:	460a      	mov	r2, r1
 8003734:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d121      	bne.n	8003792 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <I2SEx_TxISR_I2SExt+0x90>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <I2SEx_TxISR_I2SExt+0x50>
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <I2SEx_TxISR_I2SExt+0x94>)
 800375a:	e001      	b.n	8003760 <I2SEx_TxISR_I2SExt+0x54>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	490d      	ldr	r1, [pc, #52]	; (800379c <I2SEx_TxISR_I2SExt+0x90>)
 8003768:	428b      	cmp	r3, r1
 800376a:	d101      	bne.n	8003770 <I2SEx_TxISR_I2SExt+0x64>
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <I2SEx_TxISR_I2SExt+0x94>)
 800376e:	e001      	b.n	8003774 <I2SEx_TxISR_I2SExt+0x68>
 8003770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003778:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff81 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40003800 	.word	0x40003800
 80037a0:	40003400 	.word	0x40003400

080037a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68d8      	ldr	r0, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	1c99      	adds	r1, r3, #2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037bc:	b282      	uxth	r2, r0
 80037be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ff4a 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a20      	ldr	r2, [pc, #128]	; (8003898 <I2SEx_RxISR_I2SExt+0x90>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <I2SEx_RxISR_I2SExt+0x16>
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <I2SEx_RxISR_I2SExt+0x94>)
 800381c:	e001      	b.n	8003822 <I2SEx_RxISR_I2SExt+0x1a>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	68d8      	ldr	r0, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	1c99      	adds	r1, r3, #2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800382e:	b282      	uxth	r2, r0
 8003830:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d121      	bne.n	800388e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a12      	ldr	r2, [pc, #72]	; (8003898 <I2SEx_RxISR_I2SExt+0x90>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <I2SEx_RxISR_I2SExt+0x50>
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <I2SEx_RxISR_I2SExt+0x94>)
 8003856:	e001      	b.n	800385c <I2SEx_RxISR_I2SExt+0x54>
 8003858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	490d      	ldr	r1, [pc, #52]	; (8003898 <I2SEx_RxISR_I2SExt+0x90>)
 8003864:	428b      	cmp	r3, r1
 8003866:	d101      	bne.n	800386c <I2SEx_RxISR_I2SExt+0x64>
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <I2SEx_RxISR_I2SExt+0x94>)
 800386a:	e001      	b.n	8003870 <I2SEx_RxISR_I2SExt+0x68>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003870:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003874:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff03 	bl	8003694 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40003800 	.word	0x40003800
 800389c:	40003400 	.word	0x40003400

080038a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e25b      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d075      	beq.n	80039aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038be:	4ba3      	ldr	r3, [pc, #652]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d00c      	beq.n	80038e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4ba0      	ldr	r3, [pc, #640]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d112      	bne.n	80038fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4b9d      	ldr	r3, [pc, #628]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e2:	d10b      	bne.n	80038fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	4b99      	ldr	r3, [pc, #612]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d05b      	beq.n	80039a8 <HAL_RCC_OscConfig+0x108>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d157      	bne.n	80039a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e236      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d106      	bne.n	8003914 <HAL_RCC_OscConfig+0x74>
 8003906:	4b91      	ldr	r3, [pc, #580]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a90      	ldr	r2, [pc, #576]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800390c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e01d      	b.n	8003950 <HAL_RCC_OscConfig+0xb0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x98>
 800391e:	4b8b      	ldr	r3, [pc, #556]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a8a      	ldr	r2, [pc, #552]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a87      	ldr	r2, [pc, #540]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e00b      	b.n	8003950 <HAL_RCC_OscConfig+0xb0>
 8003938:	4b84      	ldr	r3, [pc, #528]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a83      	ldr	r2, [pc, #524]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b81      	ldr	r3, [pc, #516]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a80      	ldr	r2, [pc, #512]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800394a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd faa4 	bl	8000ea4 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd faa0 	bl	8000ea4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1fb      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0xc0>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fa90 	bl	8000ea4 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd fa8c 	bl	8000ea4 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e1e7      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0xe8>
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d063      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b62      	ldr	r3, [pc, #392]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d11c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b5f      	ldr	r3, [pc, #380]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d116      	bne.n	8003a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_RCC_OscConfig+0x152>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e1bb      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f2:	4b56      	ldr	r3, [pc, #344]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4952      	ldr	r1, [pc, #328]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	e03a      	b.n	8003a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a10:	4b4f      	ldr	r3, [pc, #316]	; (8003b50 <HAL_RCC_OscConfig+0x2b0>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7fd fa45 	bl	8000ea4 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a1e:	f7fd fa41 	bl	8000ea4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e19c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4940      	ldr	r1, [pc, #256]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
 8003a50:	e015      	b.n	8003a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCC_OscConfig+0x2b0>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fa24 	bl	8000ea4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a60:	f7fd fa20 	bl	8000ea4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e17b      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d030      	beq.n	8003aec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCC_OscConfig+0x2b4>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd fa04 	bl	8000ea4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fd fa00 	bl	8000ea4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e15b      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x200>
 8003abe:	e015      	b.n	8003aec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_OscConfig+0x2b4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fd f9ed 	bl	8000ea4 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ace:	f7fd f9e9 	bl	8000ea4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e144      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a0 	beq.w	8003c3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x2b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d121      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_RCC_OscConfig+0x2b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <HAL_RCC_OscConfig+0x2b8>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b42:	f7fd f9af 	bl	8000ea4 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	e011      	b.n	8003b6e <HAL_RCC_OscConfig+0x2ce>
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	42470000 	.word	0x42470000
 8003b54:	42470e80 	.word	0x42470e80
 8003b58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fd f9a2 	bl	8000ea4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0fd      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b81      	ldr	r3, [pc, #516]	; (8003d74 <HAL_RCC_OscConfig+0x4d4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2f0>
 8003b82:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8e:	e01c      	b.n	8003bca <HAL_RCC_OscConfig+0x32a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x312>
 8003b98:	4b77      	ldr	r3, [pc, #476]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a76      	ldr	r2, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	4b74      	ldr	r3, [pc, #464]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a73      	ldr	r2, [pc, #460]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x32a>
 8003bb2:	4b71      	ldr	r3, [pc, #452]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a70      	ldr	r2, [pc, #448]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbe:	4b6e      	ldr	r3, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a6d      	ldr	r2, [pc, #436]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd f967 	bl	8000ea4 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f963 	bl	8000ea4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0bc      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ee      	beq.n	8003bda <HAL_RCC_OscConfig+0x33a>
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd f951 	bl	8000ea4 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fd f94d 	bl	8000ea4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0a6      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1c:	4b56      	ldr	r3, [pc, #344]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ee      	bne.n	8003c06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2e:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a51      	ldr	r2, [pc, #324]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 8092 	beq.w	8003d68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d05c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d141      	bne.n	8003cdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c58:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <HAL_RCC_OscConfig+0x4dc>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fd f921 	bl	8000ea4 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd f91d 	bl	8000ea4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e078      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c78:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	019b      	lsls	r3, r3, #6
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	4933      	ldr	r1, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_OscConfig+0x4dc>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd f8f6 	bl	8000ea4 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd f8f2 	bl	8000ea4 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e04d      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x41c>
 8003cda:	e045      	b.n	8003d68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cdc:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <HAL_RCC_OscConfig+0x4dc>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fd f8df 	bl	8000ea4 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cea:	f7fd f8db 	bl	8000ea4 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e036      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f0      	bne.n	8003cea <HAL_RCC_OscConfig+0x44a>
 8003d08:	e02e      	b.n	8003d68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e029      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d16:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d11c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d115      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40007000 	.word	0x40007000
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	42470060 	.word	0x42470060

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0cc      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d90c      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a52      	ldr	r2, [pc, #328]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	494d      	ldr	r1, [pc, #308]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d044      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d119      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e06f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e067      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4934      	ldr	r1, [pc, #208]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fd f818 	bl	8000ea4 <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7fd f814 	bl	8000ea4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e04f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 020c 	and.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1eb      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d20c      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e032      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4916      	ldr	r1, [pc, #88]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f06:	f000 f821 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	5cd3      	ldrb	r3, [r2, r3]
 8003f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc ff78 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023c00 	.word	0x40023c00
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08006ac0 	.word	0x08006ac0
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d007      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x32>
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d008      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x38>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 80b4 	bne.w	80040e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f7a:	60bb      	str	r3, [r7, #8]
       break;
 8003f7c:	e0b3      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7e:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f80:	60bb      	str	r3, [r7, #8]
      break;
 8003f82:	e0b0      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4b5a      	ldr	r3, [pc, #360]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8e:	4b58      	ldr	r3, [pc, #352]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04a      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b55      	ldr	r3, [pc, #340]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	f04f 0400 	mov.w	r4, #0
 8003fa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	ea03 0501 	and.w	r5, r3, r1
 8003fb0:	ea04 0602 	and.w	r6, r4, r2
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	0154      	lsls	r4, r2, #5
 8003fc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fc6:	014b      	lsls	r3, r1, #5
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4622      	mov	r2, r4
 8003fcc:	1b49      	subs	r1, r1, r5
 8003fce:	eb62 0206 	sbc.w	r2, r2, r6
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	f04f 0400 	mov.w	r4, #0
 8003fda:	0194      	lsls	r4, r2, #6
 8003fdc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fe0:	018b      	lsls	r3, r1, #6
 8003fe2:	1a5b      	subs	r3, r3, r1
 8003fe4:	eb64 0402 	sbc.w	r4, r4, r2
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	00e2      	lsls	r2, r4, #3
 8003ff2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ff6:	00d9      	lsls	r1, r3, #3
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	195b      	adds	r3, r3, r5
 8003ffe:	eb44 0406 	adc.w	r4, r4, r6
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	0262      	lsls	r2, r4, #9
 800400c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004010:	0259      	lsls	r1, r3, #9
 8004012:	460b      	mov	r3, r1
 8004014:	4614      	mov	r4, r2
 8004016:	4618      	mov	r0, r3
 8004018:	4621      	mov	r1, r4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	461a      	mov	r2, r3
 8004022:	4623      	mov	r3, r4
 8004024:	f7fc f8d8 	bl	80001d8 <__aeabi_uldivmod>
 8004028:	4603      	mov	r3, r0
 800402a:	460c      	mov	r4, r1
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e049      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004030:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	ea03 0501 	and.w	r5, r3, r1
 8004046:	ea04 0602 	and.w	r6, r4, r2
 800404a:	4629      	mov	r1, r5
 800404c:	4632      	mov	r2, r6
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	f04f 0400 	mov.w	r4, #0
 8004056:	0154      	lsls	r4, r2, #5
 8004058:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800405c:	014b      	lsls	r3, r1, #5
 800405e:	4619      	mov	r1, r3
 8004060:	4622      	mov	r2, r4
 8004062:	1b49      	subs	r1, r1, r5
 8004064:	eb62 0206 	sbc.w	r2, r2, r6
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	f04f 0400 	mov.w	r4, #0
 8004070:	0194      	lsls	r4, r2, #6
 8004072:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004076:	018b      	lsls	r3, r1, #6
 8004078:	1a5b      	subs	r3, r3, r1
 800407a:	eb64 0402 	sbc.w	r4, r4, r2
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	00e2      	lsls	r2, r4, #3
 8004088:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800408c:	00d9      	lsls	r1, r3, #3
 800408e:	460b      	mov	r3, r1
 8004090:	4614      	mov	r4, r2
 8004092:	195b      	adds	r3, r3, r5
 8004094:	eb44 0406 	adc.w	r4, r4, r6
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	02a2      	lsls	r2, r4, #10
 80040a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040a6:	0299      	lsls	r1, r3, #10
 80040a8:	460b      	mov	r3, r1
 80040aa:	4614      	mov	r4, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	4621      	mov	r1, r4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	461a      	mov	r2, r3
 80040b8:	4623      	mov	r3, r4
 80040ba:	f7fc f88d 	bl	80001d8 <__aeabi_uldivmod>
 80040be:	4603      	mov	r3, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	3301      	adds	r3, #1
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	60bb      	str	r3, [r7, #8]
      break;
 80040de:	e002      	b.n	80040e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e0:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040e2:	60bb      	str	r3, [r7, #8]
      break;
 80040e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040e6:	68bb      	ldr	r3, [r7, #8]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	007a1200 	.word	0x007a1200

080040fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_RCC_GetHCLKFreq+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000000 	.word	0x20000000

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004118:	f7ff fff0 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 800411c:	4601      	mov	r1, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4a03      	ldr	r2, [pc, #12]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	08006ad0 	.word	0x08006ad0

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004160:	2b00      	cmp	r3, #0
 8004162:	d038      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004164:	4b68      	ldr	r3, [pc, #416]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800416a:	f7fc fe9b 	bl	8000ea4 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004172:	f7fc fe97 	bl	8000ea4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e0bd      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004184:	4b61      	ldr	r3, [pc, #388]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	019b      	lsls	r3, r3, #6
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	071b      	lsls	r3, r3, #28
 80041a2:	495a      	ldr	r1, [pc, #360]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041aa:	4b57      	ldr	r3, [pc, #348]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fc fe78 	bl	8000ea4 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041b8:	f7fc fe74 	bl	8000ea4 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e09a      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ca:	4b50      	ldr	r3, [pc, #320]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8083 	beq.w	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4b48      	ldr	r3, [pc, #288]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	4a47      	ldr	r2, [pc, #284]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f2:	6413      	str	r3, [r2, #64]	; 0x40
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004200:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a42      	ldr	r2, [pc, #264]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800420c:	f7fc fe4a 	bl	8000ea4 <HAL_GetTick>
 8004210:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004214:	f7fc fe46 	bl	8000ea4 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e06c      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004226:	4b3a      	ldr	r3, [pc, #232]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004232:	4b36      	ldr	r3, [pc, #216]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d02f      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	429a      	cmp	r2, r3
 800424e:	d028      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004250:	4b2e      	ldr	r3, [pc, #184]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800425a:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004260:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004266:	4a29      	ldr	r2, [pc, #164]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b01      	cmp	r3, #1
 8004276:	d114      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004278:	f7fc fe14 	bl	8000ea4 <HAL_GetTick>
 800427c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fc fe10 	bl	8000ea4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e034      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ee      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ae:	d10d      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80042b0:	4b16      	ldr	r3, [pc, #88]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	4911      	ldr	r1, [pc, #68]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
 80042ca:	e005      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a0e      	ldr	r2, [pc, #56]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042d6:	6093      	str	r3, [r2, #8]
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e4:	4909      	ldr	r1, [pc, #36]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7d1a      	ldrb	r2, [r3, #20]
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80042fc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	42470068 	.word	0x42470068
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000
 8004314:	42470e40 	.word	0x42470e40
 8004318:	424711e0 	.word	0x424711e0

0800431c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d13f      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800433a:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004342:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800434a:	2b01      	cmp	r3, #1
 800434c:	d131      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800434e:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004350:	617b      	str	r3, [r7, #20]
          break;
 8004352:	e031      	b.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004360:	d109      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800436c:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	e008      	b.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004380:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800439e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a2:	0f1b      	lsrs	r3, r3, #28
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	617b      	str	r3, [r7, #20]
          break;
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
          break;
 80043b6:	bf00      	nop
        }
      }
      break;
 80043b8:	bf00      	nop
    }
  }
  return frequency;
 80043ba:	697b      	ldr	r3, [r7, #20]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00bb8000 	.word	0x00bb8000
 80043d0:	007a1200 	.word	0x007a1200
 80043d4:	00f42400 	.word	0x00f42400

080043d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e056      	b.n	8004498 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fc fbfb 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004420:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	ea42 0103 	orr.w	r1, r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	f003 0104 	and.w	r1, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004486:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044a0:	b084      	sub	sp, #16
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	f107 001c 	add.w	r0, r7, #28
 80044ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d122      	bne.n	80044fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d105      	bne.n	80044f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f94a 	bl	800478c <USB_CoreReset>
 80044f8:	4603      	mov	r3, r0
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	e01a      	b.n	8004534 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f93e 	bl	800478c <USB_CoreReset>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
 8004526:	e005      	b.n	8004534 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10b      	bne.n	8004552 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f043 0206 	orr.w	r2, r3, #6
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800455e:	b004      	add	sp, #16
 8004560:	4770      	bx	lr

08004562 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 0201 	bic.w	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	e00b      	b.n	80045ea <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e001      	b.n	80045ea <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e003      	b.n	80045f2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045ea:	2032      	movs	r0, #50	; 0x32
 80045ec:	f7fc fc66 	bl	8000ebc <HAL_Delay>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3301      	adds	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <USB_FlushTxFifo+0x48>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d0f0      	beq.n	8004616 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	00030d40 	.word	0x00030d40

08004648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2210      	movs	r2, #16
 8004658:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3301      	adds	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a09      	ldr	r2, [pc, #36]	; (8004688 <USB_FlushRxFifo+0x40>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e006      	b.n	800467a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b10      	cmp	r3, #16
 8004676:	d0f0      	beq.n	800465a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	00030d40 	.word	0x00030d40

0800468c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	460b      	mov	r3, r1
 800469c:	71fb      	strb	r3, [r7, #7]
 800469e:	4613      	mov	r3, r2
 80046a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11a      	bne.n	80046e8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046b2:	88bb      	ldrh	r3, [r7, #4]
 80046b4:	3303      	adds	r3, #3
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	e00f      	b.n	80046e0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	031a      	lsls	r2, r3, #12
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046cc:	461a      	mov	r2, r3
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3304      	adds	r3, #4
 80046d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	3301      	adds	r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d3eb      	bcc.n	80046c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3724      	adds	r7, #36	; 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b089      	sub	sp, #36	; 0x24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	4613      	mov	r3, r2
 8004702:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	3303      	adds	r3, #3
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004714:	2300      	movs	r3, #0
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e00b      	b.n	8004732 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	601a      	str	r2, [r3, #0]
    pDest++;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	3301      	adds	r3, #1
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d3ef      	bcc.n	800471a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800473a:	69fb      	ldr	r3, [r7, #28]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3724      	adds	r7, #36	; 0x24
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0301 	and.w	r3, r3, #1
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <USB_CoreReset+0x64>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e01b      	b.n	80047e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	daf2      	bge.n	8004798 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f043 0201 	orr.w	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <USB_CoreReset+0x64>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e006      	b.n	80047e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d0f0      	beq.n	80047c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	00030d40 	.word	0x00030d40

080047f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047f4:	b084      	sub	sp, #16
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	f107 001c 	add.w	r0, r7, #28
 8004802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004810:	461a      	mov	r2, r3
 8004812:	2300      	movs	r3, #0
 8004814:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	2b03      	cmp	r3, #3
 800484a:	d10a      	bne.n	8004862 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800485a:	f043 0304 	orr.w	r3, r3, #4
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e014      	b.n	800488c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e009      	b.n	800488c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004886:	f023 0304 	bic.w	r3, r3, #4
 800488a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800488c:	2110      	movs	r1, #16
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff feb4 	bl	80045fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fed7 	bl	8004648 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e015      	b.n	80048cc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ac:	461a      	mov	r2, r3
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	461a      	mov	r2, r3
 80048c2:	2300      	movs	r3, #0
 80048c4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d3e5      	bcc.n	80048a0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80048d4:	2101      	movs	r1, #1
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f882 	bl	80049e0 <USB_DriveVbus>

  HAL_Delay(200U);
 80048dc:	20c8      	movs	r0, #200	; 0xc8
 80048de:	f7fc faed 	bl	8000ebc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ee:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004902:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <USB_HostInit+0x164>)
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <USB_HostInit+0x168>)
 800490e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004912:	e009      	b.n	8004928 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2280      	movs	r2, #128	; 0x80
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a10      	ldr	r2, [pc, #64]	; (8004960 <USB_HostInit+0x16c>)
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a10      	ldr	r2, [pc, #64]	; (8004964 <USB_HostInit+0x170>)
 8004924:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f043 0210 	orr.w	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <USB_HostInit+0x174>)
 8004940:	4313      	orrs	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004952:	b004      	add	sp, #16
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	01000200 	.word	0x01000200
 800495c:	00e00300 	.word	0x00e00300
 8004960:	00600080 	.word	0x00600080
 8004964:	004000e0 	.word	0x004000e0
 8004968:	a3200008 	.word	0xa3200008

0800496c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d107      	bne.n	80049be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b4:	461a      	mov	r2, r3
 80049b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049ba:	6053      	str	r3, [r2, #4]
 80049bc:	e009      	b.n	80049d2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d106      	bne.n	80049d2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ca:	461a      	mov	r2, r3
 80049cc:	f241 7370 	movw	r3, #6000	; 0x1770
 80049d0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <USB_DriveVbus+0x44>
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d106      	bne.n	8004a24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d109      	bne.n	8004a44 <USB_DriveVbus+0x64>
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	b29b      	uxth	r3, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	70fb      	strb	r3, [r7, #3]
 8004a86:	460b      	mov	r3, r1
 8004a88:	70bb      	strb	r3, [r7, #2]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aa8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004aaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d87e      	bhi.n	8004bb0 <USB_HC_Init+0x13c>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <USB_HC_Init+0x44>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004b73 	.word	0x08004b73
 8004ac0:	08004ac9 	.word	0x08004ac9
 8004ac4:	08004b35 	.word	0x08004b35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004ada:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004adc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	da10      	bge.n	8004b06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b02:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004b04:	e057      	b.n	8004bb6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d051      	beq.n	8004bb6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b30:	60d3      	str	r3, [r2, #12]
      break;
 8004b32:	e040      	b.n	8004bb6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b40:	461a      	mov	r2, r3
 8004b42:	f240 639d 	movw	r3, #1693	; 0x69d
 8004b46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	da34      	bge.n	8004bba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b70:	e023      	b.n	8004bba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f240 2325 	movw	r3, #549	; 0x225
 8004b84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da17      	bge.n	8004bbe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ba8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004bac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004bae:	e006      	b.n	8004bbe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb4:	e004      	b.n	8004bc0 <USB_HC_Init+0x14c>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e002      	b.n	8004bc0 <USB_HC_Init+0x14c>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e000      	b.n	8004bc0 <USB_HC_Init+0x14c>
      break;
 8004bbe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	2101      	movs	r1, #1
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004bea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da03      	bge.n	8004bfa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	e001      	b.n	8004bfe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d103      	bne.n	8004c0e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e001      	b.n	8004c12 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c12:	787b      	ldrb	r3, [r7, #1]
 8004c14:	059b      	lsls	r3, r3, #22
 8004c16:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c1a:	78bb      	ldrb	r3, [r7, #2]
 8004c1c:	02db      	lsls	r3, r3, #11
 8004c1e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c22:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c28:	049b      	lsls	r3, r3, #18
 8004c2a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c2e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	0159      	lsls	r1, r3, #5
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	440b      	add	r3, r1
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c48:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c4e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004c50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d10f      	bne.n	8004c78 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c76:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop

08004c88 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d028      	beq.n	8004d04 <USB_HC_StartXfer+0x7c>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	791b      	ldrb	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d124      	bne.n	8004d04 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <USB_HC_StartXfer+0x50>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	795b      	ldrb	r3, [r3, #5]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d107      	bne.n	8004cd8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fa2e 	bl	8005130 <USB_DoPing>
      return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e112      	b.n	8004efe <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d112      	bne.n	8004d04 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004cfc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2200      	movs	r2, #0
 8004d02:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d018      	beq.n	8004d3e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	8912      	ldrh	r2, [r2, #8]
 8004d14:	4413      	add	r3, r2
 8004d16:	3b01      	subs	r3, #1
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	8912      	ldrh	r2, [r2, #8]
 8004d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d20:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004d24:	8b7b      	ldrh	r3, [r7, #26]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d90b      	bls.n	8004d42 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004d2a:	8b7b      	ldrh	r3, [r7, #26]
 8004d2c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	8912      	ldrh	r2, [r2, #8]
 8004d34:	fb02 f203 	mul.w	r2, r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	611a      	str	r2, [r3, #16]
 8004d3c:	e001      	b.n	8004d42 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	78db      	ldrb	r3, [r3, #3]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	8912      	ldrh	r2, [r2, #8]
 8004d50:	fb02 f203 	mul.w	r2, r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d62:	04d9      	lsls	r1, r3, #19
 8004d64:	4b68      	ldr	r3, [pc, #416]	; (8004f08 <USB_HC_StartXfer+0x280>)
 8004d66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	7a9b      	ldrb	r3, [r3, #10]
 8004d6e:	075b      	lsls	r3, r3, #29
 8004d70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	0148      	lsls	r0, r1, #5
 8004d78:	6a39      	ldr	r1, [r7, #32]
 8004d7a:	4401      	add	r1, r0
 8004d7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	68d9      	ldr	r1, [r3, #12]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	460a      	mov	r2, r1
 8004d9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bf0c      	ite	eq
 8004dae:	2301      	moveq	r3, #1
 8004db0:	2300      	movne	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004dd4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	7e7b      	ldrb	r3, [r7, #25]
 8004de6:	075b      	lsls	r3, r3, #29
 8004de8:	69f9      	ldr	r1, [r7, #28]
 8004dea:	0148      	lsls	r0, r1, #5
 8004dec:	6a39      	ldr	r1, [r7, #32]
 8004dee:	4401      	add	r1, r0
 8004df0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004df4:	4313      	orrs	r3, r2
 8004df6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a41      	ldr	r2, [pc, #260]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e08:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e0a:	4b40      	ldr	r3, [pc, #256]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e12:	4a3e      	ldr	r2, [pc, #248]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e14:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	78db      	ldrb	r3, [r3, #3]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004e1e:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e26:	4a39      	ldr	r2, [pc, #228]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e005      	b.n	8004e38 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004e2c:	4b37      	ldr	r3, [pc, #220]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e36:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e38:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e40:	4a32      	ldr	r2, [pc, #200]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e42:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <USB_HC_StartXfer+0x284>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d14e      	bne.n	8004efc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	78db      	ldrb	r3, [r3, #3]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d14a      	bne.n	8004efc <USB_HC_StartXfer+0x274>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d046      	beq.n	8004efc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	79db      	ldrb	r3, [r3, #7]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d830      	bhi.n	8004ed8 <USB_HC_StartXfer+0x250>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <USB_HC_StartXfer+0x1f4>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004eb1 	.word	0x08004eb1
 8004e84:	08004e8d 	.word	0x08004e8d
 8004e88:	08004eb1 	.word	0x08004eb1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	3303      	adds	r3, #3
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e96:	8afa      	ldrh	r2, [r7, #22]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d91c      	bls.n	8004edc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f043 0220 	orr.w	r2, r3, #32
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	619a      	str	r2, [r3, #24]
          }
          break;
 8004eae:	e015      	b.n	8004edc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	3303      	adds	r3, #3
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004eba:	8afa      	ldrh	r2, [r7, #22]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90a      	bls.n	8004ee0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	619a      	str	r2, [r3, #24]
          }
          break;
 8004ed6:	e003      	b.n	8004ee0 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004ed8:	bf00      	nop
 8004eda:	e002      	b.n	8004ee2 <USB_HC_StartXfer+0x25a>
          break;
 8004edc:	bf00      	nop
 8004ede:	e000      	b.n	8004ee2 <USB_HC_StartXfer+0x25a>
          break;
 8004ee0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	785a      	ldrb	r2, [r3, #1]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	b298      	uxth	r0, r3
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff fbc8 	bl	800468c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	1ff80000 	.word	0x1ff80000
 8004f0c:	200000b0 	.word	0x200000b0

08004f10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	b29b      	uxth	r3, r3
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b087      	sub	sp, #28
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	0c9b      	lsrs	r3, r3, #18
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <USB_HC_Halt+0x3a>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d16c      	bne.n	8005046 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f8a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d143      	bne.n	8005020 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ff6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005004:	d81d      	bhi.n	8005042 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501c:	d0ec      	beq.n	8004ff8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800501e:	e080      	b.n	8005122 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	440a      	add	r2, r1
 8005036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800503e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005040:	e06f      	b.n	8005122 <USB_HC_Halt+0x1f0>
          break;
 8005042:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005044:	e06d      	b.n	8005122 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	440a      	add	r2, r1
 800505c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005060:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005064:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d143      	bne.n	80050fe <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	440a      	add	r2, r1
 800508c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005094:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3301      	adds	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e2:	d81d      	bhi.n	8005120 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050fa:	d0ec      	beq.n	80050d6 <USB_HC_Halt+0x1a4>
 80050fc:	e011      	b.n	8005122 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	440a      	add	r2, r1
 8005114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e000      	b.n	8005122 <USB_HC_Halt+0x1f0>
          break;
 8005120:	bf00      	nop
    }
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005140:	78fb      	ldrb	r3, [r7, #3]
 8005142:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005144:	2301      	movs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	04da      	lsls	r2, r3, #19
 800514c:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <USB_DoPing+0x74>)
 800514e:	4013      	ands	r3, r2
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	440a      	add	r2, r1
 8005158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005160:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005178:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005180:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	461a      	mov	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	1ff80000 	.word	0x1ff80000

080051a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff f9e3 	bl	8004584 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80051be:	2110      	movs	r1, #16
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fa1b 	bl	80045fc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fa3e 	bl	8004648 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	e01f      	b.n	8005212 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	461a      	mov	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3301      	adds	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d9dc      	bls.n	80051d2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	e034      	b.n	8005288 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005234:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005244:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	461a      	mov	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3301      	adds	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005264:	d80c      	bhi.n	8005280 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527c:	d0ec      	beq.n	8005258 <USB_StopHost+0xb0>
 800527e:	e000      	b.n	8005282 <USB_StopHost+0xda>
        break;
 8005280:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3301      	adds	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0f      	cmp	r3, #15
 800528c:	d9c7      	bls.n	800521e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005294:	461a      	mov	r2, r3
 8005296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800529a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff f95c 	bl	8004562 <USB_EnableGlobalInt>

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af04      	add	r7, sp, #16
 80052ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80052bc:	2302      	movs	r3, #2
 80052be:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80052c0:	2301      	movs	r3, #1
 80052c2:	2202      	movs	r2, #2
 80052c4:	2102      	movs	r1, #2
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fc3a 	bl	8005b40 <USBH_FindInterface>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80052d0:	7bbb      	ldrb	r3, [r7, #14]
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	f000 812a 	beq.w	800552c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fc13 	bl	8005b08 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80052e8:	2050      	movs	r0, #80	; 0x50
 80052ea:	f001 fb09 	bl	8006900 <malloc>
 80052ee:	4603      	mov	r3, r0
 80052f0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	211a      	movs	r1, #26
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	4413      	add	r3, r2
 8005308:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b25b      	sxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	da15      	bge.n	8005340 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005314:	7bbb      	ldrb	r3, [r7, #14]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	211a      	movs	r1, #26
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	4413      	add	r3, r2
 8005320:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800532a:	7bbb      	ldrb	r3, [r7, #14]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	211a      	movs	r1, #26
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	4413      	add	r3, r2
 8005336:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 ff9f 	bl	800628a <USBH_AllocPipe>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	7819      	ldrb	r1, [r3, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	7858      	ldrb	r0, [r3, #1]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	8952      	ldrh	r2, [r2, #10]
 800536c:	9202      	str	r2, [sp, #8]
 800536e:	2203      	movs	r2, #3
 8005370:	9201      	str	r2, [sp, #4]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	4623      	mov	r3, r4
 8005376:	4602      	mov	r2, r0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 ff57 	bl	800622c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 fa14 	bl	80067b4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800538c:	2300      	movs	r3, #0
 800538e:	2200      	movs	r2, #0
 8005390:	210a      	movs	r1, #10
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fbd4 	bl	8005b40 <USBH_FindInterface>
 8005398:	4603      	mov	r3, r0
 800539a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2bff      	cmp	r3, #255	; 0xff
 80053a0:	f000 80c4 	beq.w	800552c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	211a      	movs	r1, #26
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da16      	bge.n	80053ea <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	211a      	movs	r1, #26
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	211a      	movs	r1, #26
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	835a      	strh	r2, [r3, #26]
 80053e8:	e015      	b.n	8005416 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	211a      	movs	r1, #26
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053fa:	781a      	ldrb	r2, [r3, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005400:	7bbb      	ldrb	r3, [r7, #14]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	211a      	movs	r1, #26
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005410:	881a      	ldrh	r2, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	211a      	movs	r1, #26
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b25b      	sxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	da16      	bge.n	800545c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	211a      	movs	r1, #26
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4413      	add	r3, r2
 800543a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	211a      	movs	r1, #26
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	4413      	add	r3, r2
 8005450:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005454:	881a      	ldrh	r2, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	835a      	strh	r2, [r3, #26]
 800545a:	e015      	b.n	8005488 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	211a      	movs	r1, #26
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	4413      	add	r3, r2
 8005468:	f203 3352 	addw	r3, r3, #850	; 0x352
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	211a      	movs	r1, #26
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005482:	881a      	ldrh	r2, [r3, #0]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	7b9b      	ldrb	r3, [r3, #14]
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fefb 	bl	800628a <USBH_AllocPipe>
 8005494:	4603      	mov	r3, r0
 8005496:	461a      	mov	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	7bdb      	ldrb	r3, [r3, #15]
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fef1 	bl	800628a <USBH_AllocPipe>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	7b59      	ldrb	r1, [r3, #13]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	7b98      	ldrb	r0, [r3, #14]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	8b12      	ldrh	r2, [r2, #24]
 80054c8:	9202      	str	r2, [sp, #8]
 80054ca:	2202      	movs	r2, #2
 80054cc:	9201      	str	r2, [sp, #4]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	4623      	mov	r3, r4
 80054d2:	4602      	mov	r2, r0
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fea9 	bl	800622c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	7b19      	ldrb	r1, [r3, #12]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	7bd8      	ldrb	r0, [r3, #15]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	8b52      	ldrh	r2, [r2, #26]
 80054f2:	9202      	str	r2, [sp, #8]
 80054f4:	2202      	movs	r2, #2
 80054f6:	9201      	str	r2, [sp, #4]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	4623      	mov	r3, r4
 80054fc:	4602      	mov	r2, r0
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fe94 	bl	800622c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	7b5b      	ldrb	r3, [r3, #13]
 8005510:	2200      	movs	r2, #0
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 f94d 	bl	80067b4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	7b1b      	ldrb	r3, [r3, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 f946 	bl	80067b4 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}

08005536 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fe87 	bl	800626a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 feaf 	bl	80062c6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	7b1b      	ldrb	r3, [r3, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	7b1b      	ldrb	r3, [r3, #12]
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fe74 	bl	800626a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	7b1b      	ldrb	r3, [r3, #12]
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fe9c 	bl	80062c6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	7b5b      	ldrb	r3, [r3, #13]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	7b5b      	ldrb	r3, [r3, #13]
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fe61 	bl	800626a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	7b5b      	ldrb	r3, [r3, #13]
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fe89 	bl	80062c6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 f99e 	bl	8006910 <free>
    phost->pActiveClass->pData = 0U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055da:	2200      	movs	r2, #0
 80055dc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80055f0:	2302      	movs	r3, #2
 80055f2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3340      	adds	r3, #64	; 0x40
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8b2 	bl	800576e <GetLineCoding>
 800560a:	4603      	mov	r3, r0
 800560c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800561a:	2102      	movs	r1, #2
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
  }
  return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800564c:	2b04      	cmp	r3, #4
 800564e:	d877      	bhi.n	8005740 <USBH_CDC_Process+0x114>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <USBH_CDC_Process+0x2c>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800566d 	.word	0x0800566d
 800565c:	08005673 	.word	0x08005673
 8005660:	080056a3 	.word	0x080056a3
 8005664:	08005717 	.word	0x08005717
 8005668:	08005725 	.word	0x08005725
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
    break;
 8005670:	e06d      	b.n	800574e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005676:	4619      	mov	r1, r3
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f897 	bl	80057ac <SetLineCoding>
 800567e:	4603      	mov	r3, r0
 8005680:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005690:	e058      	b.n	8005744 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d055      	beq.n	8005744 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2204      	movs	r2, #4
 800569c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80056a0:	e050      	b.n	8005744 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3340      	adds	r3, #64	; 0x40
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f860 	bl	800576e <GetLineCoding>
 80056ae:	4603      	mov	r3, r0
 80056b0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80056b2:	7bbb      	ldrb	r3, [r7, #14]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d126      	bne.n	8005706 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ca:	791b      	ldrb	r3, [r3, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d13b      	bne.n	8005748 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056dc:	429a      	cmp	r2, r3
 80056de:	d133      	bne.n	8005748 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ea:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d12b      	bne.n	8005748 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d124      	bne.n	8005748 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f95a 	bl	80059b8 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005704:	e020      	b.n	8005748 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005706:	7bbb      	ldrb	r3, [r7, #14]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d01d      	beq.n	8005748 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2204      	movs	r2, #4
 8005710:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005714:	e018      	b.n	8005748 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f867 	bl	80057ea <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f8dc 	bl	80058da <CDC_ProcessReception>
    break;
 8005722:	e014      	b.n	800574e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005724:	2100      	movs	r1, #0
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb08 	bl	8005d3c <USBH_ClrFeature>
 800572c:	4603      	mov	r3, r0
 800572e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005730:	7bbb      	ldrb	r3, [r7, #14]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800573e:	e005      	b.n	800574c <USBH_CDC_Process+0x120>

  default:
    break;
 8005740:	bf00      	nop
 8005742:	e004      	b.n	800574e <USBH_CDC_Process+0x122>
    break;
 8005744:	bf00      	nop
 8005746:	e002      	b.n	800574e <USBH_CDC_Process+0x122>
    break;
 8005748:	bf00      	nop
 800574a:	e000      	b.n	800574e <USBH_CDC_Process+0x122>
    break;
 800574c:	bf00      	nop

  }

  return status;
 800574e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	22a1      	movs	r2, #161	; 0xa1
 800577c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2221      	movs	r2, #33	; 0x21
 8005782:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2207      	movs	r2, #7
 8005794:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2207      	movs	r2, #7
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 faf1 	bl	8005d84 <USBH_CtlReq>
 80057a2:	4603      	mov	r3, r0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2221      	movs	r2, #33	; 0x21
 80057ba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2207      	movs	r2, #7
 80057d2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2207      	movs	r2, #7
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fad2 	bl	8005d84 <USBH_CtlReq>
 80057e0:	4603      	mov	r3, r0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af02      	add	r7, sp, #8
 80057f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005806:	2b01      	cmp	r3, #1
 8005808:	d002      	beq.n	8005810 <CDC_ProcessTransmission+0x26>
 800580a:	2b02      	cmp	r3, #2
 800580c:	d025      	beq.n	800585a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800580e:	e060      	b.n	80058d2 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	8b12      	ldrh	r2, [r2, #24]
 8005818:	4293      	cmp	r3, r2
 800581a:	d90c      	bls.n	8005836 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	69d9      	ldr	r1, [r3, #28]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8b1a      	ldrh	r2, [r3, #24]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	7b58      	ldrb	r0, [r3, #13]
 8005828:	2301      	movs	r3, #1
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	4603      	mov	r3, r0
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fcb9 	bl	80061a6 <USBH_BulkSendData>
 8005834:	e00c      	b.n	8005850 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	7b58      	ldrb	r0, [r3, #13]
 8005844:	2301      	movs	r3, #1
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	4603      	mov	r3, r0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fcab 	bl	80061a6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005858:	e03b      	b.n	80058d2 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	7b5b      	ldrb	r3, [r3, #13]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 ff7d 	bl	8006760 <USBH_LL_GetURBState>
 8005866:	4603      	mov	r3, r0
 8005868:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800586a:	7afb      	ldrb	r3, [r7, #11]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d128      	bne.n	80058c2 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	8b12      	ldrh	r2, [r2, #24]
 8005878:	4293      	cmp	r3, r2
 800587a:	d90e      	bls.n	800589a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	8b12      	ldrh	r2, [r2, #24]
 8005884:	1a9a      	subs	r2, r3, r2
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	8b12      	ldrh	r2, [r2, #24]
 8005892:	441a      	add	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	61da      	str	r2, [r3, #28]
 8005898:	e002      	b.n	80058a0 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058b0:	e00e      	b.n	80058d0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f868 	bl	8005990 <USBH_CDC_TransmitCallback>
    break;
 80058c0:	e006      	b.n	80058d0 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d103      	bne.n	80058d0 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058d0:	bf00      	nop
  }
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b086      	sub	sp, #24
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d002      	beq.n	8005900 <CDC_ProcessReception+0x26>
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d00e      	beq.n	800591c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80058fe:	e043      	b.n	8005988 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	6a19      	ldr	r1, [r3, #32]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	8b5a      	ldrh	r2, [r3, #26]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	7b1b      	ldrb	r3, [r3, #12]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fc6f 	bl	80061f0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2204      	movs	r2, #4
 8005916:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800591a:	e035      	b.n	8005988 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	7b1b      	ldrb	r3, [r3, #12]
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ff1c 	bl	8006760 <USBH_LL_GetURBState>
 8005928:	4603      	mov	r3, r0
 800592a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800592c:	7cfb      	ldrb	r3, [r7, #19]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d129      	bne.n	8005986 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	7b1b      	ldrb	r3, [r3, #12]
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fe7f 	bl	800663c <USBH_LL_GetLastXferSize>
 800593e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	429a      	cmp	r2, r3
 8005948:	d016      	beq.n	8005978 <CDC_ProcessReception+0x9e>
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	8b5b      	ldrh	r3, [r3, #26]
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4293      	cmp	r3, r2
 8005954:	d910      	bls.n	8005978 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad2      	subs	r2, r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	441a      	add	r2, r3
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2203      	movs	r2, #3
 8005972:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005976:	e006      	b.n	8005986 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f80f 	bl	80059a4 <USBH_CDC_ReceiveCallback>
    break;
 8005986:	bf00      	nop
  }
}
 8005988:	bf00      	nop
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80059e0:	2302      	movs	r3, #2
 80059e2:	e019      	b.n	8005a18 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	79fa      	ldrb	r2, [r7, #7]
 80059e8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f80f 	bl	8005a20 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fda1 	bl	8006558 <USBH_LL_Init>

  return USBH_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a2c:	e008      	b.n	8005a40 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	32e0      	adds	r2, #224	; 0xe0
 8005a34:	2100      	movs	r1, #0
 8005a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b0e      	cmp	r3, #14
 8005a44:	d9f3      	bls.n	8005a2e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e009      	b.n	8005a60 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a66:	d3f1      	bcc.n	8005a4c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2240      	movs	r2, #64	; 0x40
 8005a8c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d017      	beq.n	8005af6 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10f      	bne.n	8005af0 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	33dc      	adds	r3, #220	; 0xdc
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
 8005aee:	e004      	b.n	8005afa <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005af0:	2302      	movs	r3, #2
 8005af2:	73fb      	strb	r3, [r7, #15]
 8005af4:	e001      	b.n	8005afa <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005af6:	2302      	movs	r3, #2
 8005af8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d204      	bcs.n	8005b2e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005b2c:	e001      	b.n	8005b32 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	70fb      	strb	r3, [r7, #3]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70bb      	strb	r3, [r7, #2]
 8005b56:	4613      	mov	r3, r2
 8005b58:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005b68:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b6a:	e025      	b.n	8005bb8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	221a      	movs	r2, #26
 8005b70:	fb02 f303 	mul.w	r3, r2, r3
 8005b74:	3308      	adds	r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	3302      	adds	r3, #2
 8005b7c:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	795b      	ldrb	r3, [r3, #5]
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d002      	beq.n	8005b8e <USBH_FindInterface+0x4e>
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	2bff      	cmp	r3, #255	; 0xff
 8005b8c:	d111      	bne.n	8005bb2 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b92:	78ba      	ldrb	r2, [r7, #2]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d002      	beq.n	8005b9e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b98:	78bb      	ldrb	r3, [r7, #2]
 8005b9a:	2bff      	cmp	r3, #255	; 0xff
 8005b9c:	d109      	bne.n	8005bb2 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005ba2:	787a      	ldrb	r2, [r7, #1]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d002      	beq.n	8005bae <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ba8:	787b      	ldrb	r3, [r7, #1]
 8005baa:	2bff      	cmp	r3, #255	; 0xff
 8005bac:	d101      	bne.n	8005bb2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	e006      	b.n	8005bc0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d9d6      	bls.n	8005b6c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005bbe:	23ff      	movs	r3, #255	; 0xff
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fcfb 	bl	80065d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005bda:	2101      	movs	r1, #1
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fdd2 	bl	8006786 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f804 	bl	8005c2e <USBH_HandleSof>
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b0b      	cmp	r3, #11
 8005c3e:	d10a      	bne.n	8005c56 <USBH_HandleSof+0x28>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005c6e:	bf00      	nop
}
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005c8a:	bf00      	nop
}
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10f      	bne.n	8005cc8 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00e      	beq.n	8005cd8 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cc0:	2104      	movs	r1, #4
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4798      	blx	r3
 8005cc6:	e007      	b.n	8005cd8 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d102      	bne.n	8005cd8 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fc8b 	bl	8006606 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fae5 	bl	80062c6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	795b      	ldrb	r3, [r3, #5]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fadf 	bl	80062c6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d20:	2105      	movs	r1, #5
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fc52 	bl	80065d0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2203      	movs	r2, #3
 8005d30:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	789b      	ldrb	r3, [r3, #2]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10f      	bne.n	8005d70 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005d70:	2200      	movs	r2, #0
 8005d72:	2100      	movs	r1, #0
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f805 	bl	8005d84 <USBH_CtlReq>
 8005d7a:	4603      	mov	r3, r0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005d92:	2301      	movs	r3, #1
 8005d94:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	789b      	ldrb	r3, [r3, #2]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d002      	beq.n	8005da4 <USBH_CtlReq+0x20>
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d00f      	beq.n	8005dc2 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005da2:	e034      	b.n	8005e0e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	88fa      	ldrh	r2, [r7, #6]
 8005dae:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2202      	movs	r2, #2
 8005dba:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
    break;
 8005dc0:	e025      	b.n	8005e0e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f828 	bl	8005e18 <USBH_HandleControl>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d108      	bne.n	8005de4 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]
    break;
 8005de2:	e013      	b.n	8005e0c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d108      	bne.n	8005dfc <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005df6:	2303      	movs	r3, #3
 8005df8:	75fb      	strb	r3, [r7, #23]
    break;
 8005dfa:	e007      	b.n	8005e0c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d104      	bne.n	8005e0c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	75fb      	strb	r3, [r7, #23]
    break;
 8005e0c:	bf00      	nop
  }
  return status;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7e1b      	ldrb	r3, [r3, #24]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	2b0a      	cmp	r3, #10
 8005e30:	f200 814c 	bhi.w	80060cc <USBH_HandleControl+0x2b4>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <USBH_HandleControl+0x24>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	08005e83 	.word	0x08005e83
 8005e44:	08005eed 	.word	0x08005eed
 8005e48:	08005f13 	.word	0x08005f13
 8005e4c:	08005f4b 	.word	0x08005f4b
 8005e50:	08005f77 	.word	0x08005f77
 8005e54:	08005fc9 	.word	0x08005fc9
 8005e58:	08005feb 	.word	0x08005feb
 8005e5c:	08006027 	.word	0x08006027
 8005e60:	0800604f 	.word	0x0800604f
 8005e64:	0800608d 	.word	0x0800608d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f103 0110 	add.w	r1, r3, #16
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	795b      	ldrb	r3, [r3, #5]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f939 	bl	80060ec <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	761a      	strb	r2, [r3, #24]
    break;
 8005e80:	e12f      	b.n	80060e2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	795b      	ldrb	r3, [r3, #5]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fc69 	bl	8006760 <USBH_LL_GetURBState>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d11e      	bne.n	8005ed6 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7c1b      	ldrb	r3, [r3, #16]
 8005e9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ea0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8adb      	ldrh	r3, [r3, #22]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8005eaa:	7b7b      	ldrb	r3, [r7, #13]
 8005eac:	2b80      	cmp	r3, #128	; 0x80
 8005eae:	d103      	bne.n	8005eb8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005eb6:	e10b      	b.n	80060d0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2205      	movs	r2, #5
 8005ebc:	761a      	strb	r2, [r3, #24]
    break;
 8005ebe:	e107      	b.n	80060d0 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8005ec0:	7b7b      	ldrb	r3, [r7, #13]
 8005ec2:	2b80      	cmp	r3, #128	; 0x80
 8005ec4:	d103      	bne.n	8005ece <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2209      	movs	r2, #9
 8005eca:	761a      	strb	r2, [r3, #24]
    break;
 8005ecc:	e100      	b.n	80060d0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	761a      	strb	r2, [r3, #24]
    break;
 8005ed4:	e0fc      	b.n	80060d0 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d003      	beq.n	8005ee4 <USBH_HandleControl+0xcc>
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	f040 80f6 	bne.w	80060d0 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	220b      	movs	r2, #11
 8005ee8:	761a      	strb	r2, [r3, #24]
    break;
 8005eea:	e0f1      	b.n	80060d0 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6899      	ldr	r1, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	899a      	ldrh	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	791b      	ldrb	r3, [r3, #4]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f930 	bl	800616a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	761a      	strb	r2, [r3, #24]
    break;
 8005f10:	e0e7      	b.n	80060e2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	791b      	ldrb	r3, [r3, #4]
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc21 	bl	8006760 <USBH_LL_GetURBState>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d102      	bne.n	8005f2e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2209      	movs	r2, #9
 8005f2c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005f2e:	7bbb      	ldrb	r3, [r7, #14]
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	d102      	bne.n	8005f3a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005f34:	2303      	movs	r3, #3
 8005f36:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f38:	e0cc      	b.n	80060d4 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	f040 80c9 	bne.w	80060d4 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	220b      	movs	r2, #11
 8005f46:	761a      	strb	r2, [r3, #24]
    break;
 8005f48:	e0c4      	b.n	80060d4 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6899      	ldr	r1, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	899a      	ldrh	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	7958      	ldrb	r0, [r3, #5]
 8005f56:	2301      	movs	r3, #1
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8df 	bl	8006120 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2206      	movs	r2, #6
 8005f72:	761a      	strb	r2, [r3, #24]
    break;
 8005f74:	e0b5      	b.n	80060e2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	795b      	ldrb	r3, [r3, #5]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fbef 	bl	8006760 <USBH_LL_GetURBState>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d103      	bne.n	8005f94 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2207      	movs	r2, #7
 8005f90:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f92:	e0a1      	b.n	80060d8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d105      	bne.n	8005fa6 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	220c      	movs	r2, #12
 8005f9e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8005fa4:	e098      	b.n	80060d8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d103      	bne.n	8005fb4 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2205      	movs	r2, #5
 8005fb0:	761a      	strb	r2, [r3, #24]
    break;
 8005fb2:	e091      	b.n	80060d8 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	f040 808e 	bne.w	80060d8 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	220b      	movs	r2, #11
 8005fc0:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8005fc6:	e087      	b.n	80060d8 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f8ca 	bl	800616a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2208      	movs	r2, #8
 8005fe6:	761a      	strb	r2, [r3, #24]

    break;
 8005fe8:	e07b      	b.n	80060e2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	791b      	ldrb	r3, [r3, #4]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fbb5 	bl	8006760 <USBH_LL_GetURBState>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	220d      	movs	r2, #13
 8006004:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800600a:	e067      	b.n	80060dc <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800600c:	7bbb      	ldrb	r3, [r7, #14]
 800600e:	2b04      	cmp	r3, #4
 8006010:	d103      	bne.n	800601a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	220b      	movs	r2, #11
 8006016:	761a      	strb	r2, [r3, #24]
    break;
 8006018:	e060      	b.n	80060dc <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800601a:	7bbb      	ldrb	r3, [r7, #14]
 800601c:	2b05      	cmp	r3, #5
 800601e:	d15d      	bne.n	80060dc <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006020:	2303      	movs	r3, #3
 8006022:	73fb      	strb	r3, [r7, #15]
    break;
 8006024:	e05a      	b.n	80060dc <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	795a      	ldrb	r2, [r3, #5]
 800602a:	2301      	movs	r3, #1
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	4613      	mov	r3, r2
 8006030:	2200      	movs	r2, #0
 8006032:	2100      	movs	r1, #0
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f873 	bl	8006120 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006040:	b29a      	uxth	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	220a      	movs	r2, #10
 800604a:	761a      	strb	r2, [r3, #24]
    break;
 800604c:	e049      	b.n	80060e2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	795b      	ldrb	r3, [r3, #5]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fb83 	bl	8006760 <USBH_LL_GetURBState>
 800605a:	4603      	mov	r3, r0
 800605c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d105      	bne.n	8006070 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	220d      	movs	r2, #13
 800606c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800606e:	e037      	b.n	80060e0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d103      	bne.n	800607e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2209      	movs	r2, #9
 800607a:	761a      	strb	r2, [r3, #24]
    break;
 800607c:	e030      	b.n	80060e0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d12d      	bne.n	80060e0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	220b      	movs	r2, #11
 8006088:	761a      	strb	r2, [r3, #24]
    break;
 800608a:	e029      	b.n	80060e0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7e5b      	ldrb	r3, [r3, #25]
 8006090:	3301      	adds	r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	765a      	strb	r2, [r3, #25]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7e5b      	ldrb	r3, [r3, #25]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d809      	bhi.n	80060b4 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fab0 	bl	8006606 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80060b2:	e016      	b.n	80060e2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060ba:	2106      	movs	r1, #6
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80060c6:	2302      	movs	r3, #2
 80060c8:	73fb      	strb	r3, [r7, #15]
    break;
 80060ca:	e00a      	b.n	80060e2 <USBH_HandleControl+0x2ca>

  default:
    break;
 80060cc:	bf00      	nop
 80060ce:	e008      	b.n	80060e2 <USBH_HandleControl+0x2ca>
    break;
 80060d0:	bf00      	nop
 80060d2:	e006      	b.n	80060e2 <USBH_HandleControl+0x2ca>
    break;
 80060d4:	bf00      	nop
 80060d6:	e004      	b.n	80060e2 <USBH_HandleControl+0x2ca>
    break;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <USBH_HandleControl+0x2ca>
    break;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <USBH_HandleControl+0x2ca>
    break;
 80060e0:	bf00      	nop
  }
  return status;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af04      	add	r7, sp, #16
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80060fa:	79f9      	ldrb	r1, [r7, #7]
 80060fc:	2300      	movs	r3, #0
 80060fe:	9303      	str	r3, [sp, #12]
 8006100:	2308      	movs	r3, #8
 8006102:	9302      	str	r3, [sp, #8]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	2300      	movs	r3, #0
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	2200      	movs	r2, #0
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 faf4 	bl	80066fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af04      	add	r7, sp, #16
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4611      	mov	r1, r2
 800612c:	461a      	mov	r2, r3
 800612e:	460b      	mov	r3, r1
 8006130:	80fb      	strh	r3, [r7, #6]
 8006132:	4613      	mov	r3, r2
 8006134:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006144:	7979      	ldrb	r1, [r7, #5]
 8006146:	7e3b      	ldrb	r3, [r7, #24]
 8006148:	9303      	str	r3, [sp, #12]
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	9302      	str	r3, [sp, #8]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	2301      	movs	r3, #1
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	2200      	movs	r2, #0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 facf 	bl	80066fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b088      	sub	sp, #32
 800616e:	af04      	add	r7, sp, #16
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	4611      	mov	r1, r2
 8006176:	461a      	mov	r2, r3
 8006178:	460b      	mov	r3, r1
 800617a:	80fb      	strh	r3, [r7, #6]
 800617c:	4613      	mov	r3, r2
 800617e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006180:	7979      	ldrb	r1, [r7, #5]
 8006182:	2300      	movs	r3, #0
 8006184:	9303      	str	r3, [sp, #12]
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	2301      	movs	r3, #1
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	2201      	movs	r2, #1
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fab1 	bl	80066fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800619c:	2300      	movs	r3, #0

}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b088      	sub	sp, #32
 80061aa:	af04      	add	r7, sp, #16
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	4611      	mov	r1, r2
 80061b2:	461a      	mov	r2, r3
 80061b4:	460b      	mov	r3, r1
 80061b6:	80fb      	strh	r3, [r7, #6]
 80061b8:	4613      	mov	r3, r2
 80061ba:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80061ca:	7979      	ldrb	r1, [r7, #5]
 80061cc:	7e3b      	ldrb	r3, [r7, #24]
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	9302      	str	r3, [sp, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	2301      	movs	r3, #1
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2302      	movs	r3, #2
 80061de:	2200      	movs	r2, #0
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fa8c 	bl	80066fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4611      	mov	r1, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	460b      	mov	r3, r1
 8006200:	80fb      	strh	r3, [r7, #6]
 8006202:	4613      	mov	r3, r2
 8006204:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006206:	7979      	ldrb	r1, [r7, #5]
 8006208:	2300      	movs	r3, #0
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	9302      	str	r3, [sp, #8]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	2301      	movs	r3, #1
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	2302      	movs	r3, #2
 800621a:	2201      	movs	r2, #1
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fa6e 	bl	80066fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af04      	add	r7, sp, #16
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	4608      	mov	r0, r1
 8006236:	4611      	mov	r1, r2
 8006238:	461a      	mov	r2, r3
 800623a:	4603      	mov	r3, r0
 800623c:	70fb      	strb	r3, [r7, #3]
 800623e:	460b      	mov	r3, r1
 8006240:	70bb      	strb	r3, [r7, #2]
 8006242:	4613      	mov	r3, r2
 8006244:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006246:	7878      	ldrb	r0, [r7, #1]
 8006248:	78ba      	ldrb	r2, [r7, #2]
 800624a:	78f9      	ldrb	r1, [r7, #3]
 800624c:	8b3b      	ldrh	r3, [r7, #24]
 800624e:	9302      	str	r3, [sp, #8]
 8006250:	7d3b      	ldrb	r3, [r7, #20]
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	7c3b      	ldrb	r3, [r7, #16]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	4603      	mov	r3, r0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa01 	bl	8006662 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006260:	2300      	movs	r3, #0

}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa20 	bl	80066c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006280:	2300      	movs	r3, #0

}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f831 	bl	80062fe <USBH_GetFreePipe>
 800629c:	4603      	mov	r3, r0
 800629e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d007      	beq.n	80062ba <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	89fa      	ldrh	r2, [r7, #14]
 80062ae:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	32e0      	adds	r2, #224	; 0xe0
 80062b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80062ba:	89fb      	ldrh	r3, [r7, #14]
 80062bc:	b2db      	uxtb	r3, r3
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	2b0a      	cmp	r3, #10
 80062d6:	d80b      	bhi.n	80062f0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32e0      	adds	r2, #224	; 0xe0
 80062de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	32e0      	adds	r2, #224	; 0xe0
 80062ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80062fe:	b480      	push	{r7}
 8006300:	b085      	sub	sp, #20
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
 800630e:	e00e      	b.n	800632e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006310:	7bfa      	ldrb	r2, [r7, #15]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	32e0      	adds	r2, #224	; 0xe0
 8006316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	b29b      	uxth	r3, r3
 8006326:	e007      	b.n	8006338 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	3301      	adds	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b0a      	cmp	r3, #10
 8006332:	d9ed      	bls.n	8006310 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006334:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006348:	2201      	movs	r2, #1
 800634a:	490e      	ldr	r1, [pc, #56]	; (8006384 <MX_USB_HOST_Init+0x40>)
 800634c:	480e      	ldr	r0, [pc, #56]	; (8006388 <MX_USB_HOST_Init+0x44>)
 800634e:	f7ff fb3d 	bl	80059cc <USBH_Init>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006358:	f7fa fb0c 	bl	8000974 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800635c:	490b      	ldr	r1, [pc, #44]	; (800638c <MX_USB_HOST_Init+0x48>)
 800635e:	480a      	ldr	r0, [pc, #40]	; (8006388 <MX_USB_HOST_Init+0x44>)
 8006360:	f7ff fba7 	bl	8005ab2 <USBH_RegisterClass>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800636a:	f7fa fb03 	bl	8000974 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800636e:	4806      	ldr	r0, [pc, #24]	; (8006388 <MX_USB_HOST_Init+0x44>)
 8006370:	f7ff fc2c 	bl	8005bcc <USBH_Start>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800637a:	f7fa fafb 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	08006391 	.word	0x08006391
 8006388:	20000200 	.word	0x20000200
 800638c:	2000000c 	.word	0x2000000c

08006390 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	3b01      	subs	r3, #1
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d819      	bhi.n	80063d8 <USBH_UserProcess+0x48>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <USBH_UserProcess+0x1c>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063d9 	.word	0x080063d9
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063d1 	.word	0x080063d1
 80063bc:	080063c1 	.word	0x080063c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80063c0:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <USBH_UserProcess+0x58>)
 80063c2:	2203      	movs	r2, #3
 80063c4:	701a      	strb	r2, [r3, #0]
  break;
 80063c6:	e008      	b.n	80063da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80063c8:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <USBH_UserProcess+0x58>)
 80063ca:	2202      	movs	r2, #2
 80063cc:	701a      	strb	r2, [r3, #0]
  break;
 80063ce:	e004      	b.n	80063da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80063d0:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <USBH_UserProcess+0x58>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
  break;
 80063d6:	e000      	b.n	80063da <USBH_UserProcess+0x4a>

  default:
  break;
 80063d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	200000b4 	.word	0x200000b4

080063ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800640c:	d147      	bne.n	800649e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	4a24      	ldr	r2, [pc, #144]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	6313      	str	r3, [r2, #48]	; 0x30
 800641e:	4b22      	ldr	r3, [pc, #136]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800642a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006430:	2300      	movs	r3, #0
 8006432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006438:	f107 0314 	add.w	r3, r7, #20
 800643c:	4619      	mov	r1, r3
 800643e:	481b      	ldr	r0, [pc, #108]	; (80064ac <HAL_HCD_MspInit+0xc0>)
 8006440:	f7fa fe70 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006444:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800644a:	2302      	movs	r3, #2
 800644c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006452:	2303      	movs	r3, #3
 8006454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006456:	230a      	movs	r3, #10
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	4619      	mov	r1, r3
 8006460:	4812      	ldr	r0, [pc, #72]	; (80064ac <HAL_HCD_MspInit+0xc0>)
 8006462:	f7fa fe5f 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	4a0f      	ldr	r2, [pc, #60]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 800646c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006470:	6353      	str	r3, [r2, #52]	; 0x34
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 8006478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647a:	4a0b      	ldr	r2, [pc, #44]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 800647c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006480:	6453      	str	r3, [r2, #68]	; 0x44
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <HAL_HCD_MspInit+0xbc>)
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800648e:	2200      	movs	r2, #0
 8006490:	2100      	movs	r1, #0
 8006492:	2043      	movs	r0, #67	; 0x43
 8006494:	f7fa fe0f 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006498:	2043      	movs	r0, #67	; 0x43
 800649a:	f7fa fe28 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800649e:	bf00      	nop
 80064a0:	3728      	adds	r7, #40	; 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40020000 	.word	0x40020000

080064b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fba3 	bl	8005c0a <USBH_LL_IncTimer>
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fbdb 	bl	8005c96 <USBH_LL_Connect>
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fbf3 	bl	8005ce2 <USBH_LL_Disconnect>
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
 8006510:	4613      	mov	r3, r2
 8006512:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fb95 	bl	8005c5e <USBH_LL_PortEnabled>
} 
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fb95 	bl	8005c7a <USBH_LL_PortDisabled>
} 
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d12a      	bne.n	80065c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800656a:	4a18      	ldr	r2, [pc, #96]	; (80065cc <USBH_LL_Init+0x74>)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a15      	ldr	r2, [pc, #84]	; (80065cc <USBH_LL_Init+0x74>)
 8006576:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800657a:	4b14      	ldr	r3, [pc, #80]	; (80065cc <USBH_LL_Init+0x74>)
 800657c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006580:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <USBH_LL_Init+0x74>)
 8006584:	2208      	movs	r2, #8
 8006586:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006588:	4b10      	ldr	r3, [pc, #64]	; (80065cc <USBH_LL_Init+0x74>)
 800658a:	2201      	movs	r2, #1
 800658c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <USBH_LL_Init+0x74>)
 8006590:	2200      	movs	r2, #0
 8006592:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <USBH_LL_Init+0x74>)
 8006596:	2202      	movs	r2, #2
 8006598:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <USBH_LL_Init+0x74>)
 800659c:	2200      	movs	r2, #0
 800659e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80065a0:	480a      	ldr	r0, [pc, #40]	; (80065cc <USBH_LL_Init+0x74>)
 80065a2:	f7fa ff5a 	bl	800145a <HAL_HCD_Init>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80065ac:	f7fa f9e2 	bl	8000974 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80065b0:	4806      	ldr	r0, [pc, #24]	; (80065cc <USBH_LL_Init+0x74>)
 80065b2:	f7fb fb47 	bl	8001c44 <HAL_HCD_GetCurrentFrame>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fb16 	bl	8005bec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	200005cc 	.word	0x200005cc

080065d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fb fac2 	bl	8001b70 <HAL_HCD_Start>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f912 	bl	800681c <USBH_Get_USB_Status>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800661c:	4618      	mov	r0, r3
 800661e:	f7fb faca 	bl	8001bb6 <HAL_HCD_Stop>
 8006622:	4603      	mov	r3, r0
 8006624:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 f8f7 	bl	800681c <USBH_Get_USB_Status>
 800662e:	4603      	mov	r3, r0
 8006630:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006632:	7bbb      	ldrb	r3, [r7, #14]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f7fb fae1 	bl	8001c1a <HAL_HCD_HC_GetXferCount>
 8006658:	4603      	mov	r3, r0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006662:	b590      	push	{r4, r7, lr}
 8006664:	b089      	sub	sp, #36	; 0x24
 8006666:	af04      	add	r7, sp, #16
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	4608      	mov	r0, r1
 800666c:	4611      	mov	r1, r2
 800666e:	461a      	mov	r2, r3
 8006670:	4603      	mov	r3, r0
 8006672:	70fb      	strb	r3, [r7, #3]
 8006674:	460b      	mov	r3, r1
 8006676:	70bb      	strb	r3, [r7, #2]
 8006678:	4613      	mov	r3, r2
 800667a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800668a:	787c      	ldrb	r4, [r7, #1]
 800668c:	78ba      	ldrb	r2, [r7, #2]
 800668e:	78f9      	ldrb	r1, [r7, #3]
 8006690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006692:	9302      	str	r3, [sp, #8]
 8006694:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4623      	mov	r3, r4
 80066a2:	f7fa ff3c 	bl	800151e <HAL_HCD_HC_Init>
 80066a6:	4603      	mov	r3, r0
 80066a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 f8b5 	bl	800681c <USBH_Get_USB_Status>
 80066b2:	4603      	mov	r3, r0
 80066b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd90      	pop	{r4, r7, pc}

080066c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066da:	78fa      	ldrb	r2, [r7, #3]
 80066dc:	4611      	mov	r1, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fa ffb5 	bl	800164e <HAL_HCD_HC_Halt>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f896 	bl	800681c <USBH_Get_USB_Status>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80066fe:	b590      	push	{r4, r7, lr}
 8006700:	b089      	sub	sp, #36	; 0x24
 8006702:	af04      	add	r7, sp, #16
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	4608      	mov	r0, r1
 8006708:	4611      	mov	r1, r2
 800670a:	461a      	mov	r2, r3
 800670c:	4603      	mov	r3, r0
 800670e:	70fb      	strb	r3, [r7, #3]
 8006710:	460b      	mov	r3, r1
 8006712:	70bb      	strb	r3, [r7, #2]
 8006714:	4613      	mov	r3, r2
 8006716:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006726:	787c      	ldrb	r4, [r7, #1]
 8006728:	78ba      	ldrb	r2, [r7, #2]
 800672a:	78f9      	ldrb	r1, [r7, #3]
 800672c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006730:	9303      	str	r3, [sp, #12]
 8006732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006734:	9302      	str	r3, [sp, #8]
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4623      	mov	r3, r4
 8006742:	f7fa ffa7 	bl	8001694 <HAL_HCD_HC_SubmitRequest>
 8006746:	4603      	mov	r3, r0
 8006748:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f865 	bl	800681c <USBH_Get_USB_Status>
 8006752:	4603      	mov	r3, r0
 8006754:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006756:	7bbb      	ldrb	r3, [r7, #14]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	bd90      	pop	{r4, r7, pc}

08006760 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f7fb fa3a 	bl	8001bf0 <HAL_HCD_HC_GetURBState>
 800677c:	4603      	mov	r3, r0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d103      	bne.n	80067a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 f868 	bl	8006874 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80067a4:	20c8      	movs	r0, #200	; 0xc8
 80067a6:	f7fa fb89 	bl	8000ebc <HAL_Delay>
  return USBH_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
 80067c0:	4613      	mov	r3, r2
 80067c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80067cc:	78fa      	ldrb	r2, [r7, #3]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	440b      	add	r3, r1
 80067da:	333b      	adds	r3, #59	; 0x3b
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80067e2:	78fa      	ldrb	r2, [r7, #3]
 80067e4:	68f9      	ldr	r1, [r7, #12]
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	440b      	add	r3, r1
 80067f0:	3350      	adds	r3, #80	; 0x50
 80067f2:	78ba      	ldrb	r2, [r7, #2]
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	e009      	b.n	800680c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	440b      	add	r3, r1
 8006806:	3351      	adds	r3, #81	; 0x51
 8006808:	78ba      	ldrb	r2, [r7, #2]
 800680a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
	...

0800681c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d817      	bhi.n	8006860 <USBH_Get_USB_Status+0x44>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <USBH_Get_USB_Status+0x1c>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006849 	.word	0x08006849
 800683c:	0800684f 	.word	0x0800684f
 8006840:	08006855 	.word	0x08006855
 8006844:	0800685b 	.word	0x0800685b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
    break;
 800684c:	e00b      	b.n	8006866 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800684e:	2302      	movs	r3, #2
 8006850:	73fb      	strb	r3, [r7, #15]
    break;
 8006852:	e008      	b.n	8006866 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
    break;
 8006858:	e005      	b.n	8006866 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800685a:	2302      	movs	r3, #2
 800685c:	73fb      	strb	r3, [r7, #15]
    break;
 800685e:	e002      	b.n	8006866 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006860:	2302      	movs	r3, #2
 8006862:	73fb      	strb	r3, [r7, #15]
    break;
 8006864:	bf00      	nop
  }
  return usb_status;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
 800688c:	e001      	b.n	8006892 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	461a      	mov	r2, r3
 8006896:	2101      	movs	r1, #1
 8006898:	4803      	ldr	r0, [pc, #12]	; (80068a8 <MX_DriverVbusFS+0x34>)
 800689a:	f7fa fdc5 	bl	8001428 <HAL_GPIO_WritePin>
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40020800 	.word	0x40020800

080068ac <__errno>:
 80068ac:	4b01      	ldr	r3, [pc, #4]	; (80068b4 <__errno+0x8>)
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000002c 	.word	0x2000002c

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	4e0d      	ldr	r6, [pc, #52]	; (80068f0 <__libc_init_array+0x38>)
 80068bc:	4c0d      	ldr	r4, [pc, #52]	; (80068f4 <__libc_init_array+0x3c>)
 80068be:	1ba4      	subs	r4, r4, r6
 80068c0:	10a4      	asrs	r4, r4, #2
 80068c2:	2500      	movs	r5, #0
 80068c4:	42a5      	cmp	r5, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	4e0b      	ldr	r6, [pc, #44]	; (80068f8 <__libc_init_array+0x40>)
 80068ca:	4c0c      	ldr	r4, [pc, #48]	; (80068fc <__libc_init_array+0x44>)
 80068cc:	f000 f8ea 	bl	8006aa4 <_init>
 80068d0:	1ba4      	subs	r4, r4, r6
 80068d2:	10a4      	asrs	r4, r4, #2
 80068d4:	2500      	movs	r5, #0
 80068d6:	42a5      	cmp	r5, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068e0:	4798      	blx	r3
 80068e2:	3501      	adds	r5, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ea:	4798      	blx	r3
 80068ec:	3501      	adds	r5, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	08006ae0 	.word	0x08006ae0
 80068f4:	08006ae0 	.word	0x08006ae0
 80068f8:	08006ae0 	.word	0x08006ae0
 80068fc:	08006ae4 	.word	0x08006ae4

08006900 <malloc>:
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <malloc+0xc>)
 8006902:	4601      	mov	r1, r0
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f000 b861 	b.w	80069cc <_malloc_r>
 800690a:	bf00      	nop
 800690c:	2000002c 	.word	0x2000002c

08006910 <free>:
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <free+0xc>)
 8006912:	4601      	mov	r1, r0
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f000 b80b 	b.w	8006930 <_free_r>
 800691a:	bf00      	nop
 800691c:	2000002c 	.word	0x2000002c

08006920 <memset>:
 8006920:	4402      	add	r2, r0
 8006922:	4603      	mov	r3, r0
 8006924:	4293      	cmp	r3, r2
 8006926:	d100      	bne.n	800692a <memset+0xa>
 8006928:	4770      	bx	lr
 800692a:	f803 1b01 	strb.w	r1, [r3], #1
 800692e:	e7f9      	b.n	8006924 <memset+0x4>

08006930 <_free_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4605      	mov	r5, r0
 8006934:	2900      	cmp	r1, #0
 8006936:	d045      	beq.n	80069c4 <_free_r+0x94>
 8006938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693c:	1f0c      	subs	r4, r1, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfb8      	it	lt
 8006942:	18e4      	addlt	r4, r4, r3
 8006944:	f000 f8ac 	bl	8006aa0 <__malloc_lock>
 8006948:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <_free_r+0x98>)
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	4610      	mov	r0, r2
 800694e:	b933      	cbnz	r3, 800695e <_free_r+0x2e>
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	6014      	str	r4, [r2, #0]
 8006954:	4628      	mov	r0, r5
 8006956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695a:	f000 b8a2 	b.w	8006aa2 <__malloc_unlock>
 800695e:	42a3      	cmp	r3, r4
 8006960:	d90c      	bls.n	800697c <_free_r+0x4c>
 8006962:	6821      	ldr	r1, [r4, #0]
 8006964:	1862      	adds	r2, r4, r1
 8006966:	4293      	cmp	r3, r2
 8006968:	bf04      	itt	eq
 800696a:	681a      	ldreq	r2, [r3, #0]
 800696c:	685b      	ldreq	r3, [r3, #4]
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	bf04      	itt	eq
 8006972:	1852      	addeq	r2, r2, r1
 8006974:	6022      	streq	r2, [r4, #0]
 8006976:	6004      	str	r4, [r0, #0]
 8006978:	e7ec      	b.n	8006954 <_free_r+0x24>
 800697a:	4613      	mov	r3, r2
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	b10a      	cbz	r2, 8006984 <_free_r+0x54>
 8006980:	42a2      	cmp	r2, r4
 8006982:	d9fa      	bls.n	800697a <_free_r+0x4a>
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	1858      	adds	r0, r3, r1
 8006988:	42a0      	cmp	r0, r4
 800698a:	d10b      	bne.n	80069a4 <_free_r+0x74>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	4401      	add	r1, r0
 8006990:	1858      	adds	r0, r3, r1
 8006992:	4282      	cmp	r2, r0
 8006994:	6019      	str	r1, [r3, #0]
 8006996:	d1dd      	bne.n	8006954 <_free_r+0x24>
 8006998:	6810      	ldr	r0, [r2, #0]
 800699a:	6852      	ldr	r2, [r2, #4]
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	4401      	add	r1, r0
 80069a0:	6019      	str	r1, [r3, #0]
 80069a2:	e7d7      	b.n	8006954 <_free_r+0x24>
 80069a4:	d902      	bls.n	80069ac <_free_r+0x7c>
 80069a6:	230c      	movs	r3, #12
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	e7d3      	b.n	8006954 <_free_r+0x24>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	1821      	adds	r1, r4, r0
 80069b0:	428a      	cmp	r2, r1
 80069b2:	bf04      	itt	eq
 80069b4:	6811      	ldreq	r1, [r2, #0]
 80069b6:	6852      	ldreq	r2, [r2, #4]
 80069b8:	6062      	str	r2, [r4, #4]
 80069ba:	bf04      	itt	eq
 80069bc:	1809      	addeq	r1, r1, r0
 80069be:	6021      	streq	r1, [r4, #0]
 80069c0:	605c      	str	r4, [r3, #4]
 80069c2:	e7c7      	b.n	8006954 <_free_r+0x24>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	bf00      	nop
 80069c8:	200000b8 	.word	0x200000b8

080069cc <_malloc_r>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	1ccd      	adds	r5, r1, #3
 80069d0:	f025 0503 	bic.w	r5, r5, #3
 80069d4:	3508      	adds	r5, #8
 80069d6:	2d0c      	cmp	r5, #12
 80069d8:	bf38      	it	cc
 80069da:	250c      	movcc	r5, #12
 80069dc:	2d00      	cmp	r5, #0
 80069de:	4606      	mov	r6, r0
 80069e0:	db01      	blt.n	80069e6 <_malloc_r+0x1a>
 80069e2:	42a9      	cmp	r1, r5
 80069e4:	d903      	bls.n	80069ee <_malloc_r+0x22>
 80069e6:	230c      	movs	r3, #12
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	2000      	movs	r0, #0
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	f000 f857 	bl	8006aa0 <__malloc_lock>
 80069f2:	4a21      	ldr	r2, [pc, #132]	; (8006a78 <_malloc_r+0xac>)
 80069f4:	6814      	ldr	r4, [r2, #0]
 80069f6:	4621      	mov	r1, r4
 80069f8:	b991      	cbnz	r1, 8006a20 <_malloc_r+0x54>
 80069fa:	4c20      	ldr	r4, [pc, #128]	; (8006a7c <_malloc_r+0xb0>)
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	b91b      	cbnz	r3, 8006a08 <_malloc_r+0x3c>
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 f83d 	bl	8006a80 <_sbrk_r>
 8006a06:	6020      	str	r0, [r4, #0]
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 f838 	bl	8006a80 <_sbrk_r>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d124      	bne.n	8006a5e <_malloc_r+0x92>
 8006a14:	230c      	movs	r3, #12
 8006a16:	6033      	str	r3, [r6, #0]
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f000 f842 	bl	8006aa2 <__malloc_unlock>
 8006a1e:	e7e4      	b.n	80069ea <_malloc_r+0x1e>
 8006a20:	680b      	ldr	r3, [r1, #0]
 8006a22:	1b5b      	subs	r3, r3, r5
 8006a24:	d418      	bmi.n	8006a58 <_malloc_r+0x8c>
 8006a26:	2b0b      	cmp	r3, #11
 8006a28:	d90f      	bls.n	8006a4a <_malloc_r+0x7e>
 8006a2a:	600b      	str	r3, [r1, #0]
 8006a2c:	50cd      	str	r5, [r1, r3]
 8006a2e:	18cc      	adds	r4, r1, r3
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 f836 	bl	8006aa2 <__malloc_unlock>
 8006a36:	f104 000b 	add.w	r0, r4, #11
 8006a3a:	1d23      	adds	r3, r4, #4
 8006a3c:	f020 0007 	bic.w	r0, r0, #7
 8006a40:	1ac3      	subs	r3, r0, r3
 8006a42:	d0d3      	beq.n	80069ec <_malloc_r+0x20>
 8006a44:	425a      	negs	r2, r3
 8006a46:	50e2      	str	r2, [r4, r3]
 8006a48:	e7d0      	b.n	80069ec <_malloc_r+0x20>
 8006a4a:	428c      	cmp	r4, r1
 8006a4c:	684b      	ldr	r3, [r1, #4]
 8006a4e:	bf16      	itet	ne
 8006a50:	6063      	strne	r3, [r4, #4]
 8006a52:	6013      	streq	r3, [r2, #0]
 8006a54:	460c      	movne	r4, r1
 8006a56:	e7eb      	b.n	8006a30 <_malloc_r+0x64>
 8006a58:	460c      	mov	r4, r1
 8006a5a:	6849      	ldr	r1, [r1, #4]
 8006a5c:	e7cc      	b.n	80069f8 <_malloc_r+0x2c>
 8006a5e:	1cc4      	adds	r4, r0, #3
 8006a60:	f024 0403 	bic.w	r4, r4, #3
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d005      	beq.n	8006a74 <_malloc_r+0xa8>
 8006a68:	1a21      	subs	r1, r4, r0
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f000 f808 	bl	8006a80 <_sbrk_r>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d0cf      	beq.n	8006a14 <_malloc_r+0x48>
 8006a74:	6025      	str	r5, [r4, #0]
 8006a76:	e7db      	b.n	8006a30 <_malloc_r+0x64>
 8006a78:	200000b8 	.word	0x200000b8
 8006a7c:	200000bc 	.word	0x200000bc

08006a80 <_sbrk_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4c06      	ldr	r4, [pc, #24]	; (8006a9c <_sbrk_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4605      	mov	r5, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	f7fa f938 	bl	8000d00 <_sbrk>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_sbrk_r+0x1a>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_sbrk_r+0x1a>
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	20000890 	.word	0x20000890

08006aa0 <__malloc_lock>:
 8006aa0:	4770      	bx	lr

08006aa2 <__malloc_unlock>:
 8006aa2:	4770      	bx	lr

08006aa4 <_init>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr

08006ab0 <_fini>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr
