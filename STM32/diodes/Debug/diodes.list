
diodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d28  08006d28  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d30  08006d30  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  200000a8  08006de0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08006de0  000208b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018626  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f9  00000000  00000000  000386fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  0003bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb8  00000000  00000000  0003ce18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018eb4  00000000  00000000  0003ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b09  00000000  00000000  00056c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008da8a  00000000  00000000  0006778d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  000f5294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a8 	.word	0x200000a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006cf4 	.word	0x08006cf4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ac 	.word	0x200000ac
 80001d4:	08006cf4 	.word	0x08006cf4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_GPIO_EXTI_Callback>:
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
volatile int direction = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == UButton_Pin)
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d119      	bne.n	800051c <HAL_GPIO_EXTI_Callback+0x44>
	{
		static uint32_t last_change_tick;
		if( HAL_GetTick() - last_change_tick < 100 ){
 80004e8:	f000 fdea 	bl	80010c0 <HAL_GetTick>
 80004ec:	4602      	mov	r2, r0
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <HAL_GPIO_EXTI_Callback+0x4c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	2b63      	cmp	r3, #99	; 0x63
 80004f6:	d910      	bls.n	800051a <HAL_GPIO_EXTI_Callback+0x42>
			return;
		}
		last_change_tick = HAL_GetTick();
 80004f8:	f000 fde2 	bl	80010c0 <HAL_GetTick>
 80004fc:	4602      	mov	r2, r0
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000500:	601a      	str	r2, [r3, #0]
		if(direction)
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_GPIO_EXTI_Callback+0x50>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <HAL_GPIO_EXTI_Callback+0x3a>
		{
			direction = 0;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <HAL_GPIO_EXTI_Callback+0x50>)
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	e004      	b.n	800051c <HAL_GPIO_EXTI_Callback+0x44>
		}else{
			direction = 1;
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_GPIO_EXTI_Callback+0x50>)
 8000514:	2201      	movs	r2, #1
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	e000      	b.n	800051c <HAL_GPIO_EXTI_Callback+0x44>
			return;
 800051a:	bf00      	nop
		}
	}
}
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000cc 	.word	0x200000cc
 8000528:	200000c4 	.word	0x200000c4

0800052c <diodes>:
/* USER CODE BEGIN 0 */
int delay = 100;
int PINS[4]={GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
int CURRENT = 1;
int NEXT = 0;
void diodes(int direction){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	if (direction == 1){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d15f      	bne.n	80005fa <diodes+0xce>

		// Turn diode ON
		HAL_GPIO_WritePin(GPIOD, PINS[CURRENT], GPIO_PIN_SET);
 800053a:	4b63      	ldr	r3, [pc, #396]	; (80006c8 <diodes+0x19c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a63      	ldr	r2, [pc, #396]	; (80006cc <diodes+0x1a0>)
 8000540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000544:	b29b      	uxth	r3, r3
 8000546:	2201      	movs	r2, #1
 8000548:	4619      	mov	r1, r3
 800054a:	4861      	ldr	r0, [pc, #388]	; (80006d0 <diodes+0x1a4>)
 800054c:	f001 f87a 	bl	8001644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, PINS[NEXT], GPIO_PIN_RESET);
 8000550:	4b60      	ldr	r3, [pc, #384]	; (80006d4 <diodes+0x1a8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a5d      	ldr	r2, [pc, #372]	; (80006cc <diodes+0x1a0>)
 8000556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055a:	b29b      	uxth	r3, r3
 800055c:	2200      	movs	r2, #0
 800055e:	4619      	mov	r1, r3
 8000560:	485b      	ldr	r0, [pc, #364]	; (80006d0 <diodes+0x1a4>)
 8000562:	f001 f86f 	bl	8001644 <HAL_GPIO_WritePin>

		// Fade
		for(int i = 0; i < 10; ++i){
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	e023      	b.n	80005b4 <diodes+0x88>
			HAL_GPIO_WritePin(GPIOD, PINS[NEXT], GPIO_PIN_SET);
 800056c:	4b59      	ldr	r3, [pc, #356]	; (80006d4 <diodes+0x1a8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a56      	ldr	r2, [pc, #344]	; (80006cc <diodes+0x1a0>)
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	b29b      	uxth	r3, r3
 8000578:	2201      	movs	r2, #1
 800057a:	4619      	mov	r1, r3
 800057c:	4854      	ldr	r0, [pc, #336]	; (80006d0 <diodes+0x1a4>)
 800057e:	f001 f861 	bl	8001644 <HAL_GPIO_WritePin>
			HAL_Delay(10-i);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	f1c3 030a 	rsb	r3, r3, #10
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fda5 	bl	80010d8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, PINS[NEXT], GPIO_PIN_RESET);
 800058e:	4b51      	ldr	r3, [pc, #324]	; (80006d4 <diodes+0x1a8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a4e      	ldr	r2, [pc, #312]	; (80006cc <diodes+0x1a0>)
 8000594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000598:	b29b      	uxth	r3, r3
 800059a:	2200      	movs	r2, #0
 800059c:	4619      	mov	r1, r3
 800059e:	484c      	ldr	r0, [pc, #304]	; (80006d0 <diodes+0x1a4>)
 80005a0:	f001 f850 	bl	8001644 <HAL_GPIO_WritePin>
			HAL_Delay(2*i);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fd95 	bl	80010d8 <HAL_Delay>
		for(int i = 0; i < 10; ++i){
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b09      	cmp	r3, #9
 80005b8:	ddd8      	ble.n	800056c <diodes+0x40>
		}

		// Change current and next pin
		if (CURRENT == 3){
 80005ba:	4b43      	ldr	r3, [pc, #268]	; (80006c8 <diodes+0x19c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d103      	bne.n	80005ca <diodes+0x9e>
			CURRENT = 0;
 80005c2:	4b41      	ldr	r3, [pc, #260]	; (80006c8 <diodes+0x19c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	e004      	b.n	80005d4 <diodes+0xa8>
		}
		else{
			CURRENT += 1;
 80005ca:	4b3f      	ldr	r3, [pc, #252]	; (80006c8 <diodes+0x19c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a3d      	ldr	r2, [pc, #244]	; (80006c8 <diodes+0x19c>)
 80005d2:	6013      	str	r3, [r2, #0]
		}
		if (NEXT == 3){
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <diodes+0x1a8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d103      	bne.n	80005e4 <diodes+0xb8>
			NEXT = 0;
 80005dc:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <diodes+0x1a8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e004      	b.n	80005ee <diodes+0xc2>
		}
		else{
			NEXT += 1;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <diodes+0x1a8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <diodes+0x1a8>)
 80005ec:	6013      	str	r3, [r2, #0]
		}
		HAL_Delay(delay);
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <diodes+0x1ac>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd70 	bl	80010d8 <HAL_Delay>
		else{
			NEXT -= 1;
		}
		HAL_Delay(delay);
	}
}
 80005f8:	e061      	b.n	80006be <diodes+0x192>
	else if (direction == 0){
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d15e      	bne.n	80006be <diodes+0x192>
		HAL_GPIO_WritePin(GPIOD, PINS[NEXT], GPIO_PIN_SET);
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <diodes+0x1a8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a31      	ldr	r2, [pc, #196]	; (80006cc <diodes+0x1a0>)
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	b29b      	uxth	r3, r3
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	482f      	ldr	r0, [pc, #188]	; (80006d0 <diodes+0x1a4>)
 8000612:	f001 f817 	bl	8001644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, PINS[CURRENT], GPIO_PIN_RESET);
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <diodes+0x19c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a2c      	ldr	r2, [pc, #176]	; (80006cc <diodes+0x1a0>)
 800061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000620:	b29b      	uxth	r3, r3
 8000622:	2200      	movs	r2, #0
 8000624:	4619      	mov	r1, r3
 8000626:	482a      	ldr	r0, [pc, #168]	; (80006d0 <diodes+0x1a4>)
 8000628:	f001 f80c 	bl	8001644 <HAL_GPIO_WritePin>
		for(int i = 0; i < 10; ++i){
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	e023      	b.n	800067a <diodes+0x14e>
			HAL_GPIO_WritePin(GPIOD, PINS[CURRENT], GPIO_PIN_SET);
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <diodes+0x19c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a25      	ldr	r2, [pc, #148]	; (80006cc <diodes+0x1a0>)
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	b29b      	uxth	r3, r3
 800063e:	2201      	movs	r2, #1
 8000640:	4619      	mov	r1, r3
 8000642:	4823      	ldr	r0, [pc, #140]	; (80006d0 <diodes+0x1a4>)
 8000644:	f000 fffe 	bl	8001644 <HAL_GPIO_WritePin>
			HAL_Delay(10-i);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	f1c3 030a 	rsb	r3, r3, #10
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fd42 	bl	80010d8 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, PINS[CURRENT], GPIO_PIN_RESET);
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <diodes+0x19c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <diodes+0x1a0>)
 800065a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065e:	b29b      	uxth	r3, r3
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <diodes+0x1a4>)
 8000666:	f000 ffed 	bl	8001644 <HAL_GPIO_WritePin>
			HAL_Delay(2*i);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fd32 	bl	80010d8 <HAL_Delay>
		for(int i = 0; i < 10; ++i){
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	3301      	adds	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	2b09      	cmp	r3, #9
 800067e:	ddd8      	ble.n	8000632 <diodes+0x106>
		if (CURRENT == 0){
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <diodes+0x19c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <diodes+0x164>
			CURRENT = 3;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <diodes+0x19c>)
 800068a:	2203      	movs	r2, #3
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	e004      	b.n	800069a <diodes+0x16e>
			CURRENT -= 1;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <diodes+0x19c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3b01      	subs	r3, #1
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <diodes+0x19c>)
 8000698:	6013      	str	r3, [r2, #0]
		if (NEXT == 0){
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <diodes+0x1a8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d103      	bne.n	80006aa <diodes+0x17e>
			NEXT = 3;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <diodes+0x1a8>)
 80006a4:	2203      	movs	r2, #3
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e004      	b.n	80006b4 <diodes+0x188>
			NEXT -= 1;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <diodes+0x1a8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <diodes+0x1a8>)
 80006b2:	6013      	str	r3, [r2, #0]
		HAL_Delay(delay);
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <diodes+0x1ac>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fd0d 	bl	80010d8 <HAL_Delay>
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000014 	.word	0x20000014
 80006cc:	20000004 	.word	0x20000004
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	200000c8 	.word	0x200000c8
 80006d8:	20000000 	.word	0x20000000

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fc88 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f814 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 f958 	bl	800099c <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ec:	f000 f894 	bl	8000818 <MX_I2C1_Init>
  MX_I2S2_Init();
 80006f0:	f000 f8c0 	bl	8000874 <MX_I2S2_Init>
  MX_I2S3_Init();
 80006f4:	f000 f8ec 	bl	80008d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006f8:	f000 f91a 	bl	8000930 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80006fc:	f005 ff4a 	bl	8006594 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();
	  diodes(direction);
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <main+0x30>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff11 	bl	800052c <diodes>
 800070a:	e7f9      	b.n	8000700 <main+0x24>
 800070c:	200000c4 	.word	0x200000c4

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09a      	sub	sp, #104	; 0x68
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 fa26 	bl	8006b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <SystemClock_Config+0x100>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a30      	ldr	r2, [pc, #192]	; (8000810 <SystemClock_Config+0x100>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <SystemClock_Config+0x100>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <SystemClock_Config+0x104>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemClock_Config+0x104>)
 800076c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0x104>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077e:	2301      	movs	r3, #1
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000782:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000792:	2304      	movs	r3, #4
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000796:	23c0      	movs	r3, #192	; 0xc0
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800079a:	2304      	movs	r3, #4
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800079e:	2308      	movs	r3, #8
 80007a0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 f9a2 	bl	8003af0 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007b2:	f000 f9e5 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	2103      	movs	r1, #3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fbfc 	bl	8003fd0 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007de:	f000 f9cf 	bl	8000b80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007e2:	2301      	movs	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007e6:	23c8      	movs	r3, #200	; 0xc8
 80007e8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007ea:	2305      	movs	r3, #5
 80007ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fdc8 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000802:	f000 f9bd 	bl	8000b80 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3768      	adds	r7, #104	; 0x68
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f002 fb73 	bl	8002f40 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 f98e 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000e4 	.word	0x200000e4
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2S2_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_I2S2_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2S2_Init+0x50>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2S2_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_I2S2_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_I2S2_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_I2S2_Init+0x50>)
 800089a:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <MX_I2S2_Init+0x58>)
 800089c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_I2S2_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_I2S2_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_I2S2_Init+0x50>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_I2S2_Init+0x50>)
 80008b2:	f002 fc7d 	bl	80031b0 <HAL_I2S_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 f960 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000190 	.word	0x20000190
 80008c8:	40003800 	.word	0x40003800
 80008cc:	00017700 	.word	0x00017700

080008d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_I2S3_Init+0x54>)
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <MX_I2S3_Init+0x58>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2S3_Init+0x54>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_I2S3_Init+0x54>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2S3_Init+0x54>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_I2S3_Init+0x54>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_I2S3_Init+0x54>)
 80008f8:	4a0c      	ldr	r2, [pc, #48]	; (800092c <MX_I2S3_Init+0x5c>)
 80008fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2S3_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_I2S3_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2S3_Init+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_I2S3_Init+0x54>)
 8000910:	f002 fc4e 	bl	80031b0 <HAL_I2S_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800091a:	f000 f931 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001d8 	.word	0x200001d8
 8000928:	40003c00 	.word	0x40003c00
 800092c:	00017700 	.word	0x00017700

08000930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_SPI1_Init+0x64>)
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <MX_SPI1_Init+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_SPI1_Init+0x64>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_SPI1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_SPI1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_SPI1_Init+0x64>)
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_SPI1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_SPI1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_SPI1_Init+0x64>)
 800097c:	220a      	movs	r2, #10
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_SPI1_Init+0x64>)
 8000982:	f003 fe51 	bl	8004628 <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800098c:	f000 f8f8 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000138 	.word	0x20000138
 8000998:	40013000 	.word	0x40013000

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b6b      	ldr	r3, [pc, #428]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a6a      	ldr	r2, [pc, #424]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b64      	ldr	r3, [pc, #400]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a63      	ldr	r2, [pc, #396]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a5c      	ldr	r2, [pc, #368]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b56      	ldr	r3, [pc, #344]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a55      	ldr	r2, [pc, #340]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b4f      	ldr	r3, [pc, #316]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a4e      	ldr	r2, [pc, #312]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x1c8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	4842      	ldr	r0, [pc, #264]	; (8000b68 <MX_GPIO_Init+0x1cc>)
 8000a60:	f000 fdf0 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	4840      	ldr	r0, [pc, #256]	; (8000b6c <MX_GPIO_Init+0x1d0>)
 8000a6a:	f000 fdeb 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a74:	483e      	ldr	r0, [pc, #248]	; (8000b70 <MX_GPIO_Init+0x1d4>)
 8000a76:	f000 fde5 	bl	8001644 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4836      	ldr	r0, [pc, #216]	; (8000b68 <MX_GPIO_Init+0x1cc>)
 8000a8e:	f000 fc57 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a92:	2308      	movs	r3, #8
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482f      	ldr	r0, [pc, #188]	; (8000b68 <MX_GPIO_Init+0x1cc>)
 8000aaa:	f000 fc49 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000aae:	2332      	movs	r3, #50	; 0x32
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab2:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x1cc>)
 8000ac2:	f000 fc3d 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4823      	ldr	r0, [pc, #140]	; (8000b6c <MX_GPIO_Init+0x1d0>)
 8000ade:	f000 fc2f 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : UButton_Pin */
  GPIO_InitStruct.Pin = UButton_Pin;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <MX_GPIO_Init+0x1dc>)
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UButton_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0x1e0>)
 8000af6:	f000 fc23 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Pin */
  GPIO_InitStruct.Pin = Interrupt_Pin;
 8000afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_GPIO_Init+0x1dc>)
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Interrupt_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_GPIO_Init+0x1d4>)
 8000b10:	f000 fc16 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000b14:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b18:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <MX_GPIO_Init+0x1d4>)
 8000b2e:	f000 fc07 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b32:	2320      	movs	r3, #32
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <MX_GPIO_Init+0x1d4>)
 8000b46:	f000 fbfb 	bl	8001340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2006      	movs	r0, #6
 8000b50:	f000 fbbf 	bl	80012d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b54:	2006      	movs	r0, #6
 8000b56:	f000 fbd8 	bl	800130a <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	; 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	10120000 	.word	0x10120000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	40020000 	.word	0x40020000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_I2C_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c30:	2304      	movs	r3, #4
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_I2C_MspInit+0x8c>)
 8000c3c:	f000 fb80 	bl	8001340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <HAL_I2S_MspInit+0x184>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d15b      	bne.n	8000d4a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
 8000c96:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b55      	ldr	r3, [pc, #340]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	623b      	str	r3, [r7, #32]
 8000cac:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a50      	ldr	r2, [pc, #320]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a49      	ldr	r2, [pc, #292]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cf6:	2306      	movs	r3, #6
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483e      	ldr	r0, [pc, #248]	; (8000dfc <HAL_I2S_MspInit+0x18c>)
 8000d02:	f000 fb1d 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d06:	2308      	movs	r3, #8
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4836      	ldr	r0, [pc, #216]	; (8000dfc <HAL_I2S_MspInit+0x18c>)
 8000d22:	f000 fb0d 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	482f      	ldr	r0, [pc, #188]	; (8000e00 <HAL_I2S_MspInit+0x190>)
 8000d44:	f000 fafc 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d48:	e04f      	b.n	8000dea <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <HAL_I2S_MspInit+0x194>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d14a      	bne.n	8000dea <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_I2S_MspInit+0x188>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000da8:	2310      	movs	r3, #16
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db8:	2306      	movs	r3, #6
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4811      	ldr	r0, [pc, #68]	; (8000e08 <HAL_I2S_MspInit+0x198>)
 8000dc4:	f000 fabc 	bl	8001340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000dc8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_I2S_MspInit+0x18c>)
 8000de6:	f000 faab 	bl	8001340 <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3738      	adds	r7, #56	; 0x38
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40003800 	.word	0x40003800
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	40020000 	.word	0x40020000

08000e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_SPI_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12b      	bne.n	8000e86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_SPI_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e66:	23e0      	movs	r3, #224	; 0xe0
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e76:	2305      	movs	r3, #5
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_SPI_MspInit+0x8c>)
 8000e82:	f000 fa5d 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef0:	f000 f8d2 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f000 fbbb 	bl	8001678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <OTG_FS_IRQHandler+0x10>)
 8000f0e:	f000 fe51 	bl	8001bb4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200005f0 	.word	0x200005f0

08000f1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x50>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x16>
		heap_end = &end;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <_sbrk+0x50>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <_sbrk+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_sbrk+0x50>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <_sbrk+0x50>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	466a      	mov	r2, sp
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d907      	bls.n	8000f56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f46:	f005 fdd9 	bl	8006afc <__errno>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f54:	e006      	b.n	8000f64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_sbrk+0x50>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <_sbrk+0x50>)
 8000f60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000d0 	.word	0x200000d0
 8000f70:	200008b8 	.word	0x200008b8

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x28>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x28>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SystemInit+0x28>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd3 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f005 fd9b 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fb83 	bl	80006dc <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	08006d38 	.word	0x08006d38
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8000fe8:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8000fec:	200008b8 	.word	0x200008b8

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f94d 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fdb2 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f965 	bl	8001326 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001074:	f000 f92d 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000018 	.word	0x20000018
 8001090:	20000020 	.word	0x20000020
 8001094:	2000001c 	.word	0x2000001c

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000020 	.word	0x20000020
 80010bc:	20000220 	.word	0x20000220

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000220 	.word	0x20000220

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_Delay+0x40>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000020 	.word	0x20000020

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff29 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff3e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff31 	bl	8001180 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	e159      	b.n	8001610 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8148 	bne.w	800160a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d00b      	beq.n	800139a <HAL_GPIO_Init+0x5a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800138e:	2b11      	cmp	r3, #17
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b12      	cmp	r3, #18
 8001398:	d130      	bne.n	80013fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0xfc>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b12      	cmp	r3, #18
 800143a:	d123      	bne.n	8001484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	69b9      	ldr	r1, [r7, #24]
 8001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a2 	beq.w	800160a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b56      	ldr	r3, [pc, #344]	; (8001624 <HAL_GPIO_Init+0x2e4>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a55      	ldr	r2, [pc, #340]	; (8001624 <HAL_GPIO_Init+0x2e4>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_GPIO_Init+0x2e4>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e2:	4a51      	ldr	r2, [pc, #324]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a48      	ldr	r2, [pc, #288]	; (800162c <HAL_GPIO_Init+0x2ec>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x202>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a47      	ldr	r2, [pc, #284]	; (8001630 <HAL_GPIO_Init+0x2f0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x1fe>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a46      	ldr	r2, [pc, #280]	; (8001634 <HAL_GPIO_Init+0x2f4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x1fa>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a45      	ldr	r2, [pc, #276]	; (8001638 <HAL_GPIO_Init+0x2f8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x1f6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <HAL_GPIO_Init+0x2fc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x1f2>
 800152e:	2304      	movs	r3, #4
 8001530:	e008      	b.n	8001544 <HAL_GPIO_Init+0x204>
 8001532:	2307      	movs	r3, #7
 8001534:	e006      	b.n	8001544 <HAL_GPIO_Init+0x204>
 8001536:	2303      	movs	r3, #3
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x204>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x204>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x204>
 8001542:	2300      	movs	r3, #0
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	f002 0203 	and.w	r2, r2, #3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4093      	lsls	r3, r2
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001554:	4934      	ldr	r1, [pc, #208]	; (8001628 <HAL_GPIO_Init+0x2e8>)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_GPIO_Init+0x300>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <HAL_GPIO_Init+0x300>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800158c:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_GPIO_Init+0x300>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_GPIO_Init+0x300>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_GPIO_Init+0x300>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_GPIO_Init+0x300>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_GPIO_Init+0x300>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_GPIO_Init+0x300>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2b0f      	cmp	r3, #15
 8001614:	f67f aea2 	bls.w	800135c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001618:	bf00      	nop
 800161a:	3724      	adds	r7, #36	; 0x24
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40023800 	.word	0x40023800
 8001628:	40013800 	.word	0x40013800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff1e 	bl	80004d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	b08f      	sub	sp, #60	; 0x3c
 80016ac:	af0a      	add	r7, sp, #40	; 0x28
 80016ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e054      	b.n	8001764 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d106      	bne.n	80016da <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f004 ffb1 	bl	800663c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 f86b 	bl	80047d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	687e      	ldr	r6, [r7, #4]
 8001706:	466d      	mov	r5, sp
 8001708:	f106 0410 	add.w	r4, r6, #16
 800170c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001714:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001718:	e885 0003 	stmia.w	r5, {r0, r1}
 800171c:	1d33      	adds	r3, r6, #4
 800171e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f002 ffe5 	bl	80046f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2101      	movs	r1, #1
 800172c:	4618      	mov	r0, r3
 800172e:	f003 f862 	bl	80047f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	687e      	ldr	r6, [r7, #4]
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001750:	1d33      	adds	r3, r6, #4
 8001752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f003 f975 	bl	8004a44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800176c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af04      	add	r7, sp, #16
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	460b      	mov	r3, r1
 8001780:	70bb      	strb	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_HCD_HC_Init+0x28>
 8001790:	2302      	movs	r3, #2
 8001792:	e07f      	b.n	8001894 <HAL_HCD_HC_Init+0x128>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	333d      	adds	r3, #61	; 0x3d
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3338      	adds	r3, #56	; 0x38
 80017c0:	787a      	ldrb	r2, [r7, #1]
 80017c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	440b      	add	r3, r1
 80017d2:	3340      	adds	r3, #64	; 0x40
 80017d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017d6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	3339      	adds	r3, #57	; 0x39
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	333f      	adds	r3, #63	; 0x3f
 80017fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001800:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	78bb      	ldrb	r3, [r7, #2]
 8001806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800180a:	b2d8      	uxtb	r0, r3
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	333a      	adds	r3, #58	; 0x3a
 800181a:	4602      	mov	r2, r0
 800181c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800181e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da0a      	bge.n	800183c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	333b      	adds	r3, #59	; 0x3b
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	e009      	b.n	8001850 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	333b      	adds	r3, #59	; 0x3b
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	333c      	adds	r3, #60	; 0x3c
 8001860:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001864:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	787c      	ldrb	r4, [r7, #1]
 800186c:	78ba      	ldrb	r2, [r7, #2]
 800186e:	78f9      	ldrb	r1, [r7, #3]
 8001870:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001872:	9302      	str	r3, [sp, #8]
 8001874:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4623      	mov	r3, r4
 8001882:	f003 fa1f 	bl	8004cc4 <USB_HC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_HCD_HC_Halt+0x1e>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e00f      	b.n	80018da <HAL_HCD_HC_Halt+0x3e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	78fa      	ldrb	r2, [r7, #3]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fc59 	bl	8005182 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	70fb      	strb	r3, [r7, #3]
 80018f6:	460b      	mov	r3, r1
 80018f8:	70bb      	strb	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	333b      	adds	r3, #59	; 0x3b
 800190e:	78ba      	ldrb	r2, [r7, #2]
 8001910:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	440b      	add	r3, r1
 8001920:	333f      	adds	r3, #63	; 0x3f
 8001922:	787a      	ldrb	r2, [r7, #1]
 8001924:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001926:	7c3b      	ldrb	r3, [r7, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3342      	adds	r3, #66	; 0x42
 800193c:	2203      	movs	r2, #3
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e009      	b.n	8001956 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3342      	adds	r3, #66	; 0x42
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001956:	787b      	ldrb	r3, [r7, #1]
 8001958:	2b03      	cmp	r3, #3
 800195a:	f200 80d6 	bhi.w	8001b0a <HAL_HCD_HC_SubmitRequest+0x226>
 800195e:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	08001975 	.word	0x08001975
 8001968:	08001af5 	.word	0x08001af5
 800196c:	080019e1 	.word	0x080019e1
 8001970:	08001a6b 	.word	0x08001a6b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001974:	7c3b      	ldrb	r3, [r7, #16]
 8001976:	2b01      	cmp	r3, #1
 8001978:	f040 80c9 	bne.w	8001b0e <HAL_HCD_HC_SubmitRequest+0x22a>
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 80c5 	bne.w	8001b0e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001984:	8b3b      	ldrh	r3, [r7, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3351      	adds	r3, #81	; 0x51
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3351      	adds	r3, #81	; 0x51
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	3342      	adds	r3, #66	; 0x42
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019c8:	e0a1      	b.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3342      	adds	r3, #66	; 0x42
 80019da:	2202      	movs	r2, #2
 80019dc:	701a      	strb	r2, [r3, #0]
      break;
 80019de:	e096      	b.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019e0:	78bb      	ldrb	r3, [r7, #2]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d120      	bne.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019e6:	78fa      	ldrb	r2, [r7, #3]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3351      	adds	r3, #81	; 0x51
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10a      	bne.n	8001a12 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3342      	adds	r3, #66	; 0x42
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a10:	e07e      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3342      	adds	r3, #66	; 0x42
 8001a22:	2202      	movs	r2, #2
 8001a24:	701a      	strb	r2, [r3, #0]
      break;
 8001a26:	e073      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3350      	adds	r3, #80	; 0x50
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3342      	adds	r3, #66	; 0x42
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
      break;
 8001a52:	e05d      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	3342      	adds	r3, #66	; 0x42
 8001a64:	2202      	movs	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
      break;
 8001a68:	e052      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a6a:	78bb      	ldrb	r3, [r7, #2]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d120      	bne.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3351      	adds	r3, #81	; 0x51
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3342      	adds	r3, #66	; 0x42
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a9a:	e039      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3342      	adds	r3, #66	; 0x42
 8001aac:	2202      	movs	r2, #2
 8001aae:	701a      	strb	r2, [r3, #0]
      break;
 8001ab0:	e02e      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab2:	78fa      	ldrb	r2, [r7, #3]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3350      	adds	r3, #80	; 0x50
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3342      	adds	r3, #66	; 0x42
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
      break;
 8001adc:	e018      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	3342      	adds	r3, #66	; 0x42
 8001aee:	2202      	movs	r2, #2
 8001af0:	701a      	strb	r2, [r3, #0]
      break;
 8001af2:	e00d      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
      break;
 8001b08:	e002      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001b0a:	bf00      	nop
 8001b0c:	e000      	b.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001b0e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3344      	adds	r3, #68	; 0x44
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	8b39      	ldrh	r1, [r7, #24]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4403      	add	r3, r0
 8001b34:	3348      	adds	r3, #72	; 0x48
 8001b36:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	335c      	adds	r3, #92	; 0x5c
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	334c      	adds	r3, #76	; 0x4c
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3339      	adds	r3, #57	; 0x39
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	335d      	adds	r3, #93	; 0x5d
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	18d1      	adds	r1, r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f003 f998 	bl	8004ed8 <USB_HC_StartXfer>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop

08001bb4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fef7 	bl	80049be <USB_GetMode>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	f040 80f1 	bne.w	8001dba <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fedb 	bl	8004998 <USB_ReadInterrupts>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80e7 	beq.w	8001db8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fed2 	bl	8004998 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bfe:	d104      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fec2 	bl	8004998 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c1e:	d104      	bne.n	8001c2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 feb2 	bl	8004998 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c3e:	d104      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fea2 	bl	8004998 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d103      	bne.n	8001c66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fe94 	bl	8004998 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c7a:	d117      	bne.n	8001cac <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001c8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f004 fd51 	bl	8006738 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 ff8d 	bl	8004bbc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fe71 	bl	8004998 <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc0:	d102      	bne.n	8001cc8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f001 f8ac 	bl	8002e20 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fe63 	bl	8004998 <USB_ReadInterrupts>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d106      	bne.n	8001cea <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f004 fd0f 	bl	8006700 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fe52 	bl	8004998 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cfe:	d138      	bne.n	8001d72 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fa2b 	bl	8005160 <USB_HC_ReadInterrupt>
 8001d0a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e025      	b.n	8001d5e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d018      	beq.n	8001d58 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d3c:	d106      	bne.n	8001d4c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8b3 	bl	8001eb0 <HCD_HC_IN_IRQHandler>
 8001d4a:	e005      	b.n	8001d58 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fc43 	bl	80025de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3d4      	bcc.n	8001d12 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fe0e 	bl	8004998 <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d101      	bne.n	8001d8a <HAL_HCD_IRQHandler+0x1d6>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_HCD_IRQHandler+0x1d8>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d014      	beq.n	8001dba <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0210 	bic.w	r2, r2, #16
 8001d9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 ff91 	bl	8002cc8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0210 	orr.w	r2, r2, #16
 8001db4:	619a      	str	r2, [r3, #24]
 8001db6:	e000      	b.n	8001dba <HAL_HCD_IRQHandler+0x206>
      return;
 8001db8:	bf00      	nop
    }
  }
}
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_HCD_Start+0x16>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e013      	b.n	8001dfe <HAL_HCD_Start+0x3e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fce5 	bl	80047b2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 ff1e 	bl	8004c30 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_HCD_Stop+0x16>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e00d      	b.n	8001e38 <HAL_HCD_Stop+0x32>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fae5 	bl	80053f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	335c      	adds	r3, #92	; 0x5c
 8001e5c:	781b      	ldrb	r3, [r3, #0]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	334c      	adds	r3, #76	; 0x4c
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 fefe 	bl	8004ca2 <USB_GetCurrentFrame>
 8001ea6:	4603      	mov	r3, r0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d119      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2304      	movs	r3, #4
 8001ef0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	0151      	lsls	r1, r2, #5
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	440a      	add	r2, r1
 8001f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	60d3      	str	r3, [r2, #12]
 8001f12:	e095      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d109      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	2320      	movs	r3, #32
 8001f3a:	6093      	str	r3, [r2, #8]
 8001f3c:	e080      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d134      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	0151      	lsls	r1, r2, #5
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	440a      	add	r2, r1
 8001f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	335d      	adds	r3, #93	; 0x5d
 8001f84:	2205      	movs	r2, #5
 8001f86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2310      	movs	r3, #16
 8001f98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2308      	movs	r3, #8
 8001faa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 f8e3 	bl	8005182 <USB_HC_Halt>
 8001fbc:	e040      	b.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd4:	d134      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	0151      	lsls	r1, r2, #5
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	440a      	add	r2, r1
 8001fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f003 f8be 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	461a      	mov	r2, r3
 8002014:	2310      	movs	r3, #16
 8002016:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	335d      	adds	r3, #93	; 0x5d
 8002028:	2208      	movs	r2, #8
 800202a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002056:	d122      	bne.n	800209e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	0151      	lsls	r1, r2, #5
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	440a      	add	r2, r1
 800206e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f003 f87d 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	461a      	mov	r2, r3
 8002096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800209c:	e29b      	b.n	80025d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 80c1 	bne.w	8002238 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01b      	beq.n	80020f6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	3348      	adds	r3, #72	; 0x48
 80020ce:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	0159      	lsls	r1, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020e2:	1ad1      	subs	r1, r2, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4403      	add	r3, r0
 80020f2:	334c      	adds	r3, #76	; 0x4c
 80020f4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	335d      	adds	r3, #93	; 0x5d
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	3358      	adds	r3, #88	; 0x58
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	461a      	mov	r2, r3
 800212c:	2301      	movs	r3, #1
 800212e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	333f      	adds	r3, #63	; 0x3f
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	333f      	adds	r3, #63	; 0x3f
 8002156:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002158:	2b02      	cmp	r3, #2
 800215a:	d121      	bne.n	80021a0 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	0151      	lsls	r1, r2, #5
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	440a      	add	r2, r1
 8002172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002176:	f043 0302 	orr.w	r3, r3, #2
 800217a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fffb 	bl	8005182 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002198:	461a      	mov	r2, r3
 800219a:	2310      	movs	r3, #16
 800219c:	6093      	str	r3, [r2, #8]
 800219e:	e034      	b.n	800220a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	333f      	adds	r3, #63	; 0x3f
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d129      	bne.n	800220a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	0151      	lsls	r1, r2, #5
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	440a      	add	r2, r1
 80021cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021d4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	335c      	adds	r3, #92	; 0x5c
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	b2d8      	uxtb	r0, r3
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	335c      	adds	r3, #92	; 0x5c
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4601      	mov	r1, r0
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f004 faa5 	bl	8006754 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	3350      	adds	r3, #80	; 0x50
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2d8      	uxtb	r0, r3
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	3350      	adds	r3, #80	; 0x50
 8002232:	4602      	mov	r2, r0
 8002234:	701a      	strb	r2, [r3, #0]
}
 8002236:	e1ce      	b.n	80025d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b02      	cmp	r3, #2
 800224c:	f040 80f1 	bne.w	8002432 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	0151      	lsls	r1, r2, #5
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	440a      	add	r2, r1
 8002266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800226a:	f023 0302 	bic.w	r3, r3, #2
 800226e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	335d      	adds	r3, #93	; 0x5d
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10a      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	335c      	adds	r3, #92	; 0x5c
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e0b0      	b.n	80023fe <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	335d      	adds	r3, #93	; 0x5d
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d10a      	bne.n	80022c8 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	335c      	adds	r3, #92	; 0x5c
 80022c2:	2205      	movs	r2, #5
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e09a      	b.n	80023fe <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	335d      	adds	r3, #93	; 0x5d
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d00a      	beq.n	80022f4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	335d      	adds	r3, #93	; 0x5d
 80022ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d156      	bne.n	80023a2 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3358      	adds	r3, #88	; 0x58
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4403      	add	r3, r0
 8002316:	3358      	adds	r3, #88	; 0x58
 8002318:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3358      	adds	r3, #88	; 0x58
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d914      	bls.n	800235a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	3358      	adds	r3, #88	; 0x58
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	335c      	adds	r3, #92	; 0x5c
 8002354:	2204      	movs	r2, #4
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e009      	b.n	800236e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	335c      	adds	r3, #92	; 0x5c
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002384:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800238c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e02d      	b.n	80023fe <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	335d      	adds	r3, #93	; 0x5d
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d122      	bne.n	80023fe <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	335c      	adds	r3, #92	; 0x5c
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	461a      	mov	r2, r3
 800240c:	2302      	movs	r3, #2
 800240e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	b2d8      	uxtb	r0, r3
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	335c      	adds	r3, #92	; 0x5c
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	4601      	mov	r1, r0
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f004 f992 	bl	8006754 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002430:	e0d1      	b.n	80025d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d13e      	bne.n	80024c6 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	0151      	lsls	r1, r2, #5
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	440a      	add	r2, r1
 800245e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	3358      	adds	r3, #88	; 0x58
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1c59      	adds	r1, r3, #1
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4403      	add	r3, r0
 800248a:	3358      	adds	r3, #88	; 0x58
 800248c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	335d      	adds	r3, #93	; 0x5d
 800249e:	2206      	movs	r2, #6
 80024a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fe68 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	461a      	mov	r2, r3
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	6093      	str	r3, [r2, #8]
}
 80024c4:	e087      	b.n	80025d6 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d17c      	bne.n	80025d6 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	333f      	adds	r3, #63	; 0x3f
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d122      	bne.n	8002538 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	3358      	adds	r3, #88	; 0x58
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	0151      	lsls	r1, r2, #5
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	440a      	add	r2, r1
 800251c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fe26 	bl	8005182 <USB_HC_Halt>
 8002536:	e045      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	333f      	adds	r3, #63	; 0x3f
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	440b      	add	r3, r1
 800255c:	333f      	adds	r3, #63	; 0x3f
 800255e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002560:	2b02      	cmp	r3, #2
 8002562:	d12f      	bne.n	80025c4 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	3358      	adds	r3, #88	; 0x58
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d121      	bne.n	80025c4 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	440b      	add	r3, r1
 800258e:	335d      	adds	r3, #93	; 0x5d
 8002590:	2203      	movs	r2, #3
 8002592:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	0151      	lsls	r1, r2, #5
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	440a      	add	r2, r1
 80025aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fddf 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	461a      	mov	r2, r3
 80025d2:	2310      	movs	r3, #16
 80025d4:	6093      	str	r3, [r2, #8]
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d119      	bne.n	8002642 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	461a      	mov	r2, r3
 800261c:	2304      	movs	r3, #4
 800261e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	440a      	add	r2, r1
 8002636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002640:	e33e      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b20      	cmp	r3, #32
 8002656:	d141      	bne.n	80026dc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2320      	movs	r3, #32
 8002668:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	333d      	adds	r3, #61	; 0x3d
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	f040 831f 	bne.w	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	333d      	adds	r3, #61	; 0x3d
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	335c      	adds	r3, #92	; 0x5c
 80026a6:	2202      	movs	r2, #2
 80026a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	0151      	lsls	r1, r2, #5
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	440a      	add	r2, r1
 80026c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fd54 	bl	8005182 <USB_HC_Halt>
}
 80026da:	e2f1      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d13f      	bne.n	8002772 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	335d      	adds	r3, #93	; 0x5d
 8002702:	2204      	movs	r2, #4
 8002704:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	333d      	adds	r3, #61	; 0x3d
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	3358      	adds	r3, #88	; 0x58
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	440a      	add	r2, r1
 8002744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fd12 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2340      	movs	r3, #64	; 0x40
 800276e:	6093      	str	r3, [r2, #8]
}
 8002770:	e2a6      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002788:	d122      	bne.n	80027d0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	0151      	lsls	r1, r2, #5
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	440a      	add	r2, r1
 80027a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 fce4 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	461a      	mov	r2, r3
 80027c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027cc:	6093      	str	r3, [r2, #8]
}
 80027ce:	e277      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d135      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	3358      	adds	r3, #88	; 0x58
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	0151      	lsls	r1, r2, #5
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	440a      	add	r2, r1
 8002810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fcac 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	461a      	mov	r2, r3
 8002838:	2301      	movs	r3, #1
 800283a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	335d      	adds	r3, #93	; 0x5d
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
}
 8002850:	e236      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d12b      	bne.n	80028c0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	2308      	movs	r3, #8
 8002878:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	0151      	lsls	r1, r2, #5
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	440a      	add	r2, r1
 8002890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fc6c 	bl	8005182 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	335d      	adds	r3, #93	; 0x5d
 80028ba:	2205      	movs	r2, #5
 80028bc:	701a      	strb	r2, [r3, #0]
}
 80028be:	e1ff      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d155      	bne.n	8002982 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	3358      	adds	r3, #88	; 0x58
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	335d      	adds	r3, #93	; 0x5d
 80028fa:	2203      	movs	r2, #3
 80028fc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	333d      	adds	r3, #61	; 0x3d
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d114      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	333c      	adds	r3, #60	; 0x3c
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	333d      	adds	r3, #61	; 0x3d
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	0151      	lsls	r1, r2, #5
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	440a      	add	r2, r1
 8002954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f002 fc0a 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	2310      	movs	r3, #16
 800297e:	6093      	str	r3, [r2, #8]
}
 8002980:	e19e      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d12b      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fbdd 	bl	8005182 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	335d      	adds	r3, #93	; 0x5d
 80029d8:	2206      	movs	r2, #6
 80029da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	6093      	str	r3, [r2, #8]
}
 80029ee:	e167      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a06:	d135      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	0151      	lsls	r1, r2, #5
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	440a      	add	r2, r1
 8002a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 fba5 	bl	8005182 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	461a      	mov	r2, r3
 8002a46:	2310      	movs	r3, #16
 8002a48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	461a      	mov	r2, r3
 8002a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	335d      	adds	r3, #93	; 0x5d
 8002a6e:	2208      	movs	r2, #8
 8002a70:	701a      	strb	r2, [r3, #0]
}
 8002a72:	e125      	b.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	f040 811a 	bne.w	8002cc0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	0151      	lsls	r1, r2, #5
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa6:	f023 0302 	bic.w	r3, r3, #2
 8002aaa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	335d      	adds	r3, #93	; 0x5d
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d137      	bne.n	8002b32 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	335c      	adds	r3, #92	; 0x5c
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	333f      	adds	r3, #63	; 0x3f
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d00b      	beq.n	8002b04 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	333f      	adds	r3, #63	; 0x3f
 8002afc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	f040 80c5 	bne.w	8002c8e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3351      	adds	r3, #81	; 0x51
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2d8      	uxtb	r0, r3
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3351      	adds	r3, #81	; 0x51
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e0ad      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	335d      	adds	r3, #93	; 0x5d
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d10a      	bne.n	8002b5e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e097      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	335d      	adds	r3, #93	; 0x5d
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d10a      	bne.n	8002b8a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e081      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	335d      	adds	r3, #93	; 0x5d
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d10a      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	335c      	adds	r3, #92	; 0x5c
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e06b      	b.n	8002c8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	335d      	adds	r3, #93	; 0x5d
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	d00a      	beq.n	8002be2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	335d      	adds	r3, #93	; 0x5d
 8002bdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d155      	bne.n	8002c8e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3358      	adds	r3, #88	; 0x58
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	1c59      	adds	r1, r3, #1
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4403      	add	r3, r0
 8002c04:	3358      	adds	r3, #88	; 0x58
 8002c06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3358      	adds	r3, #88	; 0x58
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d914      	bls.n	8002c48 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3358      	adds	r3, #88	; 0x58
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	335c      	adds	r3, #92	; 0x5c
 8002c42:	2204      	movs	r2, #4
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e009      	b.n	8002c5c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	335c      	adds	r3, #92	; 0x5c
 8002c58:	2202      	movs	r2, #2
 8002c5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	b2d8      	uxtb	r0, r3
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	335c      	adds	r3, #92	; 0x5c
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4601      	mov	r1, r0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f003 fd4a 	bl	8006754 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	0c5b      	lsrs	r3, r3, #17
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d003      	beq.n	8002d0c <HCD_RXQLVL_IRQHandler+0x44>
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	f000 8082 	beq.w	8002e0e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d0a:	e083      	b.n	8002e14 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07f      	beq.n	8002e12 <HCD_RXQLVL_IRQHandler+0x14a>
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3344      	adds	r3, #68	; 0x44
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d074      	beq.n	8002e12 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3344      	adds	r3, #68	; 0x44
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	b292      	uxth	r2, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f001 fdff 	bl	8004946 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	3344      	adds	r3, #68	; 0x44
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	18d1      	adds	r1, r2, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4403      	add	r3, r0
 8002d6c:	3344      	adds	r3, #68	; 0x44
 8002d6e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	334c      	adds	r3, #76	; 0x4c
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	18d1      	adds	r1, r2, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4403      	add	r3, r0
 8002d94:	334c      	adds	r3, #76	; 0x4c
 8002d96:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HCD_RXQLVL_IRQHandler+0x154>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d031      	beq.n	8002e12 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dc4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dcc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	440b      	add	r3, r1
 8002dee:	3350      	adds	r3, #80	; 0x50
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2d8      	uxtb	r0, r3
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3350      	adds	r3, #80	; 0x50
 8002e08:	4602      	mov	r2, r0
 8002e0a:	701a      	strb	r2, [r3, #0]
      break;
 8002e0c:	e001      	b.n	8002e12 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e12:	bf00      	nop
  }
}
 8002e14:	bf00      	nop
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	1ff80000 	.word	0x1ff80000

08002e20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e4c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d113      	bne.n	8002e80 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10a      	bne.n	8002e78 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002e70:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f003 fc52 	bl	800671c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d147      	bne.n	8002f1a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d129      	bne.n	8002ef0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d113      	bne.n	8002ecc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002eaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eae:	d106      	bne.n	8002ebe <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fe80 	bl	8004bbc <USB_InitFSLSPClkSel>
 8002ebc:	e011      	b.n	8002ee2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fe79 	bl	8004bbc <USB_InitFSLSPClkSel>
 8002eca:	e00a      	b.n	8002ee2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eda:	461a      	mov	r2, r3
 8002edc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ee0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f003 fc44 	bl	8006770 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f003 fc17 	bl	800671c <HAL_HCD_Connect_Callback>
 8002eee:	e014      	b.n	8002f1a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f003 fc4b 	bl	800678c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002f04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f08:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d103      	bne.n	8002f2c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f043 0320 	orr.w	r3, r3, #32
 8002f2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e11f      	b.n	8003192 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fe3a 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2224      	movs	r2, #36	; 0x24
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f001 f9de 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8002fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4a7b      	ldr	r2, [pc, #492]	; (800319c <HAL_I2C_Init+0x25c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d807      	bhi.n	8002fc4 <HAL_I2C_Init+0x84>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a7a      	ldr	r2, [pc, #488]	; (80031a0 <HAL_I2C_Init+0x260>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	bf94      	ite	ls
 8002fbc:	2301      	movls	r3, #1
 8002fbe:	2300      	movhi	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e006      	b.n	8002fd2 <HAL_I2C_Init+0x92>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a77      	ldr	r2, [pc, #476]	; (80031a4 <HAL_I2C_Init+0x264>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bf94      	ite	ls
 8002fcc:	2301      	movls	r3, #1
 8002fce:	2300      	movhi	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0db      	b.n	8003192 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <HAL_I2C_Init+0x268>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0c9b      	lsrs	r3, r3, #18
 8002fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a64      	ldr	r2, [pc, #400]	; (800319c <HAL_I2C_Init+0x25c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d802      	bhi.n	8003014 <HAL_I2C_Init+0xd4>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3301      	adds	r3, #1
 8003012:	e009      	b.n	8003028 <HAL_I2C_Init+0xe8>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_I2C_Init+0x26c>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	3301      	adds	r3, #1
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	430b      	orrs	r3, r1
 800302e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800303a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4956      	ldr	r1, [pc, #344]	; (800319c <HAL_I2C_Init+0x25c>)
 8003044:	428b      	cmp	r3, r1
 8003046:	d80d      	bhi.n	8003064 <HAL_I2C_Init+0x124>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e59      	subs	r1, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fbb1 f3f3 	udiv	r3, r1, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b04      	cmp	r3, #4
 800305e:	bf38      	it	cc
 8003060:	2304      	movcc	r3, #4
 8003062:	e04f      	b.n	8003104 <HAL_I2C_Init+0x1c4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <HAL_I2C_Init+0x150>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	e012      	b.n	80030b6 <HAL_I2C_Init+0x176>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e58      	subs	r0, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	0099      	lsls	r1, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Init+0x17e>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e022      	b.n	8003104 <HAL_I2C_Init+0x1c4>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10e      	bne.n	80030e4 <HAL_I2C_Init+0x1a4>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1e58      	subs	r0, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6859      	ldr	r1, [r3, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	440b      	add	r3, r1
 80030d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e2:	e00f      	b.n	8003104 <HAL_I2C_Init+0x1c4>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e58      	subs	r0, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	0099      	lsls	r1, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	6809      	ldr	r1, [r1, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6911      	ldr	r1, [r2, #16]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68d2      	ldr	r2, [r2, #12]
 800313e:	4311      	orrs	r1, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	430b      	orrs	r3, r1
 8003146:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	000186a0 	.word	0x000186a0
 80031a0:	001e847f 	.word	0x001e847f
 80031a4:	003d08ff 	.word	0x003d08ff
 80031a8:	431bde83 	.word	0x431bde83
 80031ac:	10624dd3 	.word	0x10624dd3

080031b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e128      	b.n	8003414 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a90      	ldr	r2, [pc, #576]	; (800341c <HAL_I2S_Init+0x26c>)
 80031da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd fd47 	bl	8000c70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031f8:	f023 030f 	bic.w	r3, r3, #15
 80031fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2202      	movs	r2, #2
 8003204:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d060      	beq.n	80032d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003216:	2310      	movs	r3, #16
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e001      	b.n	8003220 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b20      	cmp	r3, #32
 8003226:	d802      	bhi.n	800322e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800322e:	2001      	movs	r0, #1
 8003230:	f001 f99c 	bl	800456c <HAL_RCCEx_GetPeriphCLKFreq>
 8003234:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323e:	d125      	bne.n	800328c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	3305      	adds	r3, #5
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e01f      	b.n	80032aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	fbb2 f2f3 	udiv	r2, r2, r3
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	3305      	adds	r3, #5
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	e00e      	b.n	80032aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	fbb2 f2f3 	udiv	r2, r2, r3
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	3305      	adds	r3, #5
 80032a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4a5c      	ldr	r2, [pc, #368]	; (8003420 <HAL_I2S_Init+0x270>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	08db      	lsrs	r3, r3, #3
 80032b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e003      	b.n	80032d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d902      	bls.n	80032e4 <HAL_I2S_Init+0x134>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2bff      	cmp	r3, #255	; 0xff
 80032e2:	d907      	bls.n	80032f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f043 0210 	orr.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e08f      	b.n	8003414 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	ea42 0103 	orr.w	r1, r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	430a      	orrs	r2, r1
 8003306:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003312:	f023 030f 	bic.w	r3, r3, #15
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6851      	ldr	r1, [r2, #4]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6892      	ldr	r2, [r2, #8]
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68d2      	ldr	r2, [r2, #12]
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6992      	ldr	r2, [r2, #24]
 800332a:	430a      	orrs	r2, r1
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003336:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d161      	bne.n	8003404 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a38      	ldr	r2, [pc, #224]	; (8003424 <HAL_I2S_Init+0x274>)
 8003344:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a37      	ldr	r2, [pc, #220]	; (8003428 <HAL_I2S_Init+0x278>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d101      	bne.n	8003354 <HAL_I2S_Init+0x1a4>
 8003350:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_I2S_Init+0x27c>)
 8003352:	e001      	b.n	8003358 <HAL_I2S_Init+0x1a8>
 8003354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4932      	ldr	r1, [pc, #200]	; (8003428 <HAL_I2S_Init+0x278>)
 8003360:	428a      	cmp	r2, r1
 8003362:	d101      	bne.n	8003368 <HAL_I2S_Init+0x1b8>
 8003364:	4a31      	ldr	r2, [pc, #196]	; (800342c <HAL_I2S_Init+0x27c>)
 8003366:	e001      	b.n	800336c <HAL_I2S_Init+0x1bc>
 8003368:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800336c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003370:	f023 030f 	bic.w	r3, r3, #15
 8003374:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_I2S_Init+0x278>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_I2S_Init+0x1d4>
 8003380:	4b2a      	ldr	r3, [pc, #168]	; (800342c <HAL_I2S_Init+0x27c>)
 8003382:	e001      	b.n	8003388 <HAL_I2S_Init+0x1d8>
 8003384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003388:	2202      	movs	r2, #2
 800338a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a25      	ldr	r2, [pc, #148]	; (8003428 <HAL_I2S_Init+0x278>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_I2S_Init+0x1ea>
 8003396:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_I2S_Init+0x27c>)
 8003398:	e001      	b.n	800339e <HAL_I2S_Init+0x1ee>
 800339a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033aa:	d003      	beq.n	80033b4 <HAL_I2S_Init+0x204>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e001      	b.n	80033c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033bc:	2300      	movs	r3, #0
 80033be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	b299      	uxth	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80033d6:	4303      	orrs	r3, r0
 80033d8:	b29b      	uxth	r3, r3
 80033da:	430b      	orrs	r3, r1
 80033dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80033de:	4313      	orrs	r3, r2
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <HAL_I2S_Init+0x278>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_I2S_Init+0x24c>
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_I2S_Init+0x27c>)
 80033fa:	e001      	b.n	8003400 <HAL_I2S_Init+0x250>
 80033fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003400:	897a      	ldrh	r2, [r7, #10]
 8003402:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	08003527 	.word	0x08003527
 8003420:	cccccccd 	.word	0xcccccccd
 8003424:	0800363d 	.word	0x0800363d
 8003428:	40003800 	.word	0x40003800
 800342c:	40003400 	.word	0x40003400

08003430 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10e      	bne.n	80034c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffb8 	bl	8003430 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	b292      	uxth	r2, r2
 80034dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10e      	bne.n	800351e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff93 	bl	8003444 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b04      	cmp	r3, #4
 8003540:	d13a      	bne.n	80035b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d109      	bne.n	8003560 <I2S_IRQHandler+0x3a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d102      	bne.n	8003560 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ffb4 	bl	80034c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d126      	bne.n	80035b8 <I2S_IRQHandler+0x92>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d11f      	bne.n	80035b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003586:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f043 0202 	orr.w	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff50 	bl	8003458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d136      	bne.n	8003632 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d109      	bne.n	80035e2 <I2S_IRQHandler+0xbc>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d102      	bne.n	80035e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff45 	bl	800346c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d122      	bne.n	8003632 <I2S_IRQHandler+0x10c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d11b      	bne.n	8003632 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003608:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff13 	bl	8003458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4aa2      	ldr	r2, [pc, #648]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003656:	4ba2      	ldr	r3, [pc, #648]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003658:	e001      	b.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800365a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a9b      	ldr	r2, [pc, #620]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003674:	4b9a      	ldr	r3, [pc, #616]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003676:	e001      	b.n	800367c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003688:	d004      	beq.n	8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 8099 	bne.w	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d107      	bne.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f925 	bl	80038f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f9c8 	bl	8003a58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d13a      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d035      	beq.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a7e      	ldr	r2, [pc, #504]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036e6:	4b7e      	ldr	r3, [pc, #504]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036e8:	e001      	b.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4979      	ldr	r1, [pc, #484]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036f6:	428b      	cmp	r3, r1
 80036f8:	d101      	bne.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036fc:	e001      	b.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003702:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003706:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003716:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fe88 	bl	8003458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	f040 80be 	bne.w	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80b8 	beq.w	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800376e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a59      	ldr	r2, [pc, #356]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800377a:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800377c:	e001      	b.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800377e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4954      	ldr	r1, [pc, #336]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800378a:	428b      	cmp	r3, r1
 800378c:	d101      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800378e:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003790:	e001      	b.n	8003796 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800379a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fe4a 	bl	8003458 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037c4:	e084      	b.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d107      	bne.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8be 	bl	800395c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8fd 	bl	80039f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d12f      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02a      	beq.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2e      	ldr	r2, [pc, #184]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800382a:	e001      	b.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800382c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4929      	ldr	r1, [pc, #164]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003838:	428b      	cmp	r3, r1
 800383a:	d101      	bne.n	8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800383c:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800383e:	e001      	b.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003844:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003848:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0202 	orr.w	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fdfa 	bl	8003458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d131      	bne.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02c      	beq.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003884:	e001      	b.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4912      	ldr	r1, [pc, #72]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003892:	428b      	cmp	r3, r1
 8003894:	d101      	bne.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003898:	e001      	b.n	800389e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800389a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038b2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fdc5 	bl	8003458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ce:	e000      	b.n	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038d0:	bf00      	nop
}
 80038d2:	bf00      	nop
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40003800 	.word	0x40003800
 80038e0:	40003400 	.word	0x40003400

080038e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c99      	adds	r1, r3, #2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6251      	str	r1, [r2, #36]	; 0x24
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d113      	bne.n	8003952 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003938:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ffc9 	bl	80038e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c99      	adds	r1, r3, #2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6251      	str	r1, [r2, #36]	; 0x24
 800396e:	8819      	ldrh	r1, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <I2SEx_TxISR_I2SExt+0x90>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <I2SEx_TxISR_I2SExt+0x22>
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <I2SEx_TxISR_I2SExt+0x94>)
 800397c:	e001      	b.n	8003982 <I2SEx_TxISR_I2SExt+0x26>
 800397e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003982:	460a      	mov	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d121      	bne.n	80039e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a12      	ldr	r2, [pc, #72]	; (80039ec <I2SEx_TxISR_I2SExt+0x90>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <I2SEx_TxISR_I2SExt+0x50>
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <I2SEx_TxISR_I2SExt+0x94>)
 80039aa:	e001      	b.n	80039b0 <I2SEx_TxISR_I2SExt+0x54>
 80039ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	490d      	ldr	r1, [pc, #52]	; (80039ec <I2SEx_TxISR_I2SExt+0x90>)
 80039b8:	428b      	cmp	r3, r1
 80039ba:	d101      	bne.n	80039c0 <I2SEx_TxISR_I2SExt+0x64>
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <I2SEx_TxISR_I2SExt+0x94>)
 80039be:	e001      	b.n	80039c4 <I2SEx_TxISR_I2SExt+0x68>
 80039c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff81 	bl	80038e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40003800 	.word	0x40003800
 80039f0:	40003400 	.word	0x40003400

080039f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68d8      	ldr	r0, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	1c99      	adds	r1, r3, #2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a0c:	b282      	uxth	r2, r0
 8003a0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d113      	bne.n	8003a50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ff4a 	bl	80038e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <I2SEx_RxISR_I2SExt+0x90>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <I2SEx_RxISR_I2SExt+0x16>
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <I2SEx_RxISR_I2SExt+0x94>)
 8003a6c:	e001      	b.n	8003a72 <I2SEx_RxISR_I2SExt+0x1a>
 8003a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a72:	68d8      	ldr	r0, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	1c99      	adds	r1, r3, #2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a7e:	b282      	uxth	r2, r0
 8003a80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d121      	bne.n	8003ade <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <I2SEx_RxISR_I2SExt+0x90>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <I2SEx_RxISR_I2SExt+0x50>
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <I2SEx_RxISR_I2SExt+0x94>)
 8003aa6:	e001      	b.n	8003aac <I2SEx_RxISR_I2SExt+0x54>
 8003aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <I2SEx_RxISR_I2SExt+0x90>)
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	d101      	bne.n	8003abc <I2SEx_RxISR_I2SExt+0x64>
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <I2SEx_RxISR_I2SExt+0x94>)
 8003aba:	e001      	b.n	8003ac0 <I2SEx_RxISR_I2SExt+0x68>
 8003abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff03 	bl	80038e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40003800 	.word	0x40003800
 8003aec:	40003400 	.word	0x40003400

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e25b      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d075      	beq.n	8003bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0e:	4ba3      	ldr	r3, [pc, #652]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1a:	4ba0      	ldr	r3, [pc, #640]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d112      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b26:	4b9d      	ldr	r3, [pc, #628]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	4b99      	ldr	r3, [pc, #612]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05b      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x108>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d157      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e236      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x74>
 8003b56:	4b91      	ldr	r3, [pc, #580]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a90      	ldr	r2, [pc, #576]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e01d      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x98>
 8003b6e:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a8a      	ldr	r2, [pc, #552]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a87      	ldr	r2, [pc, #540]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b88:	4b84      	ldr	r3, [pc, #528]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a83      	ldr	r2, [pc, #524]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a80      	ldr	r2, [pc, #512]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fa8a 	bl	80010c0 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fa86 	bl	80010c0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e1fb      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b76      	ldr	r3, [pc, #472]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xc0>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fa76 	bl	80010c0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fa72 	bl	80010c0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1e7      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	4b6c      	ldr	r3, [pc, #432]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xe8>
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d063      	beq.n	8003cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c06:	4b65      	ldr	r3, [pc, #404]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c12:	4b62      	ldr	r3, [pc, #392]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d11c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b5f      	ldr	r3, [pc, #380]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d116      	bne.n	8003c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_RCC_OscConfig+0x152>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e1bb      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c42:	4b56      	ldr	r3, [pc, #344]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4952      	ldr	r1, [pc, #328]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	e03a      	b.n	8003cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c60:	4b4f      	ldr	r3, [pc, #316]	; (8003da0 <HAL_RCC_OscConfig+0x2b0>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fd fa2b 	bl	80010c0 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fd fa27 	bl	80010c0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e19c      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c80:	4b46      	ldr	r3, [pc, #280]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8c:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4940      	ldr	r1, [pc, #256]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
 8003ca0:	e015      	b.n	8003cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca2:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <HAL_RCC_OscConfig+0x2b0>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fa0a 	bl	80010c0 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fd fa06 	bl	80010c0 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e17b      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d030      	beq.n	8003d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce2:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <HAL_RCC_OscConfig+0x2b4>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd f9ea 	bl	80010c0 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fd f9e6 	bl	80010c0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e15b      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d02:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x200>
 8003d0e:	e015      	b.n	8003d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d10:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_RCC_OscConfig+0x2b4>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fd f9d3 	bl	80010c0 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fd f9cf 	bl	80010c0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e144      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80a0 	beq.w	8003e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_OscConfig+0x2b8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d121      	bne.n	8003dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <HAL_RCC_OscConfig+0x2b8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a07      	ldr	r2, [pc, #28]	; (8003da8 <HAL_RCC_OscConfig+0x2b8>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fd f995 	bl	80010c0 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	e011      	b.n	8003dbe <HAL_RCC_OscConfig+0x2ce>
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	42470000 	.word	0x42470000
 8003da4:	42470e80 	.word	0x42470e80
 8003da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd f988 	bl	80010c0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e0fd      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCC_OscConfig+0x2f0>
 8003dd2:	4b7d      	ldr	r3, [pc, #500]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a7c      	ldr	r2, [pc, #496]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	e01c      	b.n	8003e1a <HAL_RCC_OscConfig+0x32a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCC_OscConfig+0x312>
 8003de8:	4b77      	ldr	r3, [pc, #476]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a76      	ldr	r2, [pc, #472]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003dee:	f043 0304 	orr.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	4b74      	ldr	r3, [pc, #464]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	4a73      	ldr	r2, [pc, #460]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003e00:	e00b      	b.n	8003e1a <HAL_RCC_OscConfig+0x32a>
 8003e02:	4b71      	ldr	r3, [pc, #452]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a70      	ldr	r2, [pc, #448]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	4b6e      	ldr	r3, [pc, #440]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a6d      	ldr	r2, [pc, #436]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d015      	beq.n	8003e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd f94d 	bl	80010c0 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fd f949 	bl	80010c0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0bc      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b61      	ldr	r3, [pc, #388]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ee      	beq.n	8003e2a <HAL_RCC_OscConfig+0x33a>
 8003e4c:	e014      	b.n	8003e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd f937 	bl	80010c0 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd f933 	bl	80010c0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0a6      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b52      	ldr	r3, [pc, #328]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a51      	ldr	r2, [pc, #324]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8092 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e94:	4b4c      	ldr	r3, [pc, #304]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d05c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d141      	bne.n	8003f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea8:	4b48      	ldr	r3, [pc, #288]	; (8003fcc <HAL_RCC_OscConfig+0x4dc>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eae:	f7fd f907 	bl	80010c0 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb6:	f7fd f903 	bl	80010c0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e078      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec8:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f0      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	019b      	lsls	r3, r3, #6
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	3b01      	subs	r3, #1
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	4933      	ldr	r1, [pc, #204]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efe:	4b33      	ldr	r3, [pc, #204]	; (8003fcc <HAL_RCC_OscConfig+0x4dc>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fd f8dc 	bl	80010c0 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd f8d8 	bl	80010c0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e04d      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x41c>
 8003f2a:	e045      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2c:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <HAL_RCC_OscConfig+0x4dc>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fd f8c5 	bl	80010c0 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fd f8c1 	bl	80010c0 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e036      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4c:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x44a>
 8003f58:	e02e      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e029      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <HAL_RCC_OscConfig+0x4d8>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d11c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d115      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f8e:	4013      	ands	r3, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d106      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	42470060 	.word	0x42470060

08003fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0cc      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b68      	ldr	r3, [pc, #416]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d90c      	bls.n	800400c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b63      	ldr	r3, [pc, #396]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b8      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004024:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a58      	ldr	r2, [pc, #352]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800402e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b50      	ldr	r3, [pc, #320]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	494d      	ldr	r1, [pc, #308]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d044      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d119      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408a:	2b03      	cmp	r3, #3
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e067      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4934      	ldr	r1, [pc, #208]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c0:	f7fc fffe 	bl	80010c0 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	e00a      	b.n	80040de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c8:	f7fc fffa 	bl	80010c0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e04f      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 020c 	and.w	r2, r3, #12
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1eb      	bne.n	80040c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d20c      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e032      	b.n	800417e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4916      	ldr	r1, [pc, #88]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	490e      	ldr	r1, [pc, #56]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004156:	f000 f821 	bl	800419c <HAL_RCC_GetSysClockFreq>
 800415a:	4601      	mov	r1, r0
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	5cd3      	ldrb	r3, [r2, r3]
 800416a:	fa21 f303 	lsr.w	r3, r1, r3
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc ff5e 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023c00 	.word	0x40023c00
 800418c:	40023800 	.word	0x40023800
 8004190:	08006d10 	.word	0x08006d10
 8004194:	20000018 	.word	0x20000018
 8004198:	2000001c 	.word	0x2000001c

0800419c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800419c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	2300      	movs	r3, #0
 80041ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b2:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d007      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0x32>
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d008      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x38>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 80b4 	bne.w	8004330 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b5e      	ldr	r3, [pc, #376]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041ca:	60bb      	str	r3, [r7, #8]
       break;
 80041cc:	e0b3      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ce:	4b5e      	ldr	r3, [pc, #376]	; (8004348 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80041d0:	60bb      	str	r3, [r7, #8]
      break;
 80041d2:	e0b0      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d4:	4b5a      	ldr	r3, [pc, #360]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041de:	4b58      	ldr	r3, [pc, #352]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d04a      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b55      	ldr	r3, [pc, #340]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	f04f 0400 	mov.w	r4, #0
 80041f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	ea03 0501 	and.w	r5, r3, r1
 8004200:	ea04 0602 	and.w	r6, r4, r2
 8004204:	4629      	mov	r1, r5
 8004206:	4632      	mov	r2, r6
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	f04f 0400 	mov.w	r4, #0
 8004210:	0154      	lsls	r4, r2, #5
 8004212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004216:	014b      	lsls	r3, r1, #5
 8004218:	4619      	mov	r1, r3
 800421a:	4622      	mov	r2, r4
 800421c:	1b49      	subs	r1, r1, r5
 800421e:	eb62 0206 	sbc.w	r2, r2, r6
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	f04f 0400 	mov.w	r4, #0
 800422a:	0194      	lsls	r4, r2, #6
 800422c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004230:	018b      	lsls	r3, r1, #6
 8004232:	1a5b      	subs	r3, r3, r1
 8004234:	eb64 0402 	sbc.w	r4, r4, r2
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	00e2      	lsls	r2, r4, #3
 8004242:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004246:	00d9      	lsls	r1, r3, #3
 8004248:	460b      	mov	r3, r1
 800424a:	4614      	mov	r4, r2
 800424c:	195b      	adds	r3, r3, r5
 800424e:	eb44 0406 	adc.w	r4, r4, r6
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	0262      	lsls	r2, r4, #9
 800425c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004260:	0259      	lsls	r1, r3, #9
 8004262:	460b      	mov	r3, r1
 8004264:	4614      	mov	r4, r2
 8004266:	4618      	mov	r0, r3
 8004268:	4621      	mov	r1, r4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f04f 0400 	mov.w	r4, #0
 8004270:	461a      	mov	r2, r3
 8004272:	4623      	mov	r3, r4
 8004274:	f7fb ffb0 	bl	80001d8 <__aeabi_uldivmod>
 8004278:	4603      	mov	r3, r0
 800427a:	460c      	mov	r4, r1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e049      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004280:	4b2f      	ldr	r3, [pc, #188]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	f04f 0400 	mov.w	r4, #0
 800428a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	ea03 0501 	and.w	r5, r3, r1
 8004296:	ea04 0602 	and.w	r6, r4, r2
 800429a:	4629      	mov	r1, r5
 800429c:	4632      	mov	r2, r6
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	0154      	lsls	r4, r2, #5
 80042a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ac:	014b      	lsls	r3, r1, #5
 80042ae:	4619      	mov	r1, r3
 80042b0:	4622      	mov	r2, r4
 80042b2:	1b49      	subs	r1, r1, r5
 80042b4:	eb62 0206 	sbc.w	r2, r2, r6
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	f04f 0400 	mov.w	r4, #0
 80042c0:	0194      	lsls	r4, r2, #6
 80042c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042c6:	018b      	lsls	r3, r1, #6
 80042c8:	1a5b      	subs	r3, r3, r1
 80042ca:	eb64 0402 	sbc.w	r4, r4, r2
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	00e2      	lsls	r2, r4, #3
 80042d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042dc:	00d9      	lsls	r1, r3, #3
 80042de:	460b      	mov	r3, r1
 80042e0:	4614      	mov	r4, r2
 80042e2:	195b      	adds	r3, r3, r5
 80042e4:	eb44 0406 	adc.w	r4, r4, r6
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	02a2      	lsls	r2, r4, #10
 80042f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042f6:	0299      	lsls	r1, r3, #10
 80042f8:	460b      	mov	r3, r1
 80042fa:	4614      	mov	r4, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	4621      	mov	r1, r4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f04f 0400 	mov.w	r4, #0
 8004306:	461a      	mov	r2, r3
 8004308:	4623      	mov	r3, r4
 800430a:	f7fb ff65 	bl	80001d8 <__aeabi_uldivmod>
 800430e:	4603      	mov	r3, r0
 8004310:	460c      	mov	r4, r1
 8004312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	60bb      	str	r3, [r7, #8]
      break;
 800432e:	e002      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004332:	60bb      	str	r3, [r7, #8]
      break;
 8004334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004336:	68bb      	ldr	r3, [r7, #8]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	00f42400 	.word	0x00f42400
 8004348:	007a1200 	.word	0x007a1200

0800434c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <HAL_RCC_GetHCLKFreq+0x14>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000018 	.word	0x20000018

08004364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004368:	f7ff fff0 	bl	800434c <HAL_RCC_GetHCLKFreq>
 800436c:	4601      	mov	r1, r0
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	0a9b      	lsrs	r3, r3, #10
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4a03      	ldr	r2, [pc, #12]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800437a:	5cd3      	ldrb	r3, [r2, r3]
 800437c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	08006d20 	.word	0x08006d20

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d038      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b4:	4b68      	ldr	r3, [pc, #416]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ba:	f7fc fe81 	bl	80010c0 <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043c2:	f7fc fe7d 	bl	80010c0 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0bd      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043d4:	4b61      	ldr	r3, [pc, #388]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f0      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	071b      	lsls	r3, r3, #28
 80043f2:	495a      	ldr	r1, [pc, #360]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043fa:	4b57      	ldr	r3, [pc, #348]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004400:	f7fc fe5e 	bl	80010c0 <HAL_GetTick>
 8004404:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004408:	f7fc fe5a 	bl	80010c0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e09a      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441a:	4b50      	ldr	r3, [pc, #320]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8083 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	4b48      	ldr	r3, [pc, #288]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a47      	ldr	r2, [pc, #284]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004450:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a42      	ldr	r2, [pc, #264]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800445c:	f7fc fe30 	bl	80010c0 <HAL_GetTick>
 8004460:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004464:	f7fc fe2c 	bl	80010c0 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e06c      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004476:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004482:	4b36      	ldr	r3, [pc, #216]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02f      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d028      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a0:	4b2e      	ldr	r3, [pc, #184]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b0:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044b6:	4a29      	ldr	r2, [pc, #164]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d114      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fc fdfa 	bl	80010c0 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fc fdf6 	bl	80010c0 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e034      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ee      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044fe:	d10d      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004514:	4911      	ldr	r1, [pc, #68]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
 800451a:	e005      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a0e      	ldr	r2, [pc, #56]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004526:	6093      	str	r3, [r2, #8]
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004534:	4909      	ldr	r1, [pc, #36]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	4313      	orrs	r3, r2
 8004538:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7d1a      	ldrb	r2, [r3, #20]
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800454c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	42470068 	.word	0x42470068
 800455c:	40023800 	.word	0x40023800
 8004560:	40007000 	.word	0x40007000
 8004564:	42470e40 	.word	0x42470e40
 8004568:	424711e0 	.word	0x424711e0

0800456c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d13f      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004592:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d004      	beq.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800459a:	2b01      	cmp	r3, #1
 800459c:	d131      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a0:	617b      	str	r3, [r7, #20]
          break;
 80045a2:	e031      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045a4:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b0:	d109      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f2:	0f1b      	lsrs	r3, r3, #28
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	617b      	str	r3, [r7, #20]
          break;
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
          break;
 8004606:	bf00      	nop
        }
      }
      break;
 8004608:	bf00      	nop
    }
  }
  return frequency;
 800460a:	697b      	ldr	r3, [r7, #20]
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40023800 	.word	0x40023800
 800461c:	00bb8000 	.word	0x00bb8000
 8004620:	007a1200 	.word	0x007a1200
 8004624:	00f42400 	.word	0x00f42400

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e056      	b.n	80046e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fc fbd9 	bl	8000e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004670:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	ea42 0103 	orr.w	r1, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	f003 0104 	and.w	r1, r3, #4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046f0:	b084      	sub	sp, #16
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	f107 001c 	add.w	r0, r7, #28
 80046fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	2b01      	cmp	r3, #1
 8004706:	d122      	bne.n	800474e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800471c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f94a 	bl	80049dc <USB_CoreReset>
 8004748:	4603      	mov	r3, r0
 800474a:	73fb      	strb	r3, [r7, #15]
 800474c:	e01a      	b.n	8004784 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f93e 	bl	80049dc <USB_CoreReset>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
 8004776:	e005      	b.n	8004784 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	2b01      	cmp	r3, #1
 8004788:	d10b      	bne.n	80047a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f043 0206 	orr.w	r2, r3, #6
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f043 0220 	orr.w	r2, r3, #32
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ae:	b004      	add	sp, #16
 80047b0:	4770      	bx	lr

080047b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f023 0201 	bic.w	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d106      	bne.n	8004822 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]
 8004820:	e00b      	b.n	800483a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	e001      	b.n	800483a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e003      	b.n	8004842 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800483a:	2032      	movs	r0, #50	; 0x32
 800483c:	f7fc fc4c 	bl	80010d8 <HAL_Delay>

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <USB_FlushTxFifo+0x48>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d901      	bls.n	8004878 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e006      	b.n	8004886 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b20      	cmp	r3, #32
 8004882:	d0f0      	beq.n	8004866 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	00030d40 	.word	0x00030d40

08004898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2210      	movs	r2, #16
 80048a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <USB_FlushRxFifo+0x40>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d0f0      	beq.n	80048aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	00030d40 	.word	0x00030d40

080048dc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	; 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	460b      	mov	r3, r1
 80048ec:	71fb      	strb	r3, [r7, #7]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80048fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11a      	bne.n	8004938 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004902:	88bb      	ldrh	r3, [r7, #4]
 8004904:	3303      	adds	r3, #3
 8004906:	089b      	lsrs	r3, r3, #2
 8004908:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e00f      	b.n	8004930 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	031a      	lsls	r2, r3, #12
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	461a      	mov	r2, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	3304      	adds	r3, #4
 8004928:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	3301      	adds	r3, #1
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	d3eb      	bcc.n	8004910 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004946:	b480      	push	{r7}
 8004948:	b089      	sub	sp, #36	; 0x24
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	3303      	adds	r3, #3
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	e00b      	b.n	8004982 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	601a      	str	r2, [r3, #0]
    pDest++;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3304      	adds	r3, #4
 800497a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	3301      	adds	r3, #1
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d3ef      	bcc.n	800496a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800498a:	69fb      	ldr	r3, [r7, #28]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3724      	adds	r7, #36	; 0x24
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049b0:	68fb      	ldr	r3, [r7, #12]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0301 	and.w	r3, r3, #1
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <USB_CoreReset+0x64>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e01b      	b.n	8004a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	daf2      	bge.n	80049e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <USB_CoreReset+0x64>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e006      	b.n	8004a32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d0f0      	beq.n	8004a12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	00030d40 	.word	0x00030d40

08004a44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a44:	b084      	sub	sp, #16
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	f107 001c 	add.w	r0, r7, #28
 8004a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a60:	461a      	mov	r2, r3
 8004a62:	2300      	movs	r3, #0
 8004a64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d10a      	bne.n	8004ab2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aaa:	f043 0304 	orr.w	r3, r3, #4
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e014      	b.n	8004adc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e009      	b.n	8004adc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ad6:	f023 0304 	bic.w	r3, r3, #4
 8004ada:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004adc:	2110      	movs	r1, #16
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff feb4 	bl	800484c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fed7 	bl	8004898 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e015      	b.n	8004b1c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3e5      	bcc.n	8004af0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004b24:	2101      	movs	r1, #1
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f882 	bl	8004c30 <USB_DriveVbus>

  HAL_Delay(200U);
 8004b2c:	20c8      	movs	r0, #200	; 0xc8
 8004b2e:	f7fc fad3 	bl	80010d8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b3e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00b      	beq.n	8004b64 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <USB_HostInit+0x164>)
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a13      	ldr	r2, [pc, #76]	; (8004bac <USB_HostInit+0x168>)
 8004b5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b62:	e009      	b.n	8004b78 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <USB_HostInit+0x16c>)
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <USB_HostInit+0x170>)
 8004b74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d105      	bne.n	8004b8a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f043 0210 	orr.w	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <USB_HostInit+0x174>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ba2:	b004      	add	sp, #16
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	01000200 	.word	0x01000200
 8004bac:	00e00300 	.word	0x00e00300
 8004bb0:	00600080 	.word	0x00600080
 8004bb4:	004000e0 	.word	0x004000e0
 8004bb8:	a3200008 	.word	0xa3200008

08004bbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c04:	461a      	mov	r2, r3
 8004c06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c0a:	6053      	str	r3, [r2, #4]
 8004c0c:	e009      	b.n	8004c22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d106      	bne.n	8004c22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <USB_DriveVbus+0x44>
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d106      	bne.n	8004c74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d109      	bne.n	8004c94 <USB_DriveVbus+0x64>
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	b29b      	uxth	r3, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	4608      	mov	r0, r1
 8004cce:	4611      	mov	r1, r2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	70fb      	strb	r3, [r7, #3]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	70bb      	strb	r3, [r7, #2]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cf8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d87e      	bhi.n	8004e00 <USB_HC_Init+0x13c>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <USB_HC_Init+0x44>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004dc3 	.word	0x08004dc3
 8004d10:	08004d19 	.word	0x08004d19
 8004d14:	08004d85 	.word	0x08004d85
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d24:	461a      	mov	r2, r3
 8004d26:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	da10      	bge.n	8004d56 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d52:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004d54:	e057      	b.n	8004e06 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d051      	beq.n	8004e06 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d80:	60d3      	str	r3, [r2, #12]
      break;
 8004d82:	e040      	b.n	8004e06 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	461a      	mov	r2, r3
 8004d92:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	da34      	bge.n	8004e0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004dc0:	e023      	b.n	8004e0a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f240 2325 	movw	r3, #549	; 0x225
 8004dd4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da17      	bge.n	8004e0e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004dfc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004dfe:	e006      	b.n	8004e0e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
      break;
 8004e04:	e004      	b.n	8004e10 <USB_HC_Init+0x14c>
      break;
 8004e06:	bf00      	nop
 8004e08:	e002      	b.n	8004e10 <USB_HC_Init+0x14c>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e000      	b.n	8004e10 <USB_HC_Init+0x14c>
      break;
 8004e0e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	2101      	movs	r1, #1
 8004e20:	fa01 f303 	lsl.w	r3, r1, r3
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da03      	bge.n	8004e4a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e001      	b.n	8004e4e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d103      	bne.n	8004e5e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e001      	b.n	8004e62 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e62:	787b      	ldrb	r3, [r7, #1]
 8004e64:	059b      	lsls	r3, r3, #22
 8004e66:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e6a:	78bb      	ldrb	r3, [r7, #2]
 8004e6c:	02db      	lsls	r3, r3, #11
 8004e6e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e72:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e78:	049b      	lsls	r3, r3, #18
 8004e7a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e7e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	0159      	lsls	r1, r3, #5
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	440b      	add	r3, r1
 8004e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e98:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e9e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d10f      	bne.n	8004ec8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	; 0x30
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <USB_HC_StartXfer+0x7c>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	791b      	ldrb	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d124      	bne.n	8004f54 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <USB_HC_StartXfer+0x50>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	795b      	ldrb	r3, [r3, #5]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa2e 	bl	8005380 <USB_DoPing>
      return HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e112      	b.n	800514e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d112      	bne.n	8004f54 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	6a3a      	ldr	r2, [r7, #32]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004f4c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2200      	movs	r2, #0
 8004f52:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d018      	beq.n	8004f8e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	8912      	ldrh	r2, [r2, #8]
 8004f64:	4413      	add	r3, r2
 8004f66:	3b01      	subs	r3, #1
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	8912      	ldrh	r2, [r2, #8]
 8004f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f70:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f74:	8b7b      	ldrh	r3, [r7, #26]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d90b      	bls.n	8004f92 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004f7a:	8b7b      	ldrh	r3, [r7, #26]
 8004f7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004f7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	8912      	ldrh	r2, [r2, #8]
 8004f84:	fb02 f203 	mul.w	r2, r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	611a      	str	r2, [r3, #16]
 8004f8c:	e001      	b.n	8004f92 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	78db      	ldrb	r3, [r3, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004f9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	8912      	ldrh	r2, [r2, #8]
 8004fa0:	fb02 f203 	mul.w	r2, r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fb2:	04d9      	lsls	r1, r3, #19
 8004fb4:	4b68      	ldr	r3, [pc, #416]	; (8005158 <USB_HC_StartXfer+0x280>)
 8004fb6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	7a9b      	ldrb	r3, [r3, #10]
 8004fbe:	075b      	lsls	r3, r3, #29
 8004fc0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	0148      	lsls	r0, r1, #5
 8004fc8:	6a39      	ldr	r1, [r7, #32]
 8004fca:	4401      	add	r1, r0
 8004fcc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fd0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fd2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	68d9      	ldr	r1, [r3, #12]
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fea:	460a      	mov	r2, r1
 8004fec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	4413      	add	r3, r2
 800500e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	440a      	add	r2, r1
 800501c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005020:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005024:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	4413      	add	r3, r2
 800502e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	7e7b      	ldrb	r3, [r7, #25]
 8005036:	075b      	lsls	r3, r3, #29
 8005038:	69f9      	ldr	r1, [r7, #28]
 800503a:	0148      	lsls	r0, r1, #5
 800503c:	6a39      	ldr	r1, [r7, #32]
 800503e:	4401      	add	r1, r0
 8005040:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a41      	ldr	r2, [pc, #260]	; (800515c <USB_HC_StartXfer+0x284>)
 8005058:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800505a:	4b40      	ldr	r3, [pc, #256]	; (800515c <USB_HC_StartXfer+0x284>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005062:	4a3e      	ldr	r2, [pc, #248]	; (800515c <USB_HC_StartXfer+0x284>)
 8005064:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	78db      	ldrb	r3, [r3, #3]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d006      	beq.n	800507c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <USB_HC_StartXfer+0x284>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	4a39      	ldr	r2, [pc, #228]	; (800515c <USB_HC_StartXfer+0x284>)
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e005      	b.n	8005088 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800507c:	4b37      	ldr	r3, [pc, #220]	; (800515c <USB_HC_StartXfer+0x284>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005084:	4a35      	ldr	r2, [pc, #212]	; (800515c <USB_HC_StartXfer+0x284>)
 8005086:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005088:	4b34      	ldr	r3, [pc, #208]	; (800515c <USB_HC_StartXfer+0x284>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005090:	4a32      	ldr	r2, [pc, #200]	; (800515c <USB_HC_StartXfer+0x284>)
 8005092:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b2e      	ldr	r3, [pc, #184]	; (800515c <USB_HC_StartXfer+0x284>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d14e      	bne.n	800514c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	78db      	ldrb	r3, [r3, #3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d14a      	bne.n	800514c <USB_HC_StartXfer+0x274>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d046      	beq.n	800514c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	79db      	ldrb	r3, [r3, #7]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d830      	bhi.n	8005128 <USB_HC_StartXfer+0x250>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <USB_HC_StartXfer+0x1f4>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	08005101 	.word	0x08005101
 80050d4:	080050dd 	.word	0x080050dd
 80050d8:	08005101 	.word	0x08005101
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	3303      	adds	r3, #3
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050e6:	8afa      	ldrh	r2, [r7, #22]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d91c      	bls.n	800512c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f043 0220 	orr.w	r2, r3, #32
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	619a      	str	r2, [r3, #24]
          }
          break;
 80050fe:	e015      	b.n	800512c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	3303      	adds	r3, #3
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800510a:	8afa      	ldrh	r2, [r7, #22]
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	b29b      	uxth	r3, r3
 8005116:	429a      	cmp	r2, r3
 8005118:	d90a      	bls.n	8005130 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	619a      	str	r2, [r3, #24]
          }
          break;
 8005126:	e003      	b.n	8005130 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005128:	bf00      	nop
 800512a:	e002      	b.n	8005132 <USB_HC_StartXfer+0x25a>
          break;
 800512c:	bf00      	nop
 800512e:	e000      	b.n	8005132 <USB_HC_StartXfer+0x25a>
          break;
 8005130:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	68d9      	ldr	r1, [r3, #12]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	785a      	ldrb	r2, [r3, #1]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	b298      	uxth	r0, r3
 8005140:	2300      	movs	r3, #0
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	4603      	mov	r3, r0
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fbc8 	bl	80048dc <USB_WritePacket>
    }
  }

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3728      	adds	r7, #40	; 0x28
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	1ff80000 	.word	0x1ff80000
 800515c:	200000d4 	.word	0x200000d4

08005160 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	b29b      	uxth	r3, r3
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005182:	b480      	push	{r7}
 8005184:	b087      	sub	sp, #28
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	0c9b      	lsrs	r3, r3, #18
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <USB_HC_Halt+0x3a>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d16c      	bne.n	8005296 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051da:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d143      	bne.n	8005270 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005206:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	440a      	add	r2, r1
 800521e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005226:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	440a      	add	r2, r1
 800523e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005242:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005246:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3301      	adds	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005254:	d81d      	bhi.n	8005292 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526c:	d0ec      	beq.n	8005248 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800526e:	e080      	b.n	8005372 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	440a      	add	r2, r1
 8005286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800528a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800528e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005290:	e06f      	b.n	8005372 <USB_HC_Halt+0x1f0>
          break;
 8005292:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005294:	e06d      	b.n	8005372 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d143      	bne.n	800534e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005304:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4413      	add	r3, r2
 800530e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	440a      	add	r2, r1
 800531c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005320:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005324:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3301      	adds	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005332:	d81d      	bhi.n	8005370 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800534a:	d0ec      	beq.n	8005326 <USB_HC_Halt+0x1a4>
 800534c:	e011      	b.n	8005372 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	440a      	add	r2, r1
 8005364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e000      	b.n	8005372 <USB_HC_Halt+0x1f0>
          break;
 8005370:	bf00      	nop
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005394:	2301      	movs	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	04da      	lsls	r2, r3, #19
 800539c:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <USB_DoPing+0x74>)
 800539e:	4013      	ands	r3, r2
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	461a      	mov	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	1ff80000 	.word	0x1ff80000

080053f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff f9e3 	bl	80047d4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800540e:	2110      	movs	r1, #16
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff fa1b 	bl	800484c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fa3e 	bl	8004898 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e01f      	b.n	8005462 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005438:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005440:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005448:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005456:	461a      	mov	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	3301      	adds	r3, #1
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b0f      	cmp	r3, #15
 8005466:	d9dc      	bls.n	8005422 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005468:	2300      	movs	r3, #0
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	e034      	b.n	80054d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005484:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800548c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005494:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	461a      	mov	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3301      	adds	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b4:	d80c      	bhi.n	80054d0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054cc:	d0ec      	beq.n	80054a8 <USB_StopHost+0xb0>
 80054ce:	e000      	b.n	80054d2 <USB_StopHost+0xda>
        break;
 80054d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3301      	adds	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d9c7      	bls.n	800546e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e4:	461a      	mov	r2, r3
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054f2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff f95c 	bl	80047b2 <USB_EnableGlobalInt>

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b089      	sub	sp, #36	; 0x24
 8005508:	af04      	add	r7, sp, #16
 800550a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800550c:	2302      	movs	r3, #2
 800550e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005510:	2301      	movs	r3, #1
 8005512:	2202      	movs	r2, #2
 8005514:	2102      	movs	r1, #2
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fc3a 	bl	8005d90 <USBH_FindInterface>
 800551c:	4603      	mov	r3, r0
 800551e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005520:	7bbb      	ldrb	r3, [r7, #14]
 8005522:	2bff      	cmp	r3, #255	; 0xff
 8005524:	f000 812a 	beq.w	800577c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fc13 	bl	8005d58 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005538:	2050      	movs	r0, #80	; 0x50
 800553a:	f001 fb09 	bl	8006b50 <malloc>
 800553e:	4603      	mov	r3, r0
 8005540:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800554c:	7bbb      	ldrb	r3, [r7, #14]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	211a      	movs	r1, #26
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b25b      	sxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	da15      	bge.n	8005590 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	211a      	movs	r1, #26
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	211a      	movs	r1, #26
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 ff9f 	bl	80064da <USBH_AllocPipe>
 800559c:	4603      	mov	r3, r0
 800559e:	461a      	mov	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	7819      	ldrb	r1, [r3, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	7858      	ldrb	r0, [r3, #1]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	8952      	ldrh	r2, [r2, #10]
 80055bc:	9202      	str	r2, [sp, #8]
 80055be:	2203      	movs	r2, #3
 80055c0:	9201      	str	r2, [sp, #4]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	4623      	mov	r3, r4
 80055c6:	4602      	mov	r2, r0
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 ff57 	bl	800647c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 fa14 	bl	8006a04 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80055dc:	2300      	movs	r3, #0
 80055de:	2200      	movs	r2, #0
 80055e0:	210a      	movs	r1, #10
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fbd4 	bl	8005d90 <USBH_FindInterface>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	2bff      	cmp	r3, #255	; 0xff
 80055f0:	f000 80c4 	beq.w	800577c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	211a      	movs	r1, #26
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b25b      	sxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	da16      	bge.n	800563a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	211a      	movs	r1, #26
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005622:	7bbb      	ldrb	r3, [r7, #14]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	211a      	movs	r1, #26
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005632:	881a      	ldrh	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	835a      	strh	r2, [r3, #26]
 8005638:	e015      	b.n	8005666 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	211a      	movs	r1, #26
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800564a:	781a      	ldrb	r2, [r3, #0]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	211a      	movs	r1, #26
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	211a      	movs	r1, #26
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	b25b      	sxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	da16      	bge.n	80056ac <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	211a      	movs	r1, #26
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	4413      	add	r3, r2
 800568a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005694:	7bbb      	ldrb	r3, [r7, #14]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	211a      	movs	r1, #26
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80056a4:	881a      	ldrh	r2, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	835a      	strh	r2, [r3, #26]
 80056aa:	e015      	b.n	80056d8 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056ac:	7bbb      	ldrb	r3, [r7, #14]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	211a      	movs	r1, #26
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	211a      	movs	r1, #26
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80056d2:	881a      	ldrh	r2, [r3, #0]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	7b9b      	ldrb	r3, [r3, #14]
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fefb 	bl	80064da <USBH_AllocPipe>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	7bdb      	ldrb	r3, [r3, #15]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fef1 	bl	80064da <USBH_AllocPipe>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	7b59      	ldrb	r1, [r3, #13]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	7b98      	ldrb	r0, [r3, #14]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	8b12      	ldrh	r2, [r2, #24]
 8005718:	9202      	str	r2, [sp, #8]
 800571a:	2202      	movs	r2, #2
 800571c:	9201      	str	r2, [sp, #4]
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	4623      	mov	r3, r4
 8005722:	4602      	mov	r2, r0
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fea9 	bl	800647c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	7b19      	ldrb	r1, [r3, #12]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	7bd8      	ldrb	r0, [r3, #15]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	8b52      	ldrh	r2, [r2, #26]
 8005742:	9202      	str	r2, [sp, #8]
 8005744:	2202      	movs	r2, #2
 8005746:	9201      	str	r2, [sp, #4]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	4623      	mov	r3, r4
 800574c:	4602      	mov	r2, r0
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fe94 	bl	800647c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	7b5b      	ldrb	r3, [r3, #13]
 8005760:	2200      	movs	r2, #0
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 f94d 	bl	8006a04 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	7b1b      	ldrb	r3, [r3, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f001 f946 	bl	8006a04 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bd90      	pop	{r4, r7, pc}

08005786 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00e      	beq.n	80057be <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fe87 	bl	80064ba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 feaf 	bl	8006516 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	7b1b      	ldrb	r3, [r3, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00e      	beq.n	80057e4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	7b1b      	ldrb	r3, [r3, #12]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fe74 	bl	80064ba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	7b1b      	ldrb	r3, [r3, #12]
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fe9c 	bl	8006516 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	7b5b      	ldrb	r3, [r3, #13]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	7b5b      	ldrb	r3, [r3, #13]
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fe61 	bl	80064ba <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	7b5b      	ldrb	r3, [r3, #13]
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fe89 	bl	8006516 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f99e 	bl	8006b60 <free>
    phost->pActiveClass->pData = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800582a:	2200      	movs	r2, #0
 800582c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005840:	2302      	movs	r3, #2
 8005842:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	3340      	adds	r3, #64	; 0x40
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f8b2 	bl	80059be <GetLineCoding>
 800585a:	4603      	mov	r3, r0
 800585c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d105      	bne.n	8005870 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800586a:	2102      	movs	r1, #2
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	4798      	blx	r3
  }
  return status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800589c:	2b04      	cmp	r3, #4
 800589e:	d877      	bhi.n	8005990 <USBH_CDC_Process+0x114>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <USBH_CDC_Process+0x2c>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058bd 	.word	0x080058bd
 80058ac:	080058c3 	.word	0x080058c3
 80058b0:	080058f3 	.word	0x080058f3
 80058b4:	08005967 	.word	0x08005967
 80058b8:	08005975 	.word	0x08005975
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]
    break;
 80058c0:	e06d      	b.n	800599e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f897 	bl	80059fc <SetLineCoding>
 80058ce:	4603      	mov	r3, r0
 80058d0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80058e0:	e058      	b.n	8005994 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d055      	beq.n	8005994 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2204      	movs	r2, #4
 80058ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80058f0:	e050      	b.n	8005994 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	3340      	adds	r3, #64	; 0x40
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f860 	bl	80059be <GetLineCoding>
 80058fe:	4603      	mov	r3, r0
 8005900:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d126      	bne.n	8005956 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591a:	791b      	ldrb	r3, [r3, #4]
 800591c:	429a      	cmp	r2, r3
 800591e:	d13b      	bne.n	8005998 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800592c:	429a      	cmp	r2, r3
 800592e:	d133      	bne.n	8005998 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800593c:	429a      	cmp	r2, r3
 800593e:	d12b      	bne.n	8005998 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005948:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800594a:	429a      	cmp	r2, r3
 800594c:	d124      	bne.n	8005998 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f95a 	bl	8005c08 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005954:	e020      	b.n	8005998 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d01d      	beq.n	8005998 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2204      	movs	r2, #4
 8005960:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005964:	e018      	b.n	8005998 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f867 	bl	8005a3a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f8dc 	bl	8005b2a <CDC_ProcessReception>
    break;
 8005972:	e014      	b.n	800599e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005974:	2100      	movs	r1, #0
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb08 	bl	8005f8c <USBH_ClrFeature>
 800597c:	4603      	mov	r3, r0
 800597e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800598e:	e005      	b.n	800599c <USBH_CDC_Process+0x120>

  default:
    break;
 8005990:	bf00      	nop
 8005992:	e004      	b.n	800599e <USBH_CDC_Process+0x122>
    break;
 8005994:	bf00      	nop
 8005996:	e002      	b.n	800599e <USBH_CDC_Process+0x122>
    break;
 8005998:	bf00      	nop
 800599a:	e000      	b.n	800599e <USBH_CDC_Process+0x122>
    break;
 800599c:	bf00      	nop

  }

  return status;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	22a1      	movs	r2, #161	; 0xa1
 80059cc:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2221      	movs	r2, #33	; 0x21
 80059d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2207      	movs	r2, #7
 80059e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2207      	movs	r2, #7
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 faf1 	bl	8005fd4 <USBH_CtlReq>
 80059f2:	4603      	mov	r3, r0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2221      	movs	r2, #33	; 0x21
 8005a0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2207      	movs	r2, #7
 8005a22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2207      	movs	r2, #7
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fad2 	bl	8005fd4 <USBH_CtlReq>
 8005a30:	4603      	mov	r3, r0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af02      	add	r7, sp, #8
 8005a40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d002      	beq.n	8005a60 <CDC_ProcessTransmission+0x26>
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d025      	beq.n	8005aaa <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005a5e:	e060      	b.n	8005b22 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	8b12      	ldrh	r2, [r2, #24]
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d90c      	bls.n	8005a86 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8b1a      	ldrh	r2, [r3, #24]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	7b58      	ldrb	r0, [r3, #13]
 8005a78:	2301      	movs	r3, #1
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fcb9 	bl	80063f6 <USBH_BulkSendData>
 8005a84:	e00c      	b.n	8005aa0 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	7b58      	ldrb	r0, [r3, #13]
 8005a94:	2301      	movs	r3, #1
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4603      	mov	r3, r0
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fcab 	bl	80063f6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005aa8:	e03b      	b.n	8005b22 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	7b5b      	ldrb	r3, [r3, #13]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 ff7d 	bl	80069b0 <USBH_LL_GetURBState>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005aba:	7afb      	ldrb	r3, [r7, #11]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d128      	bne.n	8005b12 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	8b12      	ldrh	r2, [r2, #24]
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d90e      	bls.n	8005aea <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	8b12      	ldrh	r2, [r2, #24]
 8005ad4:	1a9a      	subs	r2, r3, r2
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	8b12      	ldrh	r2, [r2, #24]
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	61da      	str	r2, [r3, #28]
 8005ae8:	e002      	b.n	8005af0 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b00:	e00e      	b.n	8005b20 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f868 	bl	8005be0 <USBH_CDC_TransmitCallback>
    break;
 8005b10:	e006      	b.n	8005b20 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d103      	bne.n	8005b20 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b20:	bf00      	nop
  }
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b086      	sub	sp, #24
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d002      	beq.n	8005b50 <CDC_ProcessReception+0x26>
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d00e      	beq.n	8005b6c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005b4e:	e043      	b.n	8005bd8 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	6a19      	ldr	r1, [r3, #32]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	8b5a      	ldrh	r2, [r3, #26]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	7b1b      	ldrb	r3, [r3, #12]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fc6f 	bl	8006440 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2204      	movs	r2, #4
 8005b66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005b6a:	e035      	b.n	8005bd8 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	7b1b      	ldrb	r3, [r3, #12]
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 ff1c 	bl	80069b0 <USBH_LL_GetURBState>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005b7c:	7cfb      	ldrb	r3, [r7, #19]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d129      	bne.n	8005bd6 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	7b1b      	ldrb	r3, [r3, #12]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fe7f 	bl	800688c <USBH_LL_GetLastXferSize>
 8005b8e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d016      	beq.n	8005bc8 <CDC_ProcessReception+0x9e>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	8b5b      	ldrh	r3, [r3, #26]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d910      	bls.n	8005bc8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad2      	subs	r2, r2, r3
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	6a1a      	ldr	r2, [r3, #32]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	441a      	add	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005bc6:	e006      	b.n	8005bd6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f80f 	bl	8005bf4 <USBH_CDC_ReceiveCallback>
    break;
 8005bd6:	bf00      	nop
  }
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	4613      	mov	r3, r2
 8005c28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c30:	2302      	movs	r3, #2
 8005c32:	e019      	b.n	8005c68 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	79fa      	ldrb	r2, [r7, #7]
 8005c38:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f80f 	bl	8005c70 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fda1 	bl	80067a8 <USBH_LL_Init>

  return USBH_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005c7c:	e008      	b.n	8005c90 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	32e0      	adds	r2, #224	; 0xe0
 8005c84:	2100      	movs	r1, #0
 8005c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b0e      	cmp	r3, #14
 8005c94:	d9f3      	bls.n	8005c7e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e009      	b.n	8005cb0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb6:	d3f1      	bcc.n	8005c9c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d017      	beq.n	8005d46 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10f      	bne.n	8005d40 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	33dc      	adds	r3, #220	; 0xdc
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
 8005d3e:	e004      	b.n	8005d4a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d40:	2302      	movs	r3, #2
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e001      	b.n	8005d4a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d46:	2302      	movs	r3, #2
 8005d48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d204      	bcs.n	8005d7e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005d7c:	e001      	b.n	8005d82 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	70fb      	strb	r3, [r7, #3]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70bb      	strb	r3, [r7, #2]
 8005da6:	4613      	mov	r3, r2
 8005da8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005db8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005dba:	e025      	b.n	8005e08 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	221a      	movs	r2, #26
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	3302      	adds	r3, #2
 8005dcc:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	795b      	ldrb	r3, [r3, #5]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d002      	beq.n	8005dde <USBH_FindInterface+0x4e>
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	2bff      	cmp	r3, #255	; 0xff
 8005ddc:	d111      	bne.n	8005e02 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005de2:	78ba      	ldrb	r2, [r7, #2]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d002      	beq.n	8005dee <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005de8:	78bb      	ldrb	r3, [r7, #2]
 8005dea:	2bff      	cmp	r3, #255	; 0xff
 8005dec:	d109      	bne.n	8005e02 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005df2:	787a      	ldrb	r2, [r7, #1]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d002      	beq.n	8005dfe <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005df8:	787b      	ldrb	r3, [r7, #1]
 8005dfa:	2bff      	cmp	r3, #255	; 0xff
 8005dfc:	d101      	bne.n	8005e02 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	e006      	b.n	8005e10 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
 8005e04:	3301      	adds	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d9d6      	bls.n	8005dbc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e0e:	23ff      	movs	r3, #255	; 0xff
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fcfb 	bl	8006820 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fdd2 	bl	80069d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f804 	bl	8005e7e <USBH_HandleSof>
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b0b      	cmp	r3, #11
 8005e8e:	d10a      	bne.n	8005ea6 <USBH_HandleSof+0x28>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005ebe:	bf00      	nop
}
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005eda:	bf00      	nop
}
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10f      	bne.n	8005f18 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f10:	2104      	movs	r1, #4
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
 8005f16:	e007      	b.n	8005f28 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fc8b 	bl	8006856 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fae5 	bl	8006516 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	795b      	ldrb	r3, [r3, #5]
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fadf 	bl	8006516 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f70:	2105      	movs	r1, #5
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fc52 	bl	8006820 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	789b      	ldrb	r3, [r3, #2]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d10f      	bne.n	8005fc0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f805 	bl	8005fd4 <USBH_CtlReq>
 8005fca:	4603      	mov	r3, r0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	789b      	ldrb	r3, [r3, #2]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d002      	beq.n	8005ff4 <USBH_CtlReq+0x20>
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d00f      	beq.n	8006012 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005ff2:	e034      	b.n	800605e <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2202      	movs	r2, #2
 800600a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
    break;
 8006010:	e025      	b.n	800605e <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f828 	bl	8006068 <USBH_HandleControl>
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d108      	bne.n	8006034 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
    break;
 8006032:	e013      	b.n	800605c <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d108      	bne.n	800604c <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006046:	2303      	movs	r3, #3
 8006048:	75fb      	strb	r3, [r7, #23]
    break;
 800604a:	e007      	b.n	800605c <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d104      	bne.n	800605c <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006058:	2302      	movs	r3, #2
 800605a:	75fb      	strb	r3, [r7, #23]
    break;
 800605c:	bf00      	nop
  }
  return status;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af02      	add	r7, sp, #8
 800606e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006074:	2300      	movs	r3, #0
 8006076:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	7e1b      	ldrb	r3, [r3, #24]
 800607c:	3b01      	subs	r3, #1
 800607e:	2b0a      	cmp	r3, #10
 8006080:	f200 814c 	bhi.w	800631c <USBH_HandleControl+0x2b4>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <USBH_HandleControl+0x24>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060d3 	.word	0x080060d3
 8006094:	0800613d 	.word	0x0800613d
 8006098:	08006163 	.word	0x08006163
 800609c:	0800619b 	.word	0x0800619b
 80060a0:	080061c7 	.word	0x080061c7
 80060a4:	08006219 	.word	0x08006219
 80060a8:	0800623b 	.word	0x0800623b
 80060ac:	08006277 	.word	0x08006277
 80060b0:	0800629f 	.word	0x0800629f
 80060b4:	080062dd 	.word	0x080062dd
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f103 0110 	add.w	r1, r3, #16
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	795b      	ldrb	r3, [r3, #5]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f939 	bl	800633c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	761a      	strb	r2, [r3, #24]
    break;
 80060d0:	e12f      	b.n	8006332 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	795b      	ldrb	r3, [r3, #5]
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fc69 	bl	80069b0 <USBH_LL_GetURBState>
 80060de:	4603      	mov	r3, r0
 80060e0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d11e      	bne.n	8006126 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	7c1b      	ldrb	r3, [r3, #16]
 80060ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060f0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8adb      	ldrh	r3, [r3, #22]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80060fa:	7b7b      	ldrb	r3, [r7, #13]
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d103      	bne.n	8006108 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2203      	movs	r2, #3
 8006104:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006106:	e10b      	b.n	8006320 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2205      	movs	r2, #5
 800610c:	761a      	strb	r2, [r3, #24]
    break;
 800610e:	e107      	b.n	8006320 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006110:	7b7b      	ldrb	r3, [r7, #13]
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d103      	bne.n	800611e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2209      	movs	r2, #9
 800611a:	761a      	strb	r2, [r3, #24]
    break;
 800611c:	e100      	b.n	8006320 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2207      	movs	r2, #7
 8006122:	761a      	strb	r2, [r3, #24]
    break;
 8006124:	e0fc      	b.n	8006320 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006126:	7bbb      	ldrb	r3, [r7, #14]
 8006128:	2b04      	cmp	r3, #4
 800612a:	d003      	beq.n	8006134 <USBH_HandleControl+0xcc>
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	2b02      	cmp	r3, #2
 8006130:	f040 80f6 	bne.w	8006320 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	220b      	movs	r2, #11
 8006138:	761a      	strb	r2, [r3, #24]
    break;
 800613a:	e0f1      	b.n	8006320 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006142:	b29a      	uxth	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6899      	ldr	r1, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	899a      	ldrh	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	791b      	ldrb	r3, [r3, #4]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f930 	bl	80063ba <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2204      	movs	r2, #4
 800615e:	761a      	strb	r2, [r3, #24]
    break;
 8006160:	e0e7      	b.n	8006332 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	791b      	ldrb	r3, [r3, #4]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fc21 	bl	80069b0 <USBH_LL_GetURBState>
 800616e:	4603      	mov	r3, r0
 8006170:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d102      	bne.n	800617e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2209      	movs	r2, #9
 800617c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	2b05      	cmp	r3, #5
 8006182:	d102      	bne.n	800618a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006184:	2303      	movs	r3, #3
 8006186:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006188:	e0cc      	b.n	8006324 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	2b04      	cmp	r3, #4
 800618e:	f040 80c9 	bne.w	8006324 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	220b      	movs	r2, #11
 8006196:	761a      	strb	r2, [r3, #24]
    break;
 8006198:	e0c4      	b.n	8006324 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6899      	ldr	r1, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	899a      	ldrh	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	7958      	ldrb	r0, [r3, #5]
 80061a6:	2301      	movs	r3, #1
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4603      	mov	r3, r0
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f8df 	bl	8006370 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2206      	movs	r2, #6
 80061c2:	761a      	strb	r2, [r3, #24]
    break;
 80061c4:	e0b5      	b.n	8006332 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	795b      	ldrb	r3, [r3, #5]
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fbef 	bl	80069b0 <USBH_LL_GetURBState>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d103      	bne.n	80061e4 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2207      	movs	r2, #7
 80061e0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80061e2:	e0a1      	b.n	8006328 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d105      	bne.n	80061f6 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	220c      	movs	r2, #12
 80061ee:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80061f0:	2303      	movs	r3, #3
 80061f2:	73fb      	strb	r3, [r7, #15]
    break;
 80061f4:	e098      	b.n	8006328 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d103      	bne.n	8006204 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2205      	movs	r2, #5
 8006200:	761a      	strb	r2, [r3, #24]
    break;
 8006202:	e091      	b.n	8006328 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	2b04      	cmp	r3, #4
 8006208:	f040 808e 	bne.w	8006328 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	220b      	movs	r2, #11
 8006210:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006212:	2302      	movs	r3, #2
 8006214:	73fb      	strb	r3, [r7, #15]
    break;
 8006216:	e087      	b.n	8006328 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	791b      	ldrb	r3, [r3, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8ca 	bl	80063ba <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800622c:	b29a      	uxth	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2208      	movs	r2, #8
 8006236:	761a      	strb	r2, [r3, #24]

    break;
 8006238:	e07b      	b.n	8006332 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	791b      	ldrb	r3, [r3, #4]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fbb5 	bl	80069b0 <USBH_LL_GetURBState>
 8006246:	4603      	mov	r3, r0
 8006248:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d105      	bne.n	800625c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	220d      	movs	r2, #13
 8006254:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800625a:	e067      	b.n	800632c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	2b04      	cmp	r3, #4
 8006260:	d103      	bne.n	800626a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	220b      	movs	r2, #11
 8006266:	761a      	strb	r2, [r3, #24]
    break;
 8006268:	e060      	b.n	800632c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	2b05      	cmp	r3, #5
 800626e:	d15d      	bne.n	800632c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006270:	2303      	movs	r3, #3
 8006272:	73fb      	strb	r3, [r7, #15]
    break;
 8006274:	e05a      	b.n	800632c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	795a      	ldrb	r2, [r3, #5]
 800627a:	2301      	movs	r3, #1
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4613      	mov	r3, r2
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f873 	bl	8006370 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006290:	b29a      	uxth	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	220a      	movs	r2, #10
 800629a:	761a      	strb	r2, [r3, #24]
    break;
 800629c:	e049      	b.n	8006332 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	795b      	ldrb	r3, [r3, #5]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fb83 	bl	80069b0 <USBH_LL_GetURBState>
 80062aa:	4603      	mov	r3, r0
 80062ac:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d105      	bne.n	80062c0 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	220d      	movs	r2, #13
 80062bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 80062be:	e037      	b.n	8006330 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d103      	bne.n	80062ce <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2209      	movs	r2, #9
 80062ca:	761a      	strb	r2, [r3, #24]
    break;
 80062cc:	e030      	b.n	8006330 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d12d      	bne.n	8006330 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	220b      	movs	r2, #11
 80062d8:	761a      	strb	r2, [r3, #24]
    break;
 80062da:	e029      	b.n	8006330 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	7e5b      	ldrb	r3, [r3, #25]
 80062e0:	3301      	adds	r3, #1
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	765a      	strb	r2, [r3, #25]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7e5b      	ldrb	r3, [r3, #25]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d809      	bhi.n	8006304 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fab0 	bl	8006856 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006302:	e016      	b.n	8006332 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800630a:	2106      	movs	r1, #6
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006316:	2302      	movs	r3, #2
 8006318:	73fb      	strb	r3, [r7, #15]
    break;
 800631a:	e00a      	b.n	8006332 <USBH_HandleControl+0x2ca>

  default:
    break;
 800631c:	bf00      	nop
 800631e:	e008      	b.n	8006332 <USBH_HandleControl+0x2ca>
    break;
 8006320:	bf00      	nop
 8006322:	e006      	b.n	8006332 <USBH_HandleControl+0x2ca>
    break;
 8006324:	bf00      	nop
 8006326:	e004      	b.n	8006332 <USBH_HandleControl+0x2ca>
    break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <USBH_HandleControl+0x2ca>
    break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <USBH_HandleControl+0x2ca>
    break;
 8006330:	bf00      	nop
  }
  return status;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af04      	add	r7, sp, #16
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800634a:	79f9      	ldrb	r1, [r7, #7]
 800634c:	2300      	movs	r3, #0
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	2308      	movs	r3, #8
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	2300      	movs	r3, #0
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	2200      	movs	r2, #0
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 faf4 	bl	800694e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af04      	add	r7, sp, #16
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	460b      	mov	r3, r1
 8006380:	80fb      	strh	r3, [r7, #6]
 8006382:	4613      	mov	r3, r2
 8006384:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006394:	7979      	ldrb	r1, [r7, #5]
 8006396:	7e3b      	ldrb	r3, [r7, #24]
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	9302      	str	r3, [sp, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	2301      	movs	r3, #1
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	2200      	movs	r2, #0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 facf 	bl	800694e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b088      	sub	sp, #32
 80063be:	af04      	add	r7, sp, #16
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	4611      	mov	r1, r2
 80063c6:	461a      	mov	r2, r3
 80063c8:	460b      	mov	r3, r1
 80063ca:	80fb      	strh	r3, [r7, #6]
 80063cc:	4613      	mov	r3, r2
 80063ce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80063d0:	7979      	ldrb	r1, [r7, #5]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9303      	str	r3, [sp, #12]
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	9302      	str	r3, [sp, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	2301      	movs	r3, #1
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	2201      	movs	r2, #1
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fab1 	bl	800694e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80063ec:	2300      	movs	r3, #0

}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b088      	sub	sp, #32
 80063fa:	af04      	add	r7, sp, #16
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	4611      	mov	r1, r2
 8006402:	461a      	mov	r2, r3
 8006404:	460b      	mov	r3, r1
 8006406:	80fb      	strh	r3, [r7, #6]
 8006408:	4613      	mov	r3, r2
 800640a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800641a:	7979      	ldrb	r1, [r7, #5]
 800641c:	7e3b      	ldrb	r3, [r7, #24]
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	9302      	str	r3, [sp, #8]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	2301      	movs	r3, #1
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2302      	movs	r3, #2
 800642e:	2200      	movs	r2, #0
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fa8c 	bl	800694e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af04      	add	r7, sp, #16
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	460b      	mov	r3, r1
 8006450:	80fb      	strh	r3, [r7, #6]
 8006452:	4613      	mov	r3, r2
 8006454:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006456:	7979      	ldrb	r1, [r7, #5]
 8006458:	2300      	movs	r3, #0
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	9302      	str	r3, [sp, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	2301      	movs	r3, #1
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2302      	movs	r3, #2
 800646a:	2201      	movs	r2, #1
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa6e 	bl	800694e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af04      	add	r7, sp, #16
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4603      	mov	r3, r0
 800648c:	70fb      	strb	r3, [r7, #3]
 800648e:	460b      	mov	r3, r1
 8006490:	70bb      	strb	r3, [r7, #2]
 8006492:	4613      	mov	r3, r2
 8006494:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006496:	7878      	ldrb	r0, [r7, #1]
 8006498:	78ba      	ldrb	r2, [r7, #2]
 800649a:	78f9      	ldrb	r1, [r7, #3]
 800649c:	8b3b      	ldrh	r3, [r7, #24]
 800649e:	9302      	str	r3, [sp, #8]
 80064a0:	7d3b      	ldrb	r3, [r7, #20]
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	7c3b      	ldrb	r3, [r7, #16]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	4603      	mov	r3, r0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa01 	bl	80068b2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80064b0:	2300      	movs	r3, #0

}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa20 	bl	8006910 <USBH_LL_ClosePipe>

  return USBH_OK;
 80064d0:	2300      	movs	r3, #0

}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f831 	bl	800654e <USBH_GetFreePipe>
 80064ec:	4603      	mov	r3, r0
 80064ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80064f0:	89fb      	ldrh	r3, [r7, #14]
 80064f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	89fa      	ldrh	r2, [r7, #14]
 80064fe:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	32e0      	adds	r2, #224	; 0xe0
 8006506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	b2db      	uxtb	r3, r3
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	2b0a      	cmp	r3, #10
 8006526:	d80b      	bhi.n	8006540 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	32e0      	adds	r2, #224	; 0xe0
 800652e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	32e0      	adds	r2, #224	; 0xe0
 800653c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800655a:	2300      	movs	r3, #0
 800655c:	73fb      	strb	r3, [r7, #15]
 800655e:	e00e      	b.n	800657e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006560:	7bfa      	ldrb	r2, [r7, #15]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	32e0      	adds	r2, #224	; 0xe0
 8006566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d102      	bne.n	8006578 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	b29b      	uxth	r3, r3
 8006576:	e007      	b.n	8006588 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	3301      	adds	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b0a      	cmp	r3, #10
 8006582:	d9ed      	bls.n	8006560 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006584:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006598:	2201      	movs	r2, #1
 800659a:	490e      	ldr	r1, [pc, #56]	; (80065d4 <MX_USB_HOST_Init+0x40>)
 800659c:	480e      	ldr	r0, [pc, #56]	; (80065d8 <MX_USB_HOST_Init+0x44>)
 800659e:	f7ff fb3d 	bl	8005c1c <USBH_Init>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80065a8:	f7fa faea 	bl	8000b80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80065ac:	490b      	ldr	r1, [pc, #44]	; (80065dc <MX_USB_HOST_Init+0x48>)
 80065ae:	480a      	ldr	r0, [pc, #40]	; (80065d8 <MX_USB_HOST_Init+0x44>)
 80065b0:	f7ff fba7 	bl	8005d02 <USBH_RegisterClass>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80065ba:	f7fa fae1 	bl	8000b80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80065be:	4806      	ldr	r0, [pc, #24]	; (80065d8 <MX_USB_HOST_Init+0x44>)
 80065c0:	f7ff fc2c 	bl	8005e1c <USBH_Start>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80065ca:	f7fa fad9 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80065ce:	bf00      	nop
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	080065e1 	.word	0x080065e1
 80065d8:	20000224 	.word	0x20000224
 80065dc:	20000024 	.word	0x20000024

080065e0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d819      	bhi.n	8006628 <USBH_UserProcess+0x48>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <USBH_UserProcess+0x1c>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006629 	.word	0x08006629
 8006600:	08006619 	.word	0x08006619
 8006604:	08006629 	.word	0x08006629
 8006608:	08006621 	.word	0x08006621
 800660c:	08006611 	.word	0x08006611
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <USBH_UserProcess+0x58>)
 8006612:	2203      	movs	r2, #3
 8006614:	701a      	strb	r2, [r3, #0]
  break;
 8006616:	e008      	b.n	800662a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <USBH_UserProcess+0x58>)
 800661a:	2202      	movs	r2, #2
 800661c:	701a      	strb	r2, [r3, #0]
  break;
 800661e:	e004      	b.n	800662a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <USBH_UserProcess+0x58>)
 8006622:	2201      	movs	r2, #1
 8006624:	701a      	strb	r2, [r3, #0]
  break;
 8006626:	e000      	b.n	800662a <USBH_UserProcess+0x4a>

  default:
  break;
 8006628:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	200000d8 	.word	0x200000d8

0800663c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800665c:	d147      	bne.n	80066ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800665e:	2300      	movs	r3, #0
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	6313      	str	r3, [r2, #48]	; 0x30
 800666e:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800667a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006684:	2300      	movs	r3, #0
 8006686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	4619      	mov	r1, r3
 800668e:	481b      	ldr	r0, [pc, #108]	; (80066fc <HAL_HCD_MspInit+0xc0>)
 8006690:	f7fa fe56 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006694:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669a:	2302      	movs	r3, #2
 800669c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a2:	2303      	movs	r3, #3
 80066a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066a6:	230a      	movs	r3, #10
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	4619      	mov	r1, r3
 80066b0:	4812      	ldr	r0, [pc, #72]	; (80066fc <HAL_HCD_MspInit+0xc0>)
 80066b2:	f7fa fe45 	bl	8001340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	4a0f      	ldr	r2, [pc, #60]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 80066bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c0:	6353      	str	r3, [r2, #52]	; 0x34
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 80066c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ca:	4a0b      	ldr	r2, [pc, #44]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 80066cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066d0:	6453      	str	r3, [r2, #68]	; 0x44
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <HAL_HCD_MspInit+0xbc>)
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066de:	2200      	movs	r2, #0
 80066e0:	2100      	movs	r1, #0
 80066e2:	2043      	movs	r0, #67	; 0x43
 80066e4:	f7fa fdf5 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80066e8:	2043      	movs	r0, #67	; 0x43
 80066ea:	f7fa fe0e 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80066ee:	bf00      	nop
 80066f0:	3728      	adds	r7, #40	; 0x28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40023800 	.word	0x40023800
 80066fc:	40020000 	.word	0x40020000

08006700 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fba3 	bl	8005e5a <USBH_LL_IncTimer>
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff fbdb 	bl	8005ee6 <USBH_LL_Connect>
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fbf3 	bl	8005f32 <USBH_LL_Disconnect>
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
 8006760:	4613      	mov	r3, r2
 8006762:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff fb95 	bl	8005eae <USBH_LL_PortEnabled>
} 
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fb95 	bl	8005eca <USBH_LL_PortDisabled>
} 
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d12a      	bne.n	8006810 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80067ba:	4a18      	ldr	r2, [pc, #96]	; (800681c <USBH_LL_Init+0x74>)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a15      	ldr	r2, [pc, #84]	; (800681c <USBH_LL_Init+0x74>)
 80067c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <USBH_LL_Init+0x74>)
 80067cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80067d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <USBH_LL_Init+0x74>)
 80067d4:	2208      	movs	r2, #8
 80067d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80067d8:	4b10      	ldr	r3, [pc, #64]	; (800681c <USBH_LL_Init+0x74>)
 80067da:	2201      	movs	r2, #1
 80067dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <USBH_LL_Init+0x74>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <USBH_LL_Init+0x74>)
 80067e6:	2202      	movs	r2, #2
 80067e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80067ea:	4b0c      	ldr	r3, [pc, #48]	; (800681c <USBH_LL_Init+0x74>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80067f0:	480a      	ldr	r0, [pc, #40]	; (800681c <USBH_LL_Init+0x74>)
 80067f2:	f7fa ff59 	bl	80016a8 <HAL_HCD_Init>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80067fc:	f7fa f9c0 	bl	8000b80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006800:	4806      	ldr	r0, [pc, #24]	; (800681c <USBH_LL_Init+0x74>)
 8006802:	f7fb fb47 	bl	8001e94 <HAL_HCD_GetCurrentFrame>
 8006806:	4603      	mov	r3, r0
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff fb16 	bl	8005e3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200005f0 	.word	0x200005f0

08006820 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006836:	4618      	mov	r0, r3
 8006838:	f7fb fac2 	bl	8001dc0 <HAL_HCD_Start>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f912 	bl	8006a6c <USBH_Get_USB_Status>
 8006848:	4603      	mov	r3, r0
 800684a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800684c:	7bbb      	ldrb	r3, [r7, #14]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800686c:	4618      	mov	r0, r3
 800686e:	f7fb faca 	bl	8001e06 <HAL_HCD_Stop>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f8f7 	bl	8006a6c <USBH_Get_USB_Status>
 800687e:	4603      	mov	r3, r0
 8006880:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006882:	7bbb      	ldrb	r3, [r7, #14]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fb fae1 	bl	8001e6a <HAL_HCD_HC_GetXferCount>
 80068a8:	4603      	mov	r3, r0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80068b2:	b590      	push	{r4, r7, lr}
 80068b4:	b089      	sub	sp, #36	; 0x24
 80068b6:	af04      	add	r7, sp, #16
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	461a      	mov	r2, r3
 80068c0:	4603      	mov	r3, r0
 80068c2:	70fb      	strb	r3, [r7, #3]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70bb      	strb	r3, [r7, #2]
 80068c8:	4613      	mov	r3, r2
 80068ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80068da:	787c      	ldrb	r4, [r7, #1]
 80068dc:	78ba      	ldrb	r2, [r7, #2]
 80068de:	78f9      	ldrb	r1, [r7, #3]
 80068e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068e2:	9302      	str	r3, [sp, #8]
 80068e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	4623      	mov	r3, r4
 80068f2:	f7fa ff3b 	bl	800176c <HAL_HCD_HC_Init>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f8b5 	bl	8006a6c <USBH_Get_USB_Status>
 8006902:	4603      	mov	r3, r0
 8006904:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006906:	7bbb      	ldrb	r3, [r7, #14]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	bd90      	pop	{r4, r7, pc}

08006910 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800692a:	78fa      	ldrb	r2, [r7, #3]
 800692c:	4611      	mov	r1, r2
 800692e:	4618      	mov	r0, r3
 8006930:	f7fa ffb4 	bl	800189c <HAL_HCD_HC_Halt>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	4618      	mov	r0, r3
 800693c:	f000 f896 	bl	8006a6c <USBH_Get_USB_Status>
 8006940:	4603      	mov	r3, r0
 8006942:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006944:	7bbb      	ldrb	r3, [r7, #14]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800694e:	b590      	push	{r4, r7, lr}
 8006950:	b089      	sub	sp, #36	; 0x24
 8006952:	af04      	add	r7, sp, #16
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	4608      	mov	r0, r1
 8006958:	4611      	mov	r1, r2
 800695a:	461a      	mov	r2, r3
 800695c:	4603      	mov	r3, r0
 800695e:	70fb      	strb	r3, [r7, #3]
 8006960:	460b      	mov	r3, r1
 8006962:	70bb      	strb	r3, [r7, #2]
 8006964:	4613      	mov	r3, r2
 8006966:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006976:	787c      	ldrb	r4, [r7, #1]
 8006978:	78ba      	ldrb	r2, [r7, #2]
 800697a:	78f9      	ldrb	r1, [r7, #3]
 800697c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006980:	9303      	str	r3, [sp, #12]
 8006982:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006984:	9302      	str	r3, [sp, #8]
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4623      	mov	r3, r4
 8006992:	f7fa ffa7 	bl	80018e4 <HAL_HCD_HC_SubmitRequest>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f865 	bl	8006a6c <USBH_Get_USB_Status>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}

080069b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fb fa3a 	bl	8001e40 <HAL_HCD_HC_GetURBState>
 80069cc:	4603      	mov	r3, r0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d103      	bne.n	80069f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f868 	bl	8006ac4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80069f4:	20c8      	movs	r0, #200	; 0xc8
 80069f6:	f7fa fb6f 	bl	80010d8 <HAL_Delay>
  return USBH_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
 8006a10:	4613      	mov	r3, r2
 8006a12:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a1a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	440b      	add	r3, r1
 8006a2a:	333b      	adds	r3, #59	; 0x3b
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006a32:	78fa      	ldrb	r2, [r7, #3]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	440b      	add	r3, r1
 8006a40:	3350      	adds	r3, #80	; 0x50
 8006a42:	78ba      	ldrb	r2, [r7, #2]
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e009      	b.n	8006a5c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	440b      	add	r3, r1
 8006a56:	3351      	adds	r3, #81	; 0x51
 8006a58:	78ba      	ldrb	r2, [r7, #2]
 8006a5a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d817      	bhi.n	8006ab0 <USBH_Get_USB_Status+0x44>
 8006a80:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <USBH_Get_USB_Status+0x1c>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006a99 	.word	0x08006a99
 8006a8c:	08006a9f 	.word	0x08006a9f
 8006a90:	08006aa5 	.word	0x08006aa5
 8006a94:	08006aab 	.word	0x08006aab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a9c:	e00b      	b.n	8006ab6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa2:	e008      	b.n	8006ab6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa8:	e005      	b.n	8006ab6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	73fb      	strb	r3, [r7, #15]
    break;
 8006aae:	e002      	b.n	8006ab6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab4:	bf00      	nop
  }
  return usb_status;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
 8006adc:	e001      	b.n	8006ae2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4803      	ldr	r0, [pc, #12]	; (8006af8 <MX_DriverVbusFS+0x34>)
 8006aea:	f7fa fdab 	bl	8001644 <HAL_GPIO_WritePin>
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40020800 	.word	0x40020800

08006afc <__errno>:
 8006afc:	4b01      	ldr	r3, [pc, #4]	; (8006b04 <__errno+0x8>)
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000044 	.word	0x20000044

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4e0d      	ldr	r6, [pc, #52]	; (8006b40 <__libc_init_array+0x38>)
 8006b0c:	4c0d      	ldr	r4, [pc, #52]	; (8006b44 <__libc_init_array+0x3c>)
 8006b0e:	1ba4      	subs	r4, r4, r6
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	2500      	movs	r5, #0
 8006b14:	42a5      	cmp	r5, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4e0b      	ldr	r6, [pc, #44]	; (8006b48 <__libc_init_array+0x40>)
 8006b1a:	4c0c      	ldr	r4, [pc, #48]	; (8006b4c <__libc_init_array+0x44>)
 8006b1c:	f000 f8ea 	bl	8006cf4 <_init>
 8006b20:	1ba4      	subs	r4, r4, r6
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	2500      	movs	r5, #0
 8006b26:	42a5      	cmp	r5, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b30:	4798      	blx	r3
 8006b32:	3501      	adds	r5, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b3a:	4798      	blx	r3
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08006d30 	.word	0x08006d30
 8006b44:	08006d30 	.word	0x08006d30
 8006b48:	08006d30 	.word	0x08006d30
 8006b4c:	08006d34 	.word	0x08006d34

08006b50 <malloc>:
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <malloc+0xc>)
 8006b52:	4601      	mov	r1, r0
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f000 b861 	b.w	8006c1c <_malloc_r>
 8006b5a:	bf00      	nop
 8006b5c:	20000044 	.word	0x20000044

08006b60 <free>:
 8006b60:	4b02      	ldr	r3, [pc, #8]	; (8006b6c <free+0xc>)
 8006b62:	4601      	mov	r1, r0
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	f000 b80b 	b.w	8006b80 <_free_r>
 8006b6a:	bf00      	nop
 8006b6c:	20000044 	.word	0x20000044

08006b70 <memset>:
 8006b70:	4402      	add	r2, r0
 8006b72:	4603      	mov	r3, r0
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d100      	bne.n	8006b7a <memset+0xa>
 8006b78:	4770      	bx	lr
 8006b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7e:	e7f9      	b.n	8006b74 <memset+0x4>

08006b80 <_free_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4605      	mov	r5, r0
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d045      	beq.n	8006c14 <_free_r+0x94>
 8006b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8c:	1f0c      	subs	r4, r1, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfb8      	it	lt
 8006b92:	18e4      	addlt	r4, r4, r3
 8006b94:	f000 f8ac 	bl	8006cf0 <__malloc_lock>
 8006b98:	4a1f      	ldr	r2, [pc, #124]	; (8006c18 <_free_r+0x98>)
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	b933      	cbnz	r3, 8006bae <_free_r+0x2e>
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	6014      	str	r4, [r2, #0]
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006baa:	f000 b8a2 	b.w	8006cf2 <__malloc_unlock>
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	d90c      	bls.n	8006bcc <_free_r+0x4c>
 8006bb2:	6821      	ldr	r1, [r4, #0]
 8006bb4:	1862      	adds	r2, r4, r1
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	bf04      	itt	eq
 8006bba:	681a      	ldreq	r2, [r3, #0]
 8006bbc:	685b      	ldreq	r3, [r3, #4]
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	bf04      	itt	eq
 8006bc2:	1852      	addeq	r2, r2, r1
 8006bc4:	6022      	streq	r2, [r4, #0]
 8006bc6:	6004      	str	r4, [r0, #0]
 8006bc8:	e7ec      	b.n	8006ba4 <_free_r+0x24>
 8006bca:	4613      	mov	r3, r2
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	b10a      	cbz	r2, 8006bd4 <_free_r+0x54>
 8006bd0:	42a2      	cmp	r2, r4
 8006bd2:	d9fa      	bls.n	8006bca <_free_r+0x4a>
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	1858      	adds	r0, r3, r1
 8006bd8:	42a0      	cmp	r0, r4
 8006bda:	d10b      	bne.n	8006bf4 <_free_r+0x74>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	4401      	add	r1, r0
 8006be0:	1858      	adds	r0, r3, r1
 8006be2:	4282      	cmp	r2, r0
 8006be4:	6019      	str	r1, [r3, #0]
 8006be6:	d1dd      	bne.n	8006ba4 <_free_r+0x24>
 8006be8:	6810      	ldr	r0, [r2, #0]
 8006bea:	6852      	ldr	r2, [r2, #4]
 8006bec:	605a      	str	r2, [r3, #4]
 8006bee:	4401      	add	r1, r0
 8006bf0:	6019      	str	r1, [r3, #0]
 8006bf2:	e7d7      	b.n	8006ba4 <_free_r+0x24>
 8006bf4:	d902      	bls.n	8006bfc <_free_r+0x7c>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	e7d3      	b.n	8006ba4 <_free_r+0x24>
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	1821      	adds	r1, r4, r0
 8006c00:	428a      	cmp	r2, r1
 8006c02:	bf04      	itt	eq
 8006c04:	6811      	ldreq	r1, [r2, #0]
 8006c06:	6852      	ldreq	r2, [r2, #4]
 8006c08:	6062      	str	r2, [r4, #4]
 8006c0a:	bf04      	itt	eq
 8006c0c:	1809      	addeq	r1, r1, r0
 8006c0e:	6021      	streq	r1, [r4, #0]
 8006c10:	605c      	str	r4, [r3, #4]
 8006c12:	e7c7      	b.n	8006ba4 <_free_r+0x24>
 8006c14:	bd38      	pop	{r3, r4, r5, pc}
 8006c16:	bf00      	nop
 8006c18:	200000dc 	.word	0x200000dc

08006c1c <_malloc_r>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	1ccd      	adds	r5, r1, #3
 8006c20:	f025 0503 	bic.w	r5, r5, #3
 8006c24:	3508      	adds	r5, #8
 8006c26:	2d0c      	cmp	r5, #12
 8006c28:	bf38      	it	cc
 8006c2a:	250c      	movcc	r5, #12
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	4606      	mov	r6, r0
 8006c30:	db01      	blt.n	8006c36 <_malloc_r+0x1a>
 8006c32:	42a9      	cmp	r1, r5
 8006c34:	d903      	bls.n	8006c3e <_malloc_r+0x22>
 8006c36:	230c      	movs	r3, #12
 8006c38:	6033      	str	r3, [r6, #0]
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
 8006c3e:	f000 f857 	bl	8006cf0 <__malloc_lock>
 8006c42:	4a21      	ldr	r2, [pc, #132]	; (8006cc8 <_malloc_r+0xac>)
 8006c44:	6814      	ldr	r4, [r2, #0]
 8006c46:	4621      	mov	r1, r4
 8006c48:	b991      	cbnz	r1, 8006c70 <_malloc_r+0x54>
 8006c4a:	4c20      	ldr	r4, [pc, #128]	; (8006ccc <_malloc_r+0xb0>)
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	b91b      	cbnz	r3, 8006c58 <_malloc_r+0x3c>
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f83d 	bl	8006cd0 <_sbrk_r>
 8006c56:	6020      	str	r0, [r4, #0]
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f000 f838 	bl	8006cd0 <_sbrk_r>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d124      	bne.n	8006cae <_malloc_r+0x92>
 8006c64:	230c      	movs	r3, #12
 8006c66:	6033      	str	r3, [r6, #0]
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f842 	bl	8006cf2 <__malloc_unlock>
 8006c6e:	e7e4      	b.n	8006c3a <_malloc_r+0x1e>
 8006c70:	680b      	ldr	r3, [r1, #0]
 8006c72:	1b5b      	subs	r3, r3, r5
 8006c74:	d418      	bmi.n	8006ca8 <_malloc_r+0x8c>
 8006c76:	2b0b      	cmp	r3, #11
 8006c78:	d90f      	bls.n	8006c9a <_malloc_r+0x7e>
 8006c7a:	600b      	str	r3, [r1, #0]
 8006c7c:	50cd      	str	r5, [r1, r3]
 8006c7e:	18cc      	adds	r4, r1, r3
 8006c80:	4630      	mov	r0, r6
 8006c82:	f000 f836 	bl	8006cf2 <__malloc_unlock>
 8006c86:	f104 000b 	add.w	r0, r4, #11
 8006c8a:	1d23      	adds	r3, r4, #4
 8006c8c:	f020 0007 	bic.w	r0, r0, #7
 8006c90:	1ac3      	subs	r3, r0, r3
 8006c92:	d0d3      	beq.n	8006c3c <_malloc_r+0x20>
 8006c94:	425a      	negs	r2, r3
 8006c96:	50e2      	str	r2, [r4, r3]
 8006c98:	e7d0      	b.n	8006c3c <_malloc_r+0x20>
 8006c9a:	428c      	cmp	r4, r1
 8006c9c:	684b      	ldr	r3, [r1, #4]
 8006c9e:	bf16      	itet	ne
 8006ca0:	6063      	strne	r3, [r4, #4]
 8006ca2:	6013      	streq	r3, [r2, #0]
 8006ca4:	460c      	movne	r4, r1
 8006ca6:	e7eb      	b.n	8006c80 <_malloc_r+0x64>
 8006ca8:	460c      	mov	r4, r1
 8006caa:	6849      	ldr	r1, [r1, #4]
 8006cac:	e7cc      	b.n	8006c48 <_malloc_r+0x2c>
 8006cae:	1cc4      	adds	r4, r0, #3
 8006cb0:	f024 0403 	bic.w	r4, r4, #3
 8006cb4:	42a0      	cmp	r0, r4
 8006cb6:	d005      	beq.n	8006cc4 <_malloc_r+0xa8>
 8006cb8:	1a21      	subs	r1, r4, r0
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f000 f808 	bl	8006cd0 <_sbrk_r>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d0cf      	beq.n	8006c64 <_malloc_r+0x48>
 8006cc4:	6025      	str	r5, [r4, #0]
 8006cc6:	e7db      	b.n	8006c80 <_malloc_r+0x64>
 8006cc8:	200000dc 	.word	0x200000dc
 8006ccc:	200000e0 	.word	0x200000e0

08006cd0 <_sbrk_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4c06      	ldr	r4, [pc, #24]	; (8006cec <_sbrk_r+0x1c>)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	6023      	str	r3, [r4, #0]
 8006cdc:	f7fa f91e 	bl	8000f1c <_sbrk>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_sbrk_r+0x1a>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_sbrk_r+0x1a>
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200008b4 	.word	0x200008b4

08006cf0 <__malloc_lock>:
 8006cf0:	4770      	bx	lr

08006cf2 <__malloc_unlock>:
 8006cf2:	4770      	bx	lr

08006cf4 <_init>:
 8006cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf6:	bf00      	nop
 8006cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfa:	bc08      	pop	{r3}
 8006cfc:	469e      	mov	lr, r3
 8006cfe:	4770      	bx	lr

08006d00 <_fini>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr
