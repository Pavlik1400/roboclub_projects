
bdcmotorr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aac  08006aac  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab4  08006ab4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000090  08006b4c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  08006b4c  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018393  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035df  00000000  00000000  00038453  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003ba38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0003cb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e6e  00000000  00000000  0003dae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a6a  00000000  00000000  0005694e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d9db  00000000  00000000  000673b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c4  00000000  00000000  000f4e10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006a78 	.word	0x08006a78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08006a78 	.word	0x08006a78

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
int main(void)
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fc62 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f80e 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f952 	bl	8000794 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f88e 	bl	8000610 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f4:	f000 f8ba 	bl	800066c <MX_I2S2_Init>
  MX_I2S3_Init();
 80004f8:	f000 f8e6 	bl	80006c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fc:	f000 f914 	bl	8000728 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000500:	f005 ff0a 	bl	8006318 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void set_speed(int val){

  }
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x2c>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b09a      	sub	sp, #104	; 0x68
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f006 f9ec 	bl	80068f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b31      	ldr	r3, [pc, #196]	; (8000608 <SystemClock_Config+0x100>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	4a30      	ldr	r2, [pc, #192]	; (8000608 <SystemClock_Config+0x100>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	6413      	str	r3, [r2, #64]	; 0x40
 800054e:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <SystemClock_Config+0x100>)
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <SystemClock_Config+0x104>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a2a      	ldr	r2, [pc, #168]	; (800060c <SystemClock_Config+0x104>)
 8000564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0x104>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800057a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000584:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000588:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058a:	2304      	movs	r3, #4
 800058c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800058e:	23c0      	movs	r3, #192	; 0xc0
 8000590:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000596:	2308      	movs	r3, #8
 8000598:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f968 	bl	8003874 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005aa:	f000 f9cd 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c8:	2103      	movs	r1, #3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fbc2 	bl	8003d54 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005d6:	f000 f9b7 	bl	8000948 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005da:	2301      	movs	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80005de:	23c8      	movs	r3, #200	; 0xc8
 80005e0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80005e2:	2305      	movs	r3, #5
 80005e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fd8e 	bl	8004110 <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80005fa:	f000 f9a5 	bl	8000948 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3768      	adds	r7, #104	; 0x68
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f002 fb39 	bl	8002cc4 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f976 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000c0 	.word	0x200000c0
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2S2_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2S2_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2S2_Init+0x50>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2S2_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_I2S2_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2S2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2S2_Init+0x50>)
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <MX_I2S2_Init+0x58>)
 8000694:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2S2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2S2_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2S2_Init+0x50>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2S2_Init+0x50>)
 80006aa:	f002 fc43 	bl	8002f34 <HAL_I2S_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f948 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000016c 	.word	0x2000016c
 80006c0:	40003800 	.word	0x40003800
 80006c4:	00017700 	.word	0x00017700

080006c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_I2S3_Init+0x54>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <MX_I2S3_Init+0x58>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2S3_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_I2S3_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2S3_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_I2S3_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_I2S3_Init+0x54>)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <MX_I2S3_Init+0x5c>)
 80006f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_I2S3_Init+0x54>)
 8000708:	f002 fc14 	bl	8002f34 <HAL_I2S_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000712:	f000 f919 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001b4 	.word	0x200001b4
 8000720:	40003c00 	.word	0x40003c00
 8000724:	00017700 	.word	0x00017700

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x64>)
 800077a:	f003 fe17 	bl	80043ac <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f8e0 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000114 	.word	0x20000114
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b60      	ldr	r3, [pc, #384]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b5d      	ldr	r3, [pc, #372]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b59      	ldr	r3, [pc, #356]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a58      	ldr	r2, [pc, #352]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b56      	ldr	r3, [pc, #344]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b52      	ldr	r3, [pc, #328]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a51      	ldr	r2, [pc, #324]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b4f      	ldr	r3, [pc, #316]	; (8000930 <MX_GPIO_Init+0x19c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b4b      	ldr	r3, [pc, #300]	; (8000930 <MX_GPIO_Init+0x19c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a4a      	ldr	r2, [pc, #296]	; (8000930 <MX_GPIO_Init+0x19c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b48      	ldr	r3, [pc, #288]	; (8000930 <MX_GPIO_Init+0x19c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <MX_GPIO_Init+0x19c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a43      	ldr	r2, [pc, #268]	; (8000930 <MX_GPIO_Init+0x19c>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <MX_GPIO_Init+0x19c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <MX_GPIO_Init+0x19c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a3c      	ldr	r2, [pc, #240]	; (8000930 <MX_GPIO_Init+0x19c>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <MX_GPIO_Init+0x19c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4837      	ldr	r0, [pc, #220]	; (8000934 <MX_GPIO_Init+0x1a0>)
 8000858:	f000 fdd0 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4835      	ldr	r0, [pc, #212]	; (8000938 <MX_GPIO_Init+0x1a4>)
 8000862:	f000 fdcb 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	; 0xf010
 800086c:	4833      	ldr	r0, [pc, #204]	; (800093c <MX_GPIO_Init+0x1a8>)
 800086e:	f000 fdc5 	bl	80013fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000872:	2304      	movs	r3, #4
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	482b      	ldr	r0, [pc, #172]	; (8000934 <MX_GPIO_Init+0x1a0>)
 8000886:	f000 fc37 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4824      	ldr	r0, [pc, #144]	; (8000934 <MX_GPIO_Init+0x1a0>)
 80008a2:	f000 fc29 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80008a6:	2332      	movs	r3, #50	; 0x32
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_GPIO_Init+0x1ac>)
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481e      	ldr	r0, [pc, #120]	; (8000934 <MX_GPIO_Init+0x1a0>)
 80008ba:	f000 fc1d 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_GPIO_Init+0x1a4>)
 80008d6:	f000 fc0f 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_GPIO_Init+0x1ac>)
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4815      	ldr	r0, [pc, #84]	; (8000944 <MX_GPIO_Init+0x1b0>)
 80008ee:	f000 fc03 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_GPIO_Init+0x1a8>)
 800090c:	f000 fbf4 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000910:	2320      	movs	r3, #32
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_GPIO_Init+0x1a8>)
 8000924:	f000 fbe8 	bl	80010f8 <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40021000 	.word	0x40021000
 8000938:	40020800 	.word	0x40020800
 800093c:	40020c00 	.word	0x40020c00
 8000940:	10120000 	.word	0x10120000
 8000944:	40020000 	.word	0x40020000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_I2C_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12c      	bne.n	8000a24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_I2C_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_I2C_MspInit+0x88>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_I2C_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ec:	2312      	movs	r3, #18
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f8:	2304      	movs	r3, #4
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <HAL_I2C_MspInit+0x8c>)
 8000a04:	f000 fb78 	bl	80010f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400

08000a38 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a59      	ldr	r2, [pc, #356]	; (8000bbc <HAL_I2S_MspInit+0x184>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d15b      	bne.n	8000b12 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
 8000a5e:	4b58      	ldr	r3, [pc, #352]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a57      	ldr	r2, [pc, #348]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b55      	ldr	r3, [pc, #340]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000abe:	2306      	movs	r3, #6
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483e      	ldr	r0, [pc, #248]	; (8000bc4 <HAL_I2S_MspInit+0x18c>)
 8000aca:	f000 fb15 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <HAL_I2S_MspInit+0x18c>)
 8000aea:	f000 fb05 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000aee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b00:	2305      	movs	r3, #5
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <HAL_I2S_MspInit+0x190>)
 8000b0c:	f000 faf4 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b10:	e04f      	b.n	8000bb2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <HAL_I2S_MspInit+0x194>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d14a      	bne.n	8000bb2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b70:	2310      	movs	r3, #16
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b80:	2306      	movs	r3, #6
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <HAL_I2S_MspInit+0x198>)
 8000b8c:	f000 fab4 	bl	80010f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b90:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_I2S_MspInit+0x18c>)
 8000bae:	f000 faa3 	bl	80010f8 <HAL_GPIO_Init>
}
 8000bb2:	bf00      	nop
 8000bb4:	3738      	adds	r7, #56	; 0x38
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40003800 	.word	0x40003800
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40003c00 	.word	0x40003c00
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_SPI_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_SPI_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c2e:	23e0      	movs	r3, #224	; 0xe0
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000c4a:	f000 fa55 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40013000 	.word	0x40013000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f8ca 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <OTG_FS_IRQHandler+0x10>)
 8000cc6:	f000 fe37 	bl	8001938 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200005cc 	.word	0x200005cc

08000cd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <_sbrk+0x50>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x16>
		heap_end = &end;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <_sbrk+0x50>)
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <_sbrk+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <_sbrk+0x50>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <_sbrk+0x50>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	466a      	mov	r2, sp
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d907      	bls.n	8000d0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000cfe:	f005 fdbf 	bl	8006880 <__errno>
 8000d02:	4602      	mov	r2, r0
 8000d04:	230c      	movs	r3, #12
 8000d06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0c:	e006      	b.n	8000d1c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <_sbrk+0x50>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <_sbrk+0x50>)
 8000d18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200000ac 	.word	0x200000ac
 8000d28:	20000898 	.word	0x20000898

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <SystemInit+0x28>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <SystemInit+0x28>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SystemInit+0x28>)
 8000d42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d46:	609a      	str	r2, [r3, #8]
#endif
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d5e:	e003      	b.n	8000d68 <LoopCopyDataInit>

08000d60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d66:	3104      	adds	r1, #4

08000d68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d70:	d3f6      	bcc.n	8000d60 <CopyDataInit>
  ldr  r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d74:	e002      	b.n	8000d7c <LoopFillZerobss>

08000d76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d78:	f842 3b04 	str.w	r3, [r2], #4

08000d7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d80:	d3f9      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd3 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f005 fd81 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fba5 	bl	80004d8 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d94:	08006abc 	.word	0x08006abc
  ldr  r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d9c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000da0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000da4:	20000894 	.word	0x20000894

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f94d 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdba 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f965 	bl	80010de <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2c:	f000 f92d 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	200001fc 	.word	0x200001fc

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200001fc 	.word	0x200001fc

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_Delay+0x40>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d00b      	beq.n	8001152 <HAL_GPIO_Init+0x5a>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001146:	2b11      	cmp	r3, #17
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b12      	cmp	r3, #18
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0xfc>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b12      	cmp	r3, #18
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b56      	ldr	r3, [pc, #344]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a55      	ldr	r2, [pc, #340]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a46      	ldr	r2, [pc, #280]	; (80013ec <HAL_GPIO_Init+0x2f4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a44      	ldr	r2, [pc, #272]	; (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4934      	ldr	r1, [pc, #208]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x300>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133e:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_GPIO_Init+0x300>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_GPIO_Init+0x300>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_GPIO_Init+0x300>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	; 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	619a      	str	r2, [r3, #24]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800142e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001430:	b08f      	sub	sp, #60	; 0x3c
 8001432:	af0a      	add	r7, sp, #40	; 0x28
 8001434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e054      	b.n	80014ea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f004 ffb0 	bl	80063c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2203      	movs	r2, #3
 8001464:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f86a 	bl	8004558 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	687e      	ldr	r6, [r7, #4]
 800148c:	466d      	mov	r5, sp
 800148e:	f106 0410 	add.w	r4, r6, #16
 8001492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800149e:	e885 0003 	stmia.w	r5, {r0, r1}
 80014a2:	1d33      	adds	r3, r6, #4
 80014a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a6:	6838      	ldr	r0, [r7, #0]
 80014a8:	f002 ffe4 	bl	8004474 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 f861 	bl	800457a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	687e      	ldr	r6, [r7, #4]
 80014c0:	466d      	mov	r5, sp
 80014c2:	f106 0410 	add.w	r4, r6, #16
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014d6:	1d33      	adds	r3, r6, #4
 80014d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014da:	6838      	ldr	r0, [r7, #0]
 80014dc:	f003 f974 	bl	80047c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014f2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014f2:	b590      	push	{r4, r7, lr}
 80014f4:	b089      	sub	sp, #36	; 0x24
 80014f6:	af04      	add	r7, sp, #16
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	4608      	mov	r0, r1
 80014fc:	4611      	mov	r1, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	4603      	mov	r3, r0
 8001502:	70fb      	strb	r3, [r7, #3]
 8001504:	460b      	mov	r3, r1
 8001506:	70bb      	strb	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_HCD_HC_Init+0x28>
 8001516:	2302      	movs	r3, #2
 8001518:	e07f      	b.n	800161a <HAL_HCD_HC_Init+0x128>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	333d      	adds	r3, #61	; 0x3d
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	3338      	adds	r3, #56	; 0x38
 8001546:	787a      	ldrb	r2, [r7, #1]
 8001548:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	3340      	adds	r3, #64	; 0x40
 800155a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800155c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3339      	adds	r3, #57	; 0x39
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	333f      	adds	r3, #63	; 0x3f
 8001582:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	78bb      	ldrb	r3, [r7, #2]
 800158c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001590:	b2d8      	uxtb	r0, r3
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	333a      	adds	r3, #58	; 0x3a
 80015a0:	4602      	mov	r2, r0
 80015a2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da0a      	bge.n	80015c2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	333b      	adds	r3, #59	; 0x3b
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e009      	b.n	80015d6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015c2:	78fa      	ldrb	r2, [r7, #3]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	333b      	adds	r3, #59	; 0x3b
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	333c      	adds	r3, #60	; 0x3c
 80015e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015ea:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	787c      	ldrb	r4, [r7, #1]
 80015f2:	78ba      	ldrb	r2, [r7, #2]
 80015f4:	78f9      	ldrb	r1, [r7, #3]
 80015f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4623      	mov	r3, r4
 8001608:	f003 fa1e 	bl	8004a48 <USB_HC_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}

08001622 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_HCD_HC_Halt+0x1e>
 800163c:	2302      	movs	r3, #2
 800163e:	e00f      	b.n	8001660 <HAL_HCD_HC_Halt+0x3e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fc58 	bl	8004f06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	70fb      	strb	r3, [r7, #3]
 800167a:	460b      	mov	r3, r1
 800167c:	70bb      	strb	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	333b      	adds	r3, #59	; 0x3b
 8001692:	78ba      	ldrb	r2, [r7, #2]
 8001694:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	333f      	adds	r3, #63	; 0x3f
 80016a6:	787a      	ldrb	r2, [r7, #1]
 80016a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016aa:	7c3b      	ldrb	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	3342      	adds	r3, #66	; 0x42
 80016c0:	2203      	movs	r2, #3
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e009      	b.n	80016da <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016da:	787b      	ldrb	r3, [r7, #1]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	f200 80d6 	bhi.w	800188e <HAL_HCD_HC_SubmitRequest+0x226>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_HCD_HC_SubmitRequest+0x80>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	08001879 	.word	0x08001879
 80016f0:	08001765 	.word	0x08001765
 80016f4:	080017ef 	.word	0x080017ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016f8:	7c3b      	ldrb	r3, [r7, #16]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	f040 80c9 	bne.w	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001700:	78bb      	ldrb	r3, [r7, #2]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80c5 	bne.w	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001708:	8b3b      	ldrh	r3, [r7, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3351      	adds	r3, #81	; 0x51
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3351      	adds	r3, #81	; 0x51
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3342      	adds	r3, #66	; 0x42
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800174c:	e0a1      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3342      	adds	r3, #66	; 0x42
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]
      break;
 8001762:	e096      	b.n	8001892 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001764:	78bb      	ldrb	r3, [r7, #2]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d120      	bne.n	80017ac <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3351      	adds	r3, #81	; 0x51
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001794:	e07e      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2202      	movs	r2, #2
 80017a8:	701a      	strb	r2, [r3, #0]
      break;
 80017aa:	e073      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3350      	adds	r3, #80	; 0x50
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10a      	bne.n	80017d8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e05d      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	3342      	adds	r3, #66	; 0x42
 80017e8:	2202      	movs	r2, #2
 80017ea:	701a      	strb	r2, [r3, #0]
      break;
 80017ec:	e052      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ee:	78bb      	ldrb	r3, [r7, #2]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d120      	bne.n	8001836 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3351      	adds	r3, #81	; 0x51
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800181e:	e039      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2202      	movs	r2, #2
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e02e      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3350      	adds	r3, #80	; 0x50
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3342      	adds	r3, #66	; 0x42
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
      break;
 8001860:	e018      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3342      	adds	r3, #66	; 0x42
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e00d      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	3342      	adds	r3, #66	; 0x42
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
      break;
 800188c:	e002      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800188e:	bf00      	nop
 8001890:	e000      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001892:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3344      	adds	r3, #68	; 0x44
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	8b39      	ldrh	r1, [r7, #24]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4403      	add	r3, r0
 80018b8:	3348      	adds	r3, #72	; 0x48
 80018ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	335c      	adds	r3, #92	; 0x5c
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	334c      	adds	r3, #76	; 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3339      	adds	r3, #57	; 0x39
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	335d      	adds	r3, #93	; 0x5d
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	3338      	adds	r3, #56	; 0x38
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	18d1      	adds	r1, r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	f003 f998 	bl	8004c5c <USB_HC_StartXfer>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fef7 	bl	8004742 <USB_GetMode>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 80f1 	bne.w	8001b3e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fedb 	bl	800471c <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80e7 	beq.w	8001b3c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fed2 	bl	800471c <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001982:	d104      	bne.n	800198e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800198c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fec2 	bl	800471c <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a2:	d104      	bne.n	80019ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 feb2 	bl	800471c <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019c2:	d104      	bne.n	80019ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fea2 	bl	800471c <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d103      	bne.n	80019ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fe94 	bl	800471c <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019fe:	d117      	bne.n	8001a30 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a12:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f004 fd51 	bl	80064bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 ff8d 	bl	8004940 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fe71 	bl	800471c <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d102      	bne.n	8001a4c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f001 f8ac 	bl	8002ba4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fe63 	bl	800471c <USB_ReadInterrupts>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d106      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f004 fd0f 	bl	8006484 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fe52 	bl	800471c <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a82:	d138      	bne.n	8001af6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fa2b 	bl	8004ee4 <USB_HC_ReadInterrupt>
 8001a8e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e025      	b.n	8001ae2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d018      	beq.n	8001adc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f8b3 	bl	8001c34 <HCD_HC_IN_IRQHandler>
 8001ace:	e005      	b.n	8001adc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fc43 	bl	8002362 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3d4      	bcc.n	8001a96 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fe0e 	bl	800471c <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d101      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x1d6>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_HCD_IRQHandler+0x1d8>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d014      	beq.n	8001b3e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0210 	bic.w	r2, r2, #16
 8001b22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 ff91 	bl	8002a4c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0210 	orr.w	r2, r2, #16
 8001b38:	619a      	str	r2, [r3, #24]
 8001b3a:	e000      	b.n	8001b3e <HAL_HCD_IRQHandler+0x206>
      return;
 8001b3c:	bf00      	nop
    }
  }
}
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_HCD_Start+0x16>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e013      	b.n	8001b82 <HAL_HCD_Start+0x3e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fce5 	bl	8004536 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2101      	movs	r1, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 ff1e 	bl	80049b4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_HCD_Stop+0x16>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e00d      	b.n	8001bbc <HAL_HCD_Stop+0x32>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fae5 	bl	800517c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	335c      	adds	r3, #92	; 0x5c
 8001be0:	781b      	ldrb	r3, [r3, #0]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	334c      	adds	r3, #76	; 0x4c
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fefe 	bl	8004a26 <USB_GetCurrentFrame>
 8001c2a:	4603      	mov	r3, r0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d119      	bne.n	8001c98 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	461a      	mov	r2, r3
 8001c72:	2304      	movs	r3, #4
 8001c74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	0151      	lsls	r1, r2, #5
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	440a      	add	r2, r1
 8001c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	60d3      	str	r3, [r2, #12]
 8001c96:	e095      	b.n	8001dc4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d109      	bne.n	8001cc2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	6093      	str	r3, [r2, #8]
 8001cc0:	e080      	b.n	8001dc4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d134      	bne.n	8001d42 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	0151      	lsls	r1, r2, #5
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	440a      	add	r2, r1
 8001cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	335d      	adds	r3, #93	; 0x5d
 8001d08:	2205      	movs	r2, #5
 8001d0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 f8e3 	bl	8004f06 <USB_HC_Halt>
 8001d40:	e040      	b.n	8001dc4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	d134      	bne.n	8001dc4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	0151      	lsls	r1, r2, #5
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	440a      	add	r2, r1
 8001d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 f8be 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	461a      	mov	r2, r3
 8001d98:	2310      	movs	r3, #16
 8001d9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	335d      	adds	r3, #93	; 0x5d
 8001dac:	2208      	movs	r2, #8
 8001dae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dda:	d122      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	0151      	lsls	r1, r2, #5
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	440a      	add	r2, r1
 8001df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 f87d 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e20:	e29b      	b.n	800235a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 80c1 	bne.w	8001fbc <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01b      	beq.n	8001e7a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	3348      	adds	r3, #72	; 0x48
 8001e52:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e66:	1ad1      	subs	r1, r2, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4403      	add	r3, r0
 8001e76:	334c      	adds	r3, #76	; 0x4c
 8001e78:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	335d      	adds	r3, #93	; 0x5d
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3358      	adds	r3, #88	; 0x58
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	333f      	adds	r3, #63	; 0x3f
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	333f      	adds	r3, #63	; 0x3f
 8001eda:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d121      	bne.n	8001f24 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	0151      	lsls	r1, r2, #5
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fffb 	bl	8004f06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2310      	movs	r3, #16
 8001f20:	6093      	str	r3, [r2, #8]
 8001f22:	e034      	b.n	8001f8e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	333f      	adds	r3, #63	; 0x3f
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d129      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	0151      	lsls	r1, r2, #5
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	440a      	add	r2, r1
 8001f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f58:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	335c      	adds	r3, #92	; 0x5c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	b2d8      	uxtb	r0, r3
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	335c      	adds	r3, #92	; 0x5c
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4601      	mov	r1, r0
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f004 faa5 	bl	80064d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3350      	adds	r3, #80	; 0x50
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f083 0301 	eor.w	r3, r3, #1
 8001fa4:	b2d8      	uxtb	r0, r3
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3350      	adds	r3, #80	; 0x50
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	701a      	strb	r2, [r3, #0]
}
 8001fba:	e1ce      	b.n	800235a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	f040 80f1 	bne.w	80021b6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	0151      	lsls	r1, r2, #5
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	440a      	add	r2, r1
 8001fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fee:	f023 0302 	bic.w	r3, r3, #2
 8001ff2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	335d      	adds	r3, #93	; 0x5d
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d10a      	bne.n	8002020 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	335c      	adds	r3, #92	; 0x5c
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e0b0      	b.n	8002182 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	335d      	adds	r3, #93	; 0x5d
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d10a      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	335c      	adds	r3, #92	; 0x5c
 8002046:	2205      	movs	r2, #5
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	e09a      	b.n	8002182 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	335d      	adds	r3, #93	; 0x5d
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b06      	cmp	r3, #6
 8002060:	d00a      	beq.n	8002078 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	335d      	adds	r3, #93	; 0x5d
 8002072:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002074:	2b08      	cmp	r3, #8
 8002076:	d156      	bne.n	8002126 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3358      	adds	r3, #88	; 0x58
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1c59      	adds	r1, r3, #1
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4403      	add	r3, r0
 800209a:	3358      	adds	r3, #88	; 0x58
 800209c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	3358      	adds	r3, #88	; 0x58
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d914      	bls.n	80020de <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	3358      	adds	r3, #88	; 0x58
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	335c      	adds	r3, #92	; 0x5c
 80020d8:	2204      	movs	r2, #4
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e009      	b.n	80020f2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	335c      	adds	r3, #92	; 0x5c
 80020ee:	2202      	movs	r2, #2
 80020f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002108:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002110:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e02d      	b.n	8002182 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	335d      	adds	r3, #93	; 0x5d
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d122      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	335c      	adds	r3, #92	; 0x5c
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002166:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800216e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	461a      	mov	r2, r3
 8002190:	2302      	movs	r3, #2
 8002192:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	335c      	adds	r3, #92	; 0x5c
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4601      	mov	r1, r0
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f004 f992 	bl	80064d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021b4:	e0d1      	b.n	800235a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d13e      	bne.n	800224a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	0151      	lsls	r1, r2, #5
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	440a      	add	r2, r1
 80021e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3358      	adds	r3, #88	; 0x58
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1c59      	adds	r1, r3, #1
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4403      	add	r3, r0
 800220e:	3358      	adds	r3, #88	; 0x58
 8002210:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	335d      	adds	r3, #93	; 0x5d
 8002222:	2206      	movs	r2, #6
 8002224:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fe68 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	461a      	mov	r2, r3
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	6093      	str	r3, [r2, #8]
}
 8002248:	e087      	b.n	800235a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b10      	cmp	r3, #16
 800225e:	d17c      	bne.n	800235a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	333f      	adds	r3, #63	; 0x3f
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d122      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	3358      	adds	r3, #88	; 0x58
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	0151      	lsls	r1, r2, #5
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	440a      	add	r2, r1
 80022a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fe26 	bl	8004f06 <USB_HC_Halt>
 80022ba:	e045      	b.n	8002348 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	333f      	adds	r3, #63	; 0x3f
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	333f      	adds	r3, #63	; 0x3f
 80022e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d12f      	bne.n	8002348 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3358      	adds	r3, #88	; 0x58
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d121      	bne.n	8002348 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	335d      	adds	r3, #93	; 0x5d
 8002314:	2203      	movs	r2, #3
 8002316:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	0151      	lsls	r1, r2, #5
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	440a      	add	r2, r1
 800232e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f002 fddf 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2310      	movs	r3, #16
 8002358:	6093      	str	r3, [r2, #8]
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d119      	bne.n	80023c6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	461a      	mov	r2, r3
 80023a0:	2304      	movs	r3, #4
 80023a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	0151      	lsls	r1, r2, #5
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	440a      	add	r2, r1
 80023ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80023c4:	e33e      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d141      	bne.n	8002460 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	461a      	mov	r2, r3
 80023ea:	2320      	movs	r3, #32
 80023ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	333d      	adds	r3, #61	; 0x3d
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 831f 	bne.w	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	333d      	adds	r3, #61	; 0x3d
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	335c      	adds	r3, #92	; 0x5c
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	0151      	lsls	r1, r2, #5
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	440a      	add	r2, r1
 8002444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f002 fd54 	bl	8004f06 <USB_HC_Halt>
}
 800245e:	e2f1      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d13f      	bne.n	80024f6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	335d      	adds	r3, #93	; 0x5d
 8002486:	2204      	movs	r2, #4
 8002488:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	333d      	adds	r3, #61	; 0x3d
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3358      	adds	r3, #88	; 0x58
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	0151      	lsls	r1, r2, #5
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	440a      	add	r2, r1
 80024c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 fd12 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	2340      	movs	r3, #64	; 0x40
 80024f2:	6093      	str	r3, [r2, #8]
}
 80024f4:	e2a6      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250c:	d122      	bne.n	8002554 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	0151      	lsls	r1, r2, #5
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	440a      	add	r2, r1
 8002524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fce4 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002550:	6093      	str	r3, [r2, #8]
}
 8002552:	e277      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d135      	bne.n	80025d6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	3358      	adds	r3, #88	; 0x58
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	0151      	lsls	r1, r2, #5
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	440a      	add	r2, r1
 8002594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fcac 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	335d      	adds	r3, #93	; 0x5d
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
}
 80025d4:	e236      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d12b      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	2308      	movs	r3, #8
 80025fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	440a      	add	r2, r1
 8002614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fc6c 	bl	8004f06 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	335d      	adds	r3, #93	; 0x5d
 800263e:	2205      	movs	r2, #5
 8002640:	701a      	strb	r2, [r3, #0]
}
 8002642:	e1ff      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b10      	cmp	r3, #16
 8002658:	d155      	bne.n	8002706 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	3358      	adds	r3, #88	; 0x58
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	335d      	adds	r3, #93	; 0x5d
 800267e:	2203      	movs	r2, #3
 8002680:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	333d      	adds	r3, #61	; 0x3d
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d114      	bne.n	80026c2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	440b      	add	r3, r1
 80026a6:	333c      	adds	r3, #60	; 0x3c
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	333d      	adds	r3, #61	; 0x3d
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	0151      	lsls	r1, r2, #5
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	440a      	add	r2, r1
 80026d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fc0a 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	2310      	movs	r3, #16
 8002702:	6093      	str	r3, [r2, #8]
}
 8002704:	e19e      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d12b      	bne.n	8002774 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	0151      	lsls	r1, r2, #5
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	440a      	add	r2, r1
 8002732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f002 fbdd 	bl	8004f06 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	335d      	adds	r3, #93	; 0x5d
 800275c:	2206      	movs	r2, #6
 800275e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	6093      	str	r3, [r2, #8]
}
 8002772:	e167      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278a:	d135      	bne.n	80027f8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fba5 	bl	8004f06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	461a      	mov	r2, r3
 80027ca:	2310      	movs	r3, #16
 80027cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	335d      	adds	r3, #93	; 0x5d
 80027f2:	2208      	movs	r2, #8
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	e125      	b.n	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	f040 811a 	bne.w	8002a44 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	440a      	add	r2, r1
 8002826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282a:	f023 0302 	bic.w	r3, r3, #2
 800282e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	335d      	adds	r3, #93	; 0x5d
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d137      	bne.n	80028b6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	335c      	adds	r3, #92	; 0x5c
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	333f      	adds	r3, #63	; 0x3f
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d00b      	beq.n	8002888 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	333f      	adds	r3, #63	; 0x3f
 8002880:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002882:	2b03      	cmp	r3, #3
 8002884:	f040 80c5 	bne.w	8002a12 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	3351      	adds	r3, #81	; 0x51
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f083 0301 	eor.w	r3, r3, #1
 800289e:	b2d8      	uxtb	r0, r3
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	3351      	adds	r3, #81	; 0x51
 80028b0:	4602      	mov	r2, r0
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e0ad      	b.n	8002a12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	335d      	adds	r3, #93	; 0x5d
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d10a      	bne.n	80028e2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	335c      	adds	r3, #92	; 0x5c
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e097      	b.n	8002a12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	335d      	adds	r3, #93	; 0x5d
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d10a      	bne.n	800290e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	335c      	adds	r3, #92	; 0x5c
 8002908:	2202      	movs	r2, #2
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e081      	b.n	8002a12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	335d      	adds	r3, #93	; 0x5d
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d10a      	bne.n	800293a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	335c      	adds	r3, #92	; 0x5c
 8002934:	2205      	movs	r2, #5
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e06b      	b.n	8002a12 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	335d      	adds	r3, #93	; 0x5d
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d00a      	beq.n	8002966 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	335d      	adds	r3, #93	; 0x5d
 8002960:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002962:	2b08      	cmp	r3, #8
 8002964:	d155      	bne.n	8002a12 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3358      	adds	r3, #88	; 0x58
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1c59      	adds	r1, r3, #1
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4403      	add	r3, r0
 8002988:	3358      	adds	r3, #88	; 0x58
 800298a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	3358      	adds	r3, #88	; 0x58
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d914      	bls.n	80029cc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3358      	adds	r3, #88	; 0x58
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	335c      	adds	r3, #92	; 0x5c
 80029c6:	2204      	movs	r2, #4
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e009      	b.n	80029e0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	335c      	adds	r3, #92	; 0x5c
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2302      	movs	r3, #2
 8002a22:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	b2d8      	uxtb	r0, r3
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	335c      	adds	r3, #92	; 0x5c
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4601      	mov	r1, r0
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f003 fd4a 	bl	80064d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	0c5b      	lsrs	r3, r3, #17
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a80:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d003      	beq.n	8002a90 <HCD_RXQLVL_IRQHandler+0x44>
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	f000 8082 	beq.w	8002b92 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a8e:	e083      	b.n	8002b98 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d07f      	beq.n	8002b96 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3344      	adds	r3, #68	; 0x44
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d074      	beq.n	8002b96 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	3344      	adds	r3, #68	; 0x44
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f001 fdff 	bl	80046ca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3344      	adds	r3, #68	; 0x44
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	18d1      	adds	r1, r2, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4403      	add	r3, r0
 8002af0:	3344      	adds	r3, #68	; 0x44
 8002af2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	334c      	adds	r3, #76	; 0x4c
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	18d1      	adds	r1, r2, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4403      	add	r3, r0
 8002b18:	334c      	adds	r3, #76	; 0x4c
 8002b1a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HCD_RXQLVL_IRQHandler+0x154>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d031      	beq.n	8002b96 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b48:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b50:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3350      	adds	r3, #80	; 0x50
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	f083 0301 	eor.w	r3, r3, #1
 8002b7a:	b2d8      	uxtb	r0, r3
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	440b      	add	r3, r1
 8002b8a:	3350      	adds	r3, #80	; 0x50
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	701a      	strb	r2, [r3, #0]
      break;
 8002b90:	e001      	b.n	8002b96 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b96:	bf00      	nop
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	; 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	1ff80000 	.word	0x1ff80000

08002ba4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bd0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d113      	bne.n	8002c04 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d10a      	bne.n	8002bfc <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002bf4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f003 fc52 	bl	80064a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d147      	bne.n	8002c9e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d129      	bne.n	8002c74 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d113      	bne.n	8002c50 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c32:	d106      	bne.n	8002c42 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fe80 	bl	8004940 <USB_InitFSLSPClkSel>
 8002c40:	e011      	b.n	8002c66 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fe79 	bl	8004940 <USB_InitFSLSPClkSel>
 8002c4e:	e00a      	b.n	8002c66 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d106      	bne.n	8002c66 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c64:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f003 fc44 	bl	80064f4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f003 fc17 	bl	80064a0 <HAL_HCD_Connect_Callback>
 8002c72:	e014      	b.n	8002c9e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f003 fc4b 	bl	8006510 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002c88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c8c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d103      	bne.n	8002cb0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f043 0320 	orr.w	r3, r3, #32
 8002cae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e11f      	b.n	8002f16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fe5c 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d28:	f001 f9de 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4a7b      	ldr	r2, [pc, #492]	; (8002f20 <HAL_I2C_Init+0x25c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d807      	bhi.n	8002d48 <HAL_I2C_Init+0x84>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a7a      	ldr	r2, [pc, #488]	; (8002f24 <HAL_I2C_Init+0x260>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	bf94      	ite	ls
 8002d40:	2301      	movls	r3, #1
 8002d42:	2300      	movhi	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e006      	b.n	8002d56 <HAL_I2C_Init+0x92>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a77      	ldr	r2, [pc, #476]	; (8002f28 <HAL_I2C_Init+0x264>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0db      	b.n	8002f16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a72      	ldr	r2, [pc, #456]	; (8002f2c <HAL_I2C_Init+0x268>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0c9b      	lsrs	r3, r3, #18
 8002d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a64      	ldr	r2, [pc, #400]	; (8002f20 <HAL_I2C_Init+0x25c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d802      	bhi.n	8002d98 <HAL_I2C_Init+0xd4>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	e009      	b.n	8002dac <HAL_I2C_Init+0xe8>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	4a63      	ldr	r2, [pc, #396]	; (8002f30 <HAL_I2C_Init+0x26c>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	3301      	adds	r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4956      	ldr	r1, [pc, #344]	; (8002f20 <HAL_I2C_Init+0x25c>)
 8002dc8:	428b      	cmp	r3, r1
 8002dca:	d80d      	bhi.n	8002de8 <HAL_I2C_Init+0x124>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e59      	subs	r1, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	bf38      	it	cc
 8002de4:	2304      	movcc	r3, #4
 8002de6:	e04f      	b.n	8002e88 <HAL_I2C_Init+0x1c4>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d111      	bne.n	8002e14 <HAL_I2C_Init+0x150>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1e58      	subs	r0, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e012      	b.n	8002e3a <HAL_I2C_Init+0x176>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1e58      	subs	r0, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	0099      	lsls	r1, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Init+0x17e>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e022      	b.n	8002e88 <HAL_I2C_Init+0x1c4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10e      	bne.n	8002e68 <HAL_I2C_Init+0x1a4>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1e58      	subs	r0, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	440b      	add	r3, r1
 8002e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e66:	e00f      	b.n	8002e88 <HAL_I2C_Init+0x1c4>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	0099      	lsls	r1, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	6809      	ldr	r1, [r1, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6911      	ldr	r1, [r2, #16]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68d2      	ldr	r2, [r2, #12]
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	000186a0 	.word	0x000186a0
 8002f24:	001e847f 	.word	0x001e847f
 8002f28:	003d08ff 	.word	0x003d08ff
 8002f2c:	431bde83 	.word	0x431bde83
 8002f30:	10624dd3 	.word	0x10624dd3

08002f34 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e128      	b.n	8003198 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a90      	ldr	r2, [pc, #576]	; (80031a0 <HAL_I2S_Init+0x26c>)
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7fd fd69 	bl	8000a38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f7c:	f023 030f 	bic.w	r3, r3, #15
 8002f80:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2202      	movs	r2, #2
 8002f88:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d060      	beq.n	8003054 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e001      	b.n	8002fa4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d802      	bhi.n	8002fb2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f001 f99c 	bl	80042f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fb8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc2:	d125      	bne.n	8003010 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	461a      	mov	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	3305      	adds	r3, #5
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e01f      	b.n	800302e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	3305      	adds	r3, #5
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e00e      	b.n	800302e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fbb2 f2f3 	udiv	r2, r2, r3
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	3305      	adds	r3, #5
 800302c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4a5c      	ldr	r2, [pc, #368]	; (80031a4 <HAL_I2S_Init+0x270>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	08db      	lsrs	r3, r3, #3
 8003038:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003054:	2302      	movs	r3, #2
 8003056:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d902      	bls.n	8003068 <HAL_I2S_Init+0x134>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2bff      	cmp	r3, #255	; 0xff
 8003066:	d907      	bls.n	8003078 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e08f      	b.n	8003198 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	ea42 0103 	orr.w	r1, r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	430a      	orrs	r2, r1
 800308a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003096:	f023 030f 	bic.w	r3, r3, #15
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6851      	ldr	r1, [r2, #4]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68d2      	ldr	r2, [r2, #12]
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6992      	ldr	r2, [r2, #24]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d161      	bne.n	8003188 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_I2S_Init+0x274>)
 80030c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a37      	ldr	r2, [pc, #220]	; (80031ac <HAL_I2S_Init+0x278>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_I2S_Init+0x1a4>
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_I2S_Init+0x27c>)
 80030d6:	e001      	b.n	80030dc <HAL_I2S_Init+0x1a8>
 80030d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4932      	ldr	r1, [pc, #200]	; (80031ac <HAL_I2S_Init+0x278>)
 80030e4:	428a      	cmp	r2, r1
 80030e6:	d101      	bne.n	80030ec <HAL_I2S_Init+0x1b8>
 80030e8:	4a31      	ldr	r2, [pc, #196]	; (80031b0 <HAL_I2S_Init+0x27c>)
 80030ea:	e001      	b.n	80030f0 <HAL_I2S_Init+0x1bc>
 80030ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030f4:	f023 030f 	bic.w	r3, r3, #15
 80030f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <HAL_I2S_Init+0x278>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <HAL_I2S_Init+0x1d4>
 8003104:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_I2S_Init+0x27c>)
 8003106:	e001      	b.n	800310c <HAL_I2S_Init+0x1d8>
 8003108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800310c:	2202      	movs	r2, #2
 800310e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <HAL_I2S_Init+0x278>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_I2S_Init+0x1ea>
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_I2S_Init+0x27c>)
 800311c:	e001      	b.n	8003122 <HAL_I2S_Init+0x1ee>
 800311e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312e:	d003      	beq.n	8003138 <HAL_I2S_Init+0x204>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	e001      	b.n	8003144 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	b299      	uxth	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800315a:	4303      	orrs	r3, r0
 800315c:	b29b      	uxth	r3, r3
 800315e:	430b      	orrs	r3, r1
 8003160:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003162:	4313      	orrs	r3, r2
 8003164:	b29a      	uxth	r2, r3
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	4313      	orrs	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003170:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_I2S_Init+0x278>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_I2S_Init+0x24c>
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_I2S_Init+0x27c>)
 800317e:	e001      	b.n	8003184 <HAL_I2S_Init+0x250>
 8003180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003184:	897a      	ldrh	r2, [r7, #10]
 8003186:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	080032ab 	.word	0x080032ab
 80031a4:	cccccccd 	.word	0xcccccccd
 80031a8:	080033c1 	.word	0x080033c1
 80031ac:	40003800 	.word	0x40003800
 80031b0:	40003400 	.word	0x40003400

080031b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	1c9a      	adds	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10e      	bne.n	8003244 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003234:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffb8 	bl	80031b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	b292      	uxth	r2, r2
 8003260:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	1c9a      	adds	r2, r3, #2
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10e      	bne.n	80032a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003292:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff93 	bl	80031c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d13a      	bne.n	800333c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d109      	bne.n	80032e4 <I2S_IRQHandler+0x3a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d102      	bne.n	80032e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ffb4 	bl	800324c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d126      	bne.n	800333c <I2S_IRQHandler+0x92>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d11f      	bne.n	800333c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800330a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ff50 	bl	80031dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b03      	cmp	r3, #3
 8003346:	d136      	bne.n	80033b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d109      	bne.n	8003366 <I2S_IRQHandler+0xbc>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d102      	bne.n	8003366 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff45 	bl	80031f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d122      	bne.n	80033b6 <I2S_IRQHandler+0x10c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d11b      	bne.n	80033b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800338c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff13 	bl	80031dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4aa2      	ldr	r2, [pc, #648]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033da:	4ba2      	ldr	r3, [pc, #648]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033dc:	e001      	b.n	80033e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a9b      	ldr	r2, [pc, #620]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80033f8:	4b9a      	ldr	r3, [pc, #616]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033fa:	e001      	b.n	8003400 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80033fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340c:	d004      	beq.n	8003418 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8099 	bne.w	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d107      	bne.n	8003432 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f925 	bl	800367c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d107      	bne.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9c8 	bl	80037dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d13a      	bne.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d035      	beq.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a7e      	ldr	r2, [pc, #504]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800346a:	4b7e      	ldr	r3, [pc, #504]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800346c:	e001      	b.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800346e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4979      	ldr	r1, [pc, #484]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800347a:	428b      	cmp	r3, r1
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800347e:	4b79      	ldr	r3, [pc, #484]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800349a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fe88 	bl	80031dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	f040 80be 	bne.w	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80b8 	beq.w	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a59      	ldr	r2, [pc, #356]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80034fe:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003500:	e001      	b.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4954      	ldr	r1, [pc, #336]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800350e:	428b      	cmp	r3, r1
 8003510:	d101      	bne.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003512:	4b54      	ldr	r3, [pc, #336]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003514:	e001      	b.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800351e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fe4a 	bl	80031dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003548:	e084      	b.n	8003654 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d107      	bne.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8be 	bl	80036e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f8fd 	bl	8003778 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d12f      	bne.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02a      	beq.n	80035e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2e      	ldr	r2, [pc, #184]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035ae:	e001      	b.n	80035b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4929      	ldr	r1, [pc, #164]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035bc:	428b      	cmp	r3, r1
 80035be:	d101      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035c2:	e001      	b.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fdfa 	bl	80031dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d131      	bne.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d02c      	beq.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003608:	e001      	b.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800360a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4912      	ldr	r1, [pc, #72]	; (8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003616:	428b      	cmp	r3, r1
 8003618:	d101      	bne.n	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800361c:	e001      	b.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800361e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003622:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003626:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003636:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fdc5 	bl	80031dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003652:	e000      	b.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003654:	bf00      	nop
}
 8003656:	bf00      	nop
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40003800 	.word	0x40003800
 8003664:	40003400 	.word	0x40003400

08003668 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c99      	adds	r1, r3, #2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6251      	str	r1, [r2, #36]	; 0x24
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d113      	bne.n	80036d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ffc9 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	1c99      	adds	r1, r3, #2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6251      	str	r1, [r2, #36]	; 0x24
 80036f2:	8819      	ldrh	r1, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <I2SEx_TxISR_I2SExt+0x90>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <I2SEx_TxISR_I2SExt+0x22>
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <I2SEx_TxISR_I2SExt+0x94>)
 8003700:	e001      	b.n	8003706 <I2SEx_TxISR_I2SExt+0x26>
 8003702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003706:	460a      	mov	r2, r1
 8003708:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d121      	bne.n	8003766 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <I2SEx_TxISR_I2SExt+0x90>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <I2SEx_TxISR_I2SExt+0x50>
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <I2SEx_TxISR_I2SExt+0x94>)
 800372e:	e001      	b.n	8003734 <I2SEx_TxISR_I2SExt+0x54>
 8003730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	490d      	ldr	r1, [pc, #52]	; (8003770 <I2SEx_TxISR_I2SExt+0x90>)
 800373c:	428b      	cmp	r3, r1
 800373e:	d101      	bne.n	8003744 <I2SEx_TxISR_I2SExt+0x64>
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <I2SEx_TxISR_I2SExt+0x94>)
 8003742:	e001      	b.n	8003748 <I2SEx_TxISR_I2SExt+0x68>
 8003744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003748:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800374c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff81 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40003800 	.word	0x40003800
 8003774:	40003400 	.word	0x40003400

08003778 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68d8      	ldr	r0, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	1c99      	adds	r1, r3, #2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003790:	b282      	uxth	r2, r0
 8003792:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d113      	bne.n	80037d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff4a 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a20      	ldr	r2, [pc, #128]	; (800386c <I2SEx_RxISR_I2SExt+0x90>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <I2SEx_RxISR_I2SExt+0x16>
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <I2SEx_RxISR_I2SExt+0x94>)
 80037f0:	e001      	b.n	80037f6 <I2SEx_RxISR_I2SExt+0x1a>
 80037f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f6:	68d8      	ldr	r0, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	1c99      	adds	r1, r3, #2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003802:	b282      	uxth	r2, r0
 8003804:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d121      	bne.n	8003862 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a12      	ldr	r2, [pc, #72]	; (800386c <I2SEx_RxISR_I2SExt+0x90>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d101      	bne.n	800382c <I2SEx_RxISR_I2SExt+0x50>
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <I2SEx_RxISR_I2SExt+0x94>)
 800382a:	e001      	b.n	8003830 <I2SEx_RxISR_I2SExt+0x54>
 800382c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	490d      	ldr	r1, [pc, #52]	; (800386c <I2SEx_RxISR_I2SExt+0x90>)
 8003838:	428b      	cmp	r3, r1
 800383a:	d101      	bne.n	8003840 <I2SEx_RxISR_I2SExt+0x64>
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <I2SEx_RxISR_I2SExt+0x94>)
 800383e:	e001      	b.n	8003844 <I2SEx_RxISR_I2SExt+0x68>
 8003840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003844:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003848:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff03 	bl	8003668 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40003800 	.word	0x40003800
 8003870:	40003400 	.word	0x40003400

08003874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e25b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003892:	4ba3      	ldr	r3, [pc, #652]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4ba0      	ldr	r3, [pc, #640]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d112      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038aa:	4b9d      	ldr	r3, [pc, #628]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b99      	ldr	r3, [pc, #612]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05b      	beq.n	800397c <HAL_RCC_OscConfig+0x108>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d157      	bne.n	800397c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e236      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x74>
 80038da:	4b91      	ldr	r3, [pc, #580]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a90      	ldr	r2, [pc, #576]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a8a      	ldr	r2, [pc, #552]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a87      	ldr	r2, [pc, #540]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 800390c:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a83      	ldr	r2, [pc, #524]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b81      	ldr	r3, [pc, #516]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a80      	ldr	r2, [pc, #512]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd faa4 	bl	8000e78 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003934:	f7fd faa0 	bl	8000e78 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e1fb      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xc0>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fd fa90 	bl	8000e78 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800395c:	f7fd fa8c 	bl	8000e78 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1e7      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0xe8>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d063      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b5f      	ldr	r3, [pc, #380]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b5c      	ldr	r3, [pc, #368]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1bb      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b56      	ldr	r3, [pc, #344]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4952      	ldr	r1, [pc, #328]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e03a      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fd fa45 	bl	8000e78 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fd fa41 	bl	8000e78 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e19c      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	4b46      	ldr	r3, [pc, #280]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4940      	ldr	r1, [pc, #256]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_OscConfig+0x2b0>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fa24 	bl	8000e78 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fd fa20 	bl	8000e78 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e17b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d030      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a66:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fa04 	bl	8000e78 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fd fa00 	bl	8000e78 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e15b      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x200>
 8003a92:	e015      	b.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_OscConfig+0x2b4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fd f9ed 	bl	8000e78 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fd f9e9 	bl	8000e78 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e144      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a0 	beq.w	8003c0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d121      	bne.n	8003b4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_RCC_OscConfig+0x2b8>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fd f9af 	bl	8000e78 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e011      	b.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470000 	.word	0x42470000
 8003b28:	42470e80 	.word	0x42470e80
 8003b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fd f9a2 	bl	8000e78 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0fd      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_RCC_OscConfig+0x4d4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
 8003b56:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	e01c      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x312>
 8003b6c:	4b77      	ldr	r3, [pc, #476]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	4b74      	ldr	r3, [pc, #464]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	4a73      	ldr	r2, [pc, #460]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x32a>
 8003b86:	4b71      	ldr	r3, [pc, #452]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a70      	ldr	r2, [pc, #448]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	4b6e      	ldr	r3, [pc, #440]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a6d      	ldr	r2, [pc, #436]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fd f967 	bl	8000e78 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd f963 	bl	8000e78 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0bc      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCC_OscConfig+0x33a>
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd2:	f7fd f951 	bl	8000e78 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd f94d 	bl	8000e78 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0a6      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ee      	bne.n	8003bda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d105      	bne.n	8003c0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c02:	4b52      	ldr	r3, [pc, #328]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8092 	beq.w	8003d3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d05c      	beq.n	8003cde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d141      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fd f921 	bl	8000e78 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fd f91d 	bl	8000e78 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e078      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4c:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	4933      	ldr	r1, [pc, #204]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c82:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd f8f6 	bl	8000e78 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd f8f2 	bl	8000e78 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04d      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x41c>
 8003cae:	e045      	b.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x4dc>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fd f8df 	bl	8000e78 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd f8db 	bl	8000e78 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e036      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x44a>
 8003cdc:	e02e      	b.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e029      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cea:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <HAL_RCC_OscConfig+0x4d8>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d115      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d12:	4013      	ands	r3, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	42470060 	.word	0x42470060

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cc      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90c      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d044      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e067      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4934      	ldr	r1, [pc, #208]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fd f818 	bl	8000e78 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fd f814 	bl	8000e78 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e04f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20c      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f821 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ede:	4601      	mov	r1, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	5cd3      	ldrb	r3, [r2, r3]
 8003eee:	fa21 f303 	lsr.w	r3, r1, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc ff78 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	08006a94 	.word	0x08006a94
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000004 	.word	0x20000004

08003f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f36:	4b63      	ldr	r3, [pc, #396]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d007      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x32>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d008      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x38>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 80b4 	bne.w	80040b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f4e:	60bb      	str	r3, [r7, #8]
       break;
 8003f50:	e0b3      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f52:	4b5e      	ldr	r3, [pc, #376]	; (80040cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f54:	60bb      	str	r3, [r7, #8]
      break;
 8003f56:	e0b0      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f58:	4b5a      	ldr	r3, [pc, #360]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f62:	4b58      	ldr	r3, [pc, #352]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d04a      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea03 0501 	and.w	r5, r3, r1
 8003f84:	ea04 0602 	and.w	r6, r4, r2
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f04f 0400 	mov.w	r4, #0
 8003f94:	0154      	lsls	r4, r2, #5
 8003f96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f9a:	014b      	lsls	r3, r1, #5
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	1b49      	subs	r1, r1, r5
 8003fa2:	eb62 0206 	sbc.w	r2, r2, r6
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	f04f 0400 	mov.w	r4, #0
 8003fae:	0194      	lsls	r4, r2, #6
 8003fb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fb4:	018b      	lsls	r3, r1, #6
 8003fb6:	1a5b      	subs	r3, r3, r1
 8003fb8:	eb64 0402 	sbc.w	r4, r4, r2
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	00e2      	lsls	r2, r4, #3
 8003fc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fca:	00d9      	lsls	r1, r3, #3
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4614      	mov	r4, r2
 8003fd0:	195b      	adds	r3, r3, r5
 8003fd2:	eb44 0406 	adc.w	r4, r4, r6
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	0262      	lsls	r2, r4, #9
 8003fe0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fe4:	0259      	lsls	r1, r3, #9
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4614      	mov	r4, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	4621      	mov	r1, r4
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f04f 0400 	mov.w	r4, #0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	f7fc f8ee 	bl	80001d8 <__aeabi_uldivmod>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	e049      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004004:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	ea03 0501 	and.w	r5, r3, r1
 800401a:	ea04 0602 	and.w	r6, r4, r2
 800401e:	4629      	mov	r1, r5
 8004020:	4632      	mov	r2, r6
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	0154      	lsls	r4, r2, #5
 800402c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004030:	014b      	lsls	r3, r1, #5
 8004032:	4619      	mov	r1, r3
 8004034:	4622      	mov	r2, r4
 8004036:	1b49      	subs	r1, r1, r5
 8004038:	eb62 0206 	sbc.w	r2, r2, r6
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	f04f 0400 	mov.w	r4, #0
 8004044:	0194      	lsls	r4, r2, #6
 8004046:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800404a:	018b      	lsls	r3, r1, #6
 800404c:	1a5b      	subs	r3, r3, r1
 800404e:	eb64 0402 	sbc.w	r4, r4, r2
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	00e2      	lsls	r2, r4, #3
 800405c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004060:	00d9      	lsls	r1, r3, #3
 8004062:	460b      	mov	r3, r1
 8004064:	4614      	mov	r4, r2
 8004066:	195b      	adds	r3, r3, r5
 8004068:	eb44 0406 	adc.w	r4, r4, r6
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	02a2      	lsls	r2, r4, #10
 8004076:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800407a:	0299      	lsls	r1, r3, #10
 800407c:	460b      	mov	r3, r1
 800407e:	4614      	mov	r4, r2
 8004080:	4618      	mov	r0, r3
 8004082:	4621      	mov	r1, r4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	461a      	mov	r2, r3
 800408c:	4623      	mov	r3, r4
 800408e:	f7fc f8a3 	bl	80001d8 <__aeabi_uldivmod>
 8004092:	4603      	mov	r3, r0
 8004094:	460c      	mov	r4, r1
 8004096:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	60bb      	str	r3, [r7, #8]
      break;
 80040b2:	e002      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040b6:	60bb      	str	r3, [r7, #8]
      break;
 80040b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ba:	68bb      	ldr	r3, [r7, #8]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	007a1200 	.word	0x007a1200

080040d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000000 	.word	0x20000000

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff0 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80040f0:	4601      	mov	r1, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a9b      	lsrs	r3, r3, #10
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4a03      	ldr	r2, [pc, #12]	; (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	08006aa4 	.word	0x08006aa4

08004110 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004134:	2b00      	cmp	r3, #0
 8004136:	d038      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004138:	4b68      	ldr	r3, [pc, #416]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800413e:	f7fc fe9b 	bl	8000e78 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004146:	f7fc fe97 	bl	8000e78 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0bd      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004158:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	019b      	lsls	r3, r3, #6
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	071b      	lsls	r3, r3, #28
 8004176:	495a      	ldr	r1, [pc, #360]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800417e:	4b57      	ldr	r3, [pc, #348]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004184:	f7fc fe78 	bl	8000e78 <HAL_GetTick>
 8004188:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800418c:	f7fc fe74 	bl	8000e78 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e09a      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800419e:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8083 	beq.w	80042be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	4b48      	ldr	r3, [pc, #288]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	4a47      	ldr	r2, [pc, #284]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6413      	str	r3, [r2, #64]	; 0x40
 80041c8:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80041d4:	4b43      	ldr	r3, [pc, #268]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a42      	ldr	r2, [pc, #264]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041e0:	f7fc fe4a 	bl	8000e78 <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041e8:	f7fc fe46 	bl	8000e78 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e06c      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041fa:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004206:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d02f      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d028      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004224:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800422e:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004230:	2201      	movs	r2, #1
 8004232:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004234:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800423a:	4a29      	ldr	r2, [pc, #164]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004240:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d114      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800424c:	f7fc fe14 	bl	8000e78 <HAL_GetTick>
 8004250:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004252:	e00a      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fc fe10 	bl	8000e78 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e034      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ee      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004282:	d10d      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	4911      	ldr	r1, [pc, #68]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
 800429e:	e005      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042aa:	6093      	str	r3, [r2, #8]
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b8:	4909      	ldr	r1, [pc, #36]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7d1a      	ldrb	r2, [r3, #20]
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80042d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	42470068 	.word	0x42470068
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000
 80042e8:	42470e40 	.word	0x42470e40
 80042ec:	424711e0 	.word	0x424711e0

080042f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d13f      	bne.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004316:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800431e:	2b01      	cmp	r3, #1
 8004320:	d131      	bne.n	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004322:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004324:	617b      	str	r3, [r7, #20]
          break;
 8004326:	e031      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004328:	4b1c      	ldr	r3, [pc, #112]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004334:	d109      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004336:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e008      	b.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800434a:	4b14      	ldr	r3, [pc, #80]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800434c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004354:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	0f1b      	lsrs	r3, r3, #28
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]
          break;
 8004384:	e002      	b.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
          break;
 800438a:	bf00      	nop
        }
      }
      break;
 800438c:	bf00      	nop
    }
  }
  return frequency;
 800438e:	697b      	ldr	r3, [r7, #20]
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40023800 	.word	0x40023800
 80043a0:	00bb8000 	.word	0x00bb8000
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	00f42400 	.word	0x00f42400

080043ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e056      	b.n	800446c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fc fbfb 	bl	8000bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	ea42 0103 	orr.w	r1, r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	f003 0104 	and.w	r1, r3, #4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004474:	b084      	sub	sp, #16
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	f107 001c 	add.w	r0, r7, #28
 8004482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b01      	cmp	r3, #1
 800448a:	d122      	bne.n	80044d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f94a 	bl	8004760 <USB_CoreReset>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	e01a      	b.n	8004508 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f93e 	bl	8004760 <USB_CoreReset>
 80044e4:	4603      	mov	r3, r0
 80044e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
 80044fa:	e005      	b.n	8004508 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	2b01      	cmp	r3, #1
 800450c:	d10b      	bne.n	8004526 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f043 0206 	orr.w	r2, r3, #6
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004532:	b004      	add	sp, #16
 8004534:	4770      	bx	lr

08004536 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 0201 	bic.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60da      	str	r2, [r3, #12]
 80045a4:	e00b      	b.n	80045be <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	e001      	b.n	80045be <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e003      	b.n	80045c6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045be:	2032      	movs	r0, #50	; 0x32
 80045c0:	f7fc fc66 	bl	8000e90 <HAL_Delay>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	019b      	lsls	r3, r3, #6
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <USB_FlushTxFifo+0x48>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e006      	b.n	800460a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b20      	cmp	r3, #32
 8004606:	d0f0      	beq.n	80045ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	00030d40 	.word	0x00030d40

0800461c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2210      	movs	r2, #16
 800462c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <USB_FlushRxFifo+0x40>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e006      	b.n	800464e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b10      	cmp	r3, #16
 800464a:	d0f0      	beq.n	800462e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	00030d40 	.word	0x00030d40

08004660 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4611      	mov	r1, r2
 800466c:	461a      	mov	r2, r3
 800466e:	460b      	mov	r3, r1
 8004670:	71fb      	strb	r3, [r7, #7]
 8004672:	4613      	mov	r3, r2
 8004674:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800467e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11a      	bne.n	80046bc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004686:	88bb      	ldrh	r3, [r7, #4]
 8004688:	3303      	adds	r3, #3
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e00f      	b.n	80046b4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	031a      	lsls	r2, r3, #12
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4413      	add	r3, r2
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	461a      	mov	r2, r3
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	3304      	adds	r3, #4
 80046ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d3eb      	bcc.n	8004694 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3724      	adds	r7, #36	; 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b089      	sub	sp, #36	; 0x24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	4613      	mov	r3, r2
 80046d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	3303      	adds	r3, #3
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	e00b      	b.n	8004706 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3304      	adds	r3, #4
 80046fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	3301      	adds	r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3ef      	bcc.n	80046ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800470e:	69fb      	ldr	r3, [r7, #28]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3724      	adds	r7, #36	; 0x24
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004734:	68fb      	ldr	r3, [r7, #12]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0301 	and.w	r3, r3, #1
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <USB_CoreReset+0x64>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e01b      	b.n	80047b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	daf2      	bge.n	800476c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3301      	adds	r3, #1
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <USB_CoreReset+0x64>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e006      	b.n	80047b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d0f0      	beq.n	8004796 <USB_CoreReset+0x36>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	00030d40 	.word	0x00030d40

080047c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c8:	b084      	sub	sp, #16
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	f107 001c 	add.w	r0, r7, #28
 80047d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047e4:	461a      	mov	r2, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d018      	beq.n	800484c <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	2b03      	cmp	r3, #3
 800481e:	d10a      	bne.n	8004836 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e014      	b.n	8004860 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e009      	b.n	8004860 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800485a:	f023 0304 	bic.w	r3, r3, #4
 800485e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004860:	2110      	movs	r1, #16
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff feb4 	bl	80045d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fed7 	bl	800461c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e015      	b.n	80048a0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004886:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3301      	adds	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d3e5      	bcc.n	8004874 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80048a8:	2101      	movs	r1, #1
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f882 	bl	80049b4 <USB_DriveVbus>

  HAL_Delay(200U);
 80048b0:	20c8      	movs	r0, #200	; 0xc8
 80048b2:	f7fc faed 	bl	8000e90 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048c2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a14      	ldr	r2, [pc, #80]	; (800492c <USB_HostInit+0x164>)
 80048dc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a13      	ldr	r2, [pc, #76]	; (8004930 <USB_HostInit+0x168>)
 80048e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80048e6:	e009      	b.n	80048fc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a10      	ldr	r2, [pc, #64]	; (8004934 <USB_HostInit+0x16c>)
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <USB_HostInit+0x170>)
 80048f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f043 0210 	orr.w	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <USB_HostInit+0x174>)
 8004914:	4313      	orrs	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004926:	b004      	add	sp, #16
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	01000200 	.word	0x01000200
 8004930:	00e00300 	.word	0x00e00300
 8004934:	00600080 	.word	0x00600080
 8004938:	004000e0 	.word	0x004000e0
 800493c:	a3200008 	.word	0xa3200008

08004940 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004988:	461a      	mov	r2, r3
 800498a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800498e:	6053      	str	r3, [r2, #4]
 8004990:	e009      	b.n	80049a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d106      	bne.n	80049a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800499e:	461a      	mov	r2, r3
 80049a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80049a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <USB_DriveVbus+0x44>
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a02:	d109      	bne.n	8004a18 <USB_DriveVbus+0x64>
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	b29b      	uxth	r3, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	4608      	mov	r0, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	461a      	mov	r2, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	70fb      	strb	r3, [r7, #3]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	70bb      	strb	r3, [r7, #2]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a76:	461a      	mov	r2, r3
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d87e      	bhi.n	8004b84 <USB_HC_Init+0x13c>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <USB_HC_Init+0x44>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004b47 	.word	0x08004b47
 8004a94:	08004a9d 	.word	0x08004a9d
 8004a98:	08004b09 	.word	0x08004b09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f240 439d 	movw	r3, #1181	; 0x49d
 8004aae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004ab0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da10      	bge.n	8004ada <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004ad8:	e057      	b.n	8004b8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d051      	beq.n	8004b8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b04:	60d3      	str	r3, [r2, #12]
      break;
 8004b06:	e040      	b.n	8004b8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	461a      	mov	r2, r3
 8004b16:	f240 639d 	movw	r3, #1693	; 0x69d
 8004b1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	da34      	bge.n	8004b8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b44:	e023      	b.n	8004b8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b52:	461a      	mov	r2, r3
 8004b54:	f240 2325 	movw	r3, #549	; 0x225
 8004b58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da17      	bge.n	8004b92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b82:	e006      	b.n	8004b92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	75fb      	strb	r3, [r7, #23]
      break;
 8004b88:	e004      	b.n	8004b94 <USB_HC_Init+0x14c>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <USB_HC_Init+0x14c>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <USB_HC_Init+0x14c>
      break;
 8004b92:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9a:	699a      	ldr	r2, [r3, #24]
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004bbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da03      	bge.n	8004bce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e001      	b.n	8004bd2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d103      	bne.n	8004be2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e001      	b.n	8004be6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004be6:	787b      	ldrb	r3, [r7, #1]
 8004be8:	059b      	lsls	r3, r3, #22
 8004bea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bee:	78bb      	ldrb	r3, [r7, #2]
 8004bf0:	02db      	lsls	r3, r3, #11
 8004bf2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bf6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bfc:	049b      	lsls	r3, r3, #18
 8004bfe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c02:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	0159      	lsls	r1, r3, #5
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	440b      	add	r3, r1
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c22:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004c24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d10f      	bne.n	8004c4c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c4a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop

08004c5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d028      	beq.n	8004cd8 <USB_HC_StartXfer+0x7c>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	791b      	ldrb	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d124      	bne.n	8004cd8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <USB_HC_StartXfer+0x50>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	795b      	ldrb	r3, [r3, #5]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d107      	bne.n	8004cac <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fa2e 	bl	8005104 <USB_DoPing>
      return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e112      	b.n	8004ed2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d112      	bne.n	8004cd8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	6a3a      	ldr	r2, [r7, #32]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ccc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004cd0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d018      	beq.n	8004d12 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	8912      	ldrh	r2, [r2, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	3b01      	subs	r3, #1
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	8912      	ldrh	r2, [r2, #8]
 8004cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004cf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cf8:	8b7b      	ldrh	r3, [r7, #26]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d90b      	bls.n	8004d16 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004cfe:	8b7b      	ldrh	r3, [r7, #26]
 8004d00:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	8912      	ldrh	r2, [r2, #8]
 8004d08:	fb02 f203 	mul.w	r2, r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	611a      	str	r2, [r3, #16]
 8004d10:	e001      	b.n	8004d16 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004d12:	2301      	movs	r3, #1
 8004d14:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	78db      	ldrb	r3, [r3, #3]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	8912      	ldrh	r2, [r2, #8]
 8004d24:	fb02 f203 	mul.w	r2, r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d36:	04d9      	lsls	r1, r3, #19
 8004d38:	4b68      	ldr	r3, [pc, #416]	; (8004edc <USB_HC_StartXfer+0x280>)
 8004d3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	7a9b      	ldrb	r3, [r3, #10]
 8004d42:	075b      	lsls	r3, r3, #29
 8004d44:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d48:	69f9      	ldr	r1, [r7, #28]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	6a39      	ldr	r1, [r7, #32]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68d9      	ldr	r1, [r3, #12]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6e:	460a      	mov	r2, r1
 8004d70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004da8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	7e7b      	ldrb	r3, [r7, #25]
 8004dba:	075b      	lsls	r3, r3, #29
 8004dbc:	69f9      	ldr	r1, [r7, #28]
 8004dbe:	0148      	lsls	r0, r1, #5
 8004dc0:	6a39      	ldr	r1, [r7, #32]
 8004dc2:	4401      	add	r1, r0
 8004dc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004ddc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dde:	4b40      	ldr	r3, [pc, #256]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004de6:	4a3e      	ldr	r2, [pc, #248]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004de8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004df2:	4b3b      	ldr	r3, [pc, #236]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	4a39      	ldr	r2, [pc, #228]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e005      	b.n	8004e0c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004e00:	4b37      	ldr	r3, [pc, #220]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e08:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004e0a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e0c:	4b34      	ldr	r3, [pc, #208]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e14:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004e16:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <USB_HC_StartXfer+0x284>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d14e      	bne.n	8004ed0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	78db      	ldrb	r3, [r3, #3]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d14a      	bne.n	8004ed0 <USB_HC_StartXfer+0x274>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d046      	beq.n	8004ed0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	79db      	ldrb	r3, [r3, #7]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d830      	bhi.n	8004eac <USB_HC_StartXfer+0x250>
 8004e4a:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <USB_HC_StartXfer+0x1f4>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004e61 	.word	0x08004e61
 8004e5c:	08004e85 	.word	0x08004e85
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	3303      	adds	r3, #3
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e6a:	8afa      	ldrh	r2, [r7, #22]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d91c      	bls.n	8004eb0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f043 0220 	orr.w	r2, r3, #32
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	619a      	str	r2, [r3, #24]
          }
          break;
 8004e82:	e015      	b.n	8004eb0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	3303      	adds	r3, #3
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e8e:	8afa      	ldrh	r2, [r7, #22]
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d90a      	bls.n	8004eb4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	619a      	str	r2, [r3, #24]
          }
          break;
 8004eaa:	e003      	b.n	8004eb4 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004eac:	bf00      	nop
 8004eae:	e002      	b.n	8004eb6 <USB_HC_StartXfer+0x25a>
          break;
 8004eb0:	bf00      	nop
 8004eb2:	e000      	b.n	8004eb6 <USB_HC_StartXfer+0x25a>
          break;
 8004eb4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	68d9      	ldr	r1, [r3, #12]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	785a      	ldrb	r2, [r3, #1]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	b298      	uxth	r0, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4603      	mov	r3, r0
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fbc8 	bl	8004660 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	1ff80000 	.word	0x1ff80000
 8004ee0:	200000b0 	.word	0x200000b0

08004ee4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	b29b      	uxth	r3, r3
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b087      	sub	sp, #28
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	0c9b      	lsrs	r3, r3, #18
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <USB_HC_Halt+0x3a>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d16c      	bne.n	800501a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f5e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d143      	bne.n	8004ff4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004faa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd8:	d81d      	bhi.n	8005016 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff0:	d0ec      	beq.n	8004fcc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ff2:	e080      	b.n	80050f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	440a      	add	r2, r1
 800500a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005012:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005014:	e06f      	b.n	80050f6 <USB_HC_Halt+0x1f0>
          break;
 8005016:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005018:	e06d      	b.n	80050f6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005038:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d143      	bne.n	80050d2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4413      	add	r3, r2
 8005052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	440a      	add	r2, r1
 8005060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005068:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	440a      	add	r2, r1
 8005080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005088:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050a8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3301      	adds	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b6:	d81d      	bhi.n	80050f4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ce:	d0ec      	beq.n	80050aa <USB_HC_Halt+0x1a4>
 80050d0:	e011      	b.n	80050f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e000      	b.n	80050f6 <USB_HC_Halt+0x1f0>
          break;
 80050f4:	bf00      	nop
    }
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005118:	2301      	movs	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	04da      	lsls	r2, r3, #19
 8005120:	4b15      	ldr	r3, [pc, #84]	; (8005178 <USB_DoPing+0x74>)
 8005122:	4013      	ands	r3, r2
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	440a      	add	r2, r1
 800512c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005134:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800514c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005154:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	461a      	mov	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	1ff80000 	.word	0x1ff80000

0800517c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff f9e3 	bl	8004558 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005192:	2110      	movs	r1, #16
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff fa1b 	bl	80045d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff fa3e 	bl	800461c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	e01f      	b.n	80051e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051da:	461a      	mov	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	3301      	adds	r3, #1
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	d9dc      	bls.n	80051a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e034      	b.n	800525c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005208:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005210:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005218:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3301      	adds	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005238:	d80c      	bhi.n	8005254 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800524c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005250:	d0ec      	beq.n	800522c <USB_StopHost+0xb0>
 8005252:	e000      	b.n	8005256 <USB_StopHost+0xda>
        break;
 8005254:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3301      	adds	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0f      	cmp	r3, #15
 8005260:	d9c7      	bls.n	80051f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005268:	461a      	mov	r2, r3
 800526a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005276:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff f95c 	bl	8004536 <USB_EnableGlobalInt>

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af04      	add	r7, sp, #16
 800528e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005290:	2302      	movs	r3, #2
 8005292:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005294:	2301      	movs	r3, #1
 8005296:	2202      	movs	r2, #2
 8005298:	2102      	movs	r1, #2
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fc3a 	bl	8005b14 <USBH_FindInterface>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	2bff      	cmp	r3, #255	; 0xff
 80052a8:	f000 812a 	beq.w	8005500 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80052ac:	7bbb      	ldrb	r3, [r7, #14]
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fc13 	bl	8005adc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80052bc:	2050      	movs	r0, #80	; 0x50
 80052be:	f001 fb09 	bl	80068d4 <malloc>
 80052c2:	4603      	mov	r3, r0
 80052c4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80052d0:	7bbb      	ldrb	r3, [r7, #14]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	211a      	movs	r1, #26
 80052d6:	fb01 f303 	mul.w	r3, r1, r3
 80052da:	4413      	add	r3, r2
 80052dc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b25b      	sxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da15      	bge.n	8005314 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	211a      	movs	r1, #26
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052fe:	7bbb      	ldrb	r3, [r7, #14]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	211a      	movs	r1, #26
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	4413      	add	r3, r2
 800530a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 ff9f 	bl	800625e <USBH_AllocPipe>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	7819      	ldrb	r1, [r3, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	7858      	ldrb	r0, [r3, #1]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	8952      	ldrh	r2, [r2, #10]
 8005340:	9202      	str	r2, [sp, #8]
 8005342:	2203      	movs	r2, #3
 8005344:	9201      	str	r2, [sp, #4]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	4623      	mov	r3, r4
 800534a:	4602      	mov	r2, r0
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 ff57 	bl	8006200 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2200      	movs	r2, #0
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f001 fa14 	bl	8006788 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005360:	2300      	movs	r3, #0
 8005362:	2200      	movs	r2, #0
 8005364:	210a      	movs	r1, #10
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fbd4 	bl	8005b14 <USBH_FindInterface>
 800536c:	4603      	mov	r3, r0
 800536e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	2bff      	cmp	r3, #255	; 0xff
 8005374:	f000 80c4 	beq.w	8005500 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005378:	7bbb      	ldrb	r3, [r7, #14]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	211a      	movs	r1, #26
 800537e:	fb01 f303 	mul.w	r3, r1, r3
 8005382:	4413      	add	r3, r2
 8005384:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	b25b      	sxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	da16      	bge.n	80053be <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	211a      	movs	r1, #26
 8005396:	fb01 f303 	mul.w	r3, r1, r3
 800539a:	4413      	add	r3, r2
 800539c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053a6:	7bbb      	ldrb	r3, [r7, #14]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	211a      	movs	r1, #26
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053b6:	881a      	ldrh	r2, [r3, #0]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	835a      	strh	r2, [r3, #26]
 80053bc:	e015      	b.n	80053ea <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053be:	7bbb      	ldrb	r3, [r7, #14]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	211a      	movs	r1, #26
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	211a      	movs	r1, #26
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	211a      	movs	r1, #26
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da16      	bge.n	8005430 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005402:	7bbb      	ldrb	r3, [r7, #14]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	211a      	movs	r1, #26
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005418:	7bbb      	ldrb	r3, [r7, #14]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	211a      	movs	r1, #26
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005428:	881a      	ldrh	r2, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	835a      	strh	r2, [r3, #26]
 800542e:	e015      	b.n	800545c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005430:	7bbb      	ldrb	r3, [r7, #14]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	211a      	movs	r1, #26
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	211a      	movs	r1, #26
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	4413      	add	r3, r2
 8005452:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005456:	881a      	ldrh	r2, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	7b9b      	ldrb	r3, [r3, #14]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fefb 	bl	800625e <USBH_AllocPipe>
 8005468:	4603      	mov	r3, r0
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	7bdb      	ldrb	r3, [r3, #15]
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fef1 	bl	800625e <USBH_AllocPipe>
 800547c:	4603      	mov	r3, r0
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	7b59      	ldrb	r1, [r3, #13]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	7b98      	ldrb	r0, [r3, #14]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	8b12      	ldrh	r2, [r2, #24]
 800549c:	9202      	str	r2, [sp, #8]
 800549e:	2202      	movs	r2, #2
 80054a0:	9201      	str	r2, [sp, #4]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	4623      	mov	r3, r4
 80054a6:	4602      	mov	r2, r0
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fea9 	bl	8006200 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	7b19      	ldrb	r1, [r3, #12]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	7bd8      	ldrb	r0, [r3, #15]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	8b52      	ldrh	r2, [r2, #26]
 80054c6:	9202      	str	r2, [sp, #8]
 80054c8:	2202      	movs	r2, #2
 80054ca:	9201      	str	r2, [sp, #4]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4623      	mov	r3, r4
 80054d0:	4602      	mov	r2, r0
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fe94 	bl	8006200 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	7b5b      	ldrb	r3, [r3, #13]
 80054e4:	2200      	movs	r2, #0
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 f94d 	bl	8006788 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	7b1b      	ldrb	r3, [r3, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 f946 	bl	8006788 <USBH_LL_SetToggle>
      status = USBH_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bd90      	pop	{r4, r7, pc}

0800550a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fe87 	bl	800623e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 feaf 	bl	800629a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	7b1b      	ldrb	r3, [r3, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00e      	beq.n	8005568 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	7b1b      	ldrb	r3, [r3, #12]
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fe74 	bl	800623e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	7b1b      	ldrb	r3, [r3, #12]
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fe9c 	bl	800629a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	7b5b      	ldrb	r3, [r3, #13]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	7b5b      	ldrb	r3, [r3, #13]
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fe61 	bl	800623e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	7b5b      	ldrb	r3, [r3, #13]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fe89 	bl	800629a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 f99e 	bl	80068e4 <free>
    phost->pActiveClass->pData = 0U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055ae:	2200      	movs	r2, #0
 80055b0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80055c4:	2302      	movs	r3, #2
 80055c6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3340      	adds	r3, #64	; 0x40
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f8b2 	bl	8005742 <GetLineCoding>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80055ee:	2102      	movs	r1, #2
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
  }
  return status;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005620:	2b04      	cmp	r3, #4
 8005622:	d877      	bhi.n	8005714 <USBH_CDC_Process+0x114>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <USBH_CDC_Process+0x2c>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005641 	.word	0x08005641
 8005630:	08005647 	.word	0x08005647
 8005634:	08005677 	.word	0x08005677
 8005638:	080056eb 	.word	0x080056eb
 800563c:	080056f9 	.word	0x080056f9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]
    break;
 8005644:	e06d      	b.n	8005722 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f897 	bl	8005780 <SetLineCoding>
 8005652:	4603      	mov	r3, r0
 8005654:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005664:	e058      	b.n	8005718 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d055      	beq.n	8005718 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2204      	movs	r2, #4
 8005670:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005674:	e050      	b.n	8005718 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	3340      	adds	r3, #64	; 0x40
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f860 	bl	8005742 <GetLineCoding>
 8005682:	4603      	mov	r3, r0
 8005684:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d126      	bne.n	80056da <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569e:	791b      	ldrb	r3, [r3, #4]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d13b      	bne.n	800571c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ae:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d133      	bne.n	800571c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056be:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d12b      	bne.n	800571c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056cc:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d124      	bne.n	800571c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f95a 	bl	800598c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80056d8:	e020      	b.n	800571c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d01d      	beq.n	800571c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2204      	movs	r2, #4
 80056e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80056e8:	e018      	b.n	800571c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f867 	bl	80057be <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f8dc 	bl	80058ae <CDC_ProcessReception>
    break;
 80056f6:	e014      	b.n	8005722 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80056f8:	2100      	movs	r1, #0
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fb08 	bl	8005d10 <USBH_ClrFeature>
 8005700:	4603      	mov	r3, r0
 8005702:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005712:	e005      	b.n	8005720 <USBH_CDC_Process+0x120>

  default:
    break;
 8005714:	bf00      	nop
 8005716:	e004      	b.n	8005722 <USBH_CDC_Process+0x122>
    break;
 8005718:	bf00      	nop
 800571a:	e002      	b.n	8005722 <USBH_CDC_Process+0x122>
    break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <USBH_CDC_Process+0x122>
    break;
 8005720:	bf00      	nop

  }

  return status;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	22a1      	movs	r2, #161	; 0xa1
 8005750:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2221      	movs	r2, #33	; 0x21
 8005756:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2207      	movs	r2, #7
 8005768:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2207      	movs	r2, #7
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 faf1 	bl	8005d58 <USBH_CtlReq>
 8005776:	4603      	mov	r3, r0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2221      	movs	r2, #33	; 0x21
 800578e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2207      	movs	r2, #7
 80057a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2207      	movs	r2, #7
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fad2 	bl	8005d58 <USBH_CtlReq>
 80057b4:	4603      	mov	r3, r0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b086      	sub	sp, #24
 80057c2:	af02      	add	r7, sp, #8
 80057c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d002      	beq.n	80057e4 <CDC_ProcessTransmission+0x26>
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d025      	beq.n	800582e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80057e2:	e060      	b.n	80058a6 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	8b12      	ldrh	r2, [r2, #24]
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d90c      	bls.n	800580a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	69d9      	ldr	r1, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8b1a      	ldrh	r2, [r3, #24]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	7b58      	ldrb	r0, [r3, #13]
 80057fc:	2301      	movs	r3, #1
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4603      	mov	r3, r0
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fcb9 	bl	800617a <USBH_BulkSendData>
 8005808:	e00c      	b.n	8005824 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	7b58      	ldrb	r0, [r3, #13]
 8005818:	2301      	movs	r3, #1
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4603      	mov	r3, r0
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fcab 	bl	800617a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800582c:	e03b      	b.n	80058a6 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	7b5b      	ldrb	r3, [r3, #13]
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 ff7d 	bl	8006734 <USBH_LL_GetURBState>
 800583a:	4603      	mov	r3, r0
 800583c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d128      	bne.n	8005896 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	8b12      	ldrh	r2, [r2, #24]
 800584c:	4293      	cmp	r3, r2
 800584e:	d90e      	bls.n	800586e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	8b12      	ldrh	r2, [r2, #24]
 8005858:	1a9a      	subs	r2, r3, r2
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	8b12      	ldrh	r2, [r2, #24]
 8005866:	441a      	add	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	61da      	str	r2, [r3, #28]
 800586c:	e002      	b.n	8005874 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d004      	beq.n	8005886 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005884:	e00e      	b.n	80058a4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f868 	bl	8005964 <USBH_CDC_TransmitCallback>
    break;
 8005894:	e006      	b.n	80058a4 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d103      	bne.n	80058a4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058a4:	bf00      	nop
  }
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d002      	beq.n	80058d4 <CDC_ProcessReception+0x26>
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d00e      	beq.n	80058f0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 80058d2:	e043      	b.n	800595c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	6a19      	ldr	r1, [r3, #32]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	8b5a      	ldrh	r2, [r3, #26]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	7b1b      	ldrb	r3, [r3, #12]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fc6f 	bl	80061c4 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2204      	movs	r2, #4
 80058ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 80058ee:	e035      	b.n	800595c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	7b1b      	ldrb	r3, [r3, #12]
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 ff1c 	bl	8006734 <USBH_LL_GetURBState>
 80058fc:	4603      	mov	r3, r0
 80058fe:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005900:	7cfb      	ldrb	r3, [r7, #19]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d129      	bne.n	800595a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	7b1b      	ldrb	r3, [r3, #12]
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fe7f 	bl	8006610 <USBH_LL_GetLastXferSize>
 8005912:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	429a      	cmp	r2, r3
 800591c:	d016      	beq.n	800594c <CDC_ProcessReception+0x9e>
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	8b5b      	ldrh	r3, [r3, #26]
 8005922:	461a      	mov	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4293      	cmp	r3, r2
 8005928:	d910      	bls.n	800594c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	6a1a      	ldr	r2, [r3, #32]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	441a      	add	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2203      	movs	r2, #3
 8005946:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800594a:	e006      	b.n	800595a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f80f 	bl	8005978 <USBH_CDC_ReceiveCallback>
    break;
 800595a:	bf00      	nop
  }
}
 800595c:	bf00      	nop
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]

}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80059b4:	2302      	movs	r3, #2
 80059b6:	e019      	b.n	80059ec <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	79fa      	ldrb	r2, [r7, #7]
 80059bc:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f80f 	bl	80059f4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fda1 	bl	800652c <USBH_LL_Init>

  return USBH_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a00:	e008      	b.n	8005a14 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	32e0      	adds	r2, #224	; 0xe0
 8005a08:	2100      	movs	r1, #0
 8005a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b0e      	cmp	r3, #14
 8005a18:	d9f3      	bls.n	8005a02 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e009      	b.n	8005a34 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3301      	adds	r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3a:	d3f1      	bcc.n	8005a20 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2240      	movs	r2, #64	; 0x40
 8005a60:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10f      	bne.n	8005ac4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	33dc      	adds	r3, #220	; 0xdc
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
 8005ac2:	e004      	b.n	8005ace <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e001      	b.n	8005ace <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005aca:	2302      	movs	r3, #2
 8005acc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d204      	bcs.n	8005b02 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005b00:	e001      	b.n	8005b06 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005b02:	2302      	movs	r3, #2
 8005b04:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	70fb      	strb	r3, [r7, #3]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70bb      	strb	r3, [r7, #2]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005b3c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b3e:	e025      	b.n	8005b8c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	221a      	movs	r2, #26
 8005b44:	fb02 f303 	mul.w	r3, r2, r3
 8005b48:	3308      	adds	r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3302      	adds	r3, #2
 8005b50:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	795b      	ldrb	r3, [r3, #5]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d002      	beq.n	8005b62 <USBH_FindInterface+0x4e>
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	2bff      	cmp	r3, #255	; 0xff
 8005b60:	d111      	bne.n	8005b86 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b66:	78ba      	ldrb	r2, [r7, #2]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d002      	beq.n	8005b72 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b6c:	78bb      	ldrb	r3, [r7, #2]
 8005b6e:	2bff      	cmp	r3, #255	; 0xff
 8005b70:	d109      	bne.n	8005b86 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005b76:	787a      	ldrb	r2, [r7, #1]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d002      	beq.n	8005b82 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005b7c:	787b      	ldrb	r3, [r7, #1]
 8005b7e:	2bff      	cmp	r3, #255	; 0xff
 8005b80:	d101      	bne.n	8005b86 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	e006      	b.n	8005b94 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d9d6      	bls.n	8005b40 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b92:	23ff      	movs	r3, #255	; 0xff
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fcfb 	bl	80065a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005bae:	2101      	movs	r1, #1
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fdd2 	bl	800675a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f804 	bl	8005c02 <USBH_HandleSof>
}
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b0b      	cmp	r3, #11
 8005c12:	d10a      	bne.n	8005c2a <USBH_HandleSof+0x28>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	4798      	blx	r3
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005c42:	bf00      	nop
}
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005c5e:	bf00      	nop
}
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10f      	bne.n	8005c9c <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00e      	beq.n	8005cac <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005c94:	2104      	movs	r1, #4
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
 8005c9a:	e007      	b.n	8005cac <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d102      	bne.n	8005cac <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fc8b 	bl	80065da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	791b      	ldrb	r3, [r3, #4]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fae5 	bl	800629a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	795b      	ldrb	r3, [r3, #5]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fadf 	bl	800629a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cf4:	2105      	movs	r1, #5
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fc52 	bl	80065a4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2203      	movs	r2, #3
 8005d04:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	789b      	ldrb	r3, [r3, #2]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10f      	bne.n	8005d44 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005d44:	2200      	movs	r2, #0
 8005d46:	2100      	movs	r1, #0
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f805 	bl	8005d58 <USBH_CtlReq>
 8005d4e:	4603      	mov	r3, r0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	789b      	ldrb	r3, [r3, #2]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d002      	beq.n	8005d78 <USBH_CtlReq+0x20>
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d00f      	beq.n	8005d96 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005d76:	e034      	b.n	8005de2 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8005d90:	2301      	movs	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
    break;
 8005d94:	e025      	b.n	8005de2 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f828 	bl	8005dec <USBH_HandleControl>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d108      	bne.n	8005db8 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	75fb      	strb	r3, [r7, #23]
    break;
 8005db6:	e013      	b.n	8005de0 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d108      	bne.n	8005dd0 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	75fb      	strb	r3, [r7, #23]
    break;
 8005dce:	e007      	b.n	8005de0 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d104      	bne.n	8005de0 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	75fb      	strb	r3, [r7, #23]
    break;
 8005de0:	bf00      	nop
  }
  return status;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7e1b      	ldrb	r3, [r3, #24]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	2b0a      	cmp	r3, #10
 8005e04:	f200 814c 	bhi.w	80060a0 <USBH_HandleControl+0x2b4>
 8005e08:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <USBH_HandleControl+0x24>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	08005e57 	.word	0x08005e57
 8005e18:	08005ec1 	.word	0x08005ec1
 8005e1c:	08005ee7 	.word	0x08005ee7
 8005e20:	08005f1f 	.word	0x08005f1f
 8005e24:	08005f4b 	.word	0x08005f4b
 8005e28:	08005f9d 	.word	0x08005f9d
 8005e2c:	08005fbf 	.word	0x08005fbf
 8005e30:	08005ffb 	.word	0x08005ffb
 8005e34:	08006023 	.word	0x08006023
 8005e38:	08006061 	.word	0x08006061
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f103 0110 	add.w	r1, r3, #16
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	795b      	ldrb	r3, [r3, #5]
 8005e46:	461a      	mov	r2, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f939 	bl	80060c0 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	761a      	strb	r2, [r3, #24]
    break;
 8005e54:	e12f      	b.n	80060b6 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	795b      	ldrb	r3, [r3, #5]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fc69 	bl	8006734 <USBH_LL_GetURBState>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8005e66:	7bbb      	ldrb	r3, [r7, #14]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d11e      	bne.n	8005eaa <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	7c1b      	ldrb	r3, [r3, #16]
 8005e70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e74:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	8adb      	ldrh	r3, [r3, #22]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8005e7e:	7b7b      	ldrb	r3, [r7, #13]
 8005e80:	2b80      	cmp	r3, #128	; 0x80
 8005e82:	d103      	bne.n	8005e8c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2203      	movs	r2, #3
 8005e88:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e8a:	e10b      	b.n	80060a4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2205      	movs	r2, #5
 8005e90:	761a      	strb	r2, [r3, #24]
    break;
 8005e92:	e107      	b.n	80060a4 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8005e94:	7b7b      	ldrb	r3, [r7, #13]
 8005e96:	2b80      	cmp	r3, #128	; 0x80
 8005e98:	d103      	bne.n	8005ea2 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2209      	movs	r2, #9
 8005e9e:	761a      	strb	r2, [r3, #24]
    break;
 8005ea0:	e100      	b.n	80060a4 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2207      	movs	r2, #7
 8005ea6:	761a      	strb	r2, [r3, #24]
    break;
 8005ea8:	e0fc      	b.n	80060a4 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005eaa:	7bbb      	ldrb	r3, [r7, #14]
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d003      	beq.n	8005eb8 <USBH_HandleControl+0xcc>
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	f040 80f6 	bne.w	80060a4 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	220b      	movs	r2, #11
 8005ebc:	761a      	strb	r2, [r3, #24]
    break;
 8005ebe:	e0f1      	b.n	80060a4 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6899      	ldr	r1, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	899a      	ldrh	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	791b      	ldrb	r3, [r3, #4]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f930 	bl	800613e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	761a      	strb	r2, [r3, #24]
    break;
 8005ee4:	e0e7      	b.n	80060b6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	791b      	ldrb	r3, [r3, #4]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fc21 	bl	8006734 <USBH_LL_GetURBState>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d102      	bne.n	8005f02 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2209      	movs	r2, #9
 8005f00:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b05      	cmp	r3, #5
 8005f06:	d102      	bne.n	8005f0e <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f0c:	e0cc      	b.n	80060a8 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	f040 80c9 	bne.w	80060a8 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	220b      	movs	r2, #11
 8005f1a:	761a      	strb	r2, [r3, #24]
    break;
 8005f1c:	e0c4      	b.n	80060a8 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6899      	ldr	r1, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	899a      	ldrh	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	7958      	ldrb	r0, [r3, #5]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f8df 	bl	80060f4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2206      	movs	r2, #6
 8005f46:	761a      	strb	r2, [r3, #24]
    break;
 8005f48:	e0b5      	b.n	80060b6 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	795b      	ldrb	r3, [r3, #5]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fbef 	bl	8006734 <USBH_LL_GetURBState>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005f5a:	7bbb      	ldrb	r3, [r7, #14]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d103      	bne.n	8005f68 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2207      	movs	r2, #7
 8005f64:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f66:	e0a1      	b.n	80060ac <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	d105      	bne.n	8005f7a <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	220c      	movs	r2, #12
 8005f72:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005f74:	2303      	movs	r3, #3
 8005f76:	73fb      	strb	r3, [r7, #15]
    break;
 8005f78:	e098      	b.n	80060ac <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d103      	bne.n	8005f88 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2205      	movs	r2, #5
 8005f84:	761a      	strb	r2, [r3, #24]
    break;
 8005f86:	e091      	b.n	80060ac <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	f040 808e 	bne.w	80060ac <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	220b      	movs	r2, #11
 8005f94:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005f96:	2302      	movs	r3, #2
 8005f98:	73fb      	strb	r3, [r7, #15]
    break;
 8005f9a:	e087      	b.n	80060ac <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	791b      	ldrb	r3, [r3, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f8ca 	bl	800613e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	761a      	strb	r2, [r3, #24]

    break;
 8005fbc:	e07b      	b.n	80060b6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	791b      	ldrb	r3, [r3, #4]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fbb5 	bl	8006734 <USBH_LL_GetURBState>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d105      	bne.n	8005fe0 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	220d      	movs	r2, #13
 8005fd8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005fde:	e067      	b.n	80060b0 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d103      	bne.n	8005fee <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	220b      	movs	r2, #11
 8005fea:	761a      	strb	r2, [r3, #24]
    break;
 8005fec:	e060      	b.n	80060b0 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b05      	cmp	r3, #5
 8005ff2:	d15d      	bne.n	80060b0 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ff8:	e05a      	b.n	80060b0 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	795a      	ldrb	r2, [r3, #5]
 8005ffe:	2301      	movs	r3, #1
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	2200      	movs	r2, #0
 8006006:	2100      	movs	r1, #0
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f873 	bl	80060f4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006014:	b29a      	uxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	220a      	movs	r2, #10
 800601e:	761a      	strb	r2, [r3, #24]
    break;
 8006020:	e049      	b.n	80060b6 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	795b      	ldrb	r3, [r3, #5]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb83 	bl	8006734 <USBH_LL_GetURBState>
 800602e:	4603      	mov	r3, r0
 8006030:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006032:	7bbb      	ldrb	r3, [r7, #14]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d105      	bne.n	8006044 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	220d      	movs	r2, #13
 8006040:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006042:	e037      	b.n	80060b4 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d103      	bne.n	8006052 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2209      	movs	r2, #9
 800604e:	761a      	strb	r2, [r3, #24]
    break;
 8006050:	e030      	b.n	80060b4 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006052:	7bbb      	ldrb	r3, [r7, #14]
 8006054:	2b04      	cmp	r3, #4
 8006056:	d12d      	bne.n	80060b4 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	220b      	movs	r2, #11
 800605c:	761a      	strb	r2, [r3, #24]
    break;
 800605e:	e029      	b.n	80060b4 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7e5b      	ldrb	r3, [r3, #25]
 8006064:	3301      	adds	r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	765a      	strb	r2, [r3, #25]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	7e5b      	ldrb	r3, [r3, #25]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d809      	bhi.n	8006088 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fab0 	bl	80065da <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006086:	e016      	b.n	80060b6 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800608e:	2106      	movs	r1, #6
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800609a:	2302      	movs	r3, #2
 800609c:	73fb      	strb	r3, [r7, #15]
    break;
 800609e:	e00a      	b.n	80060b6 <USBH_HandleControl+0x2ca>

  default:
    break;
 80060a0:	bf00      	nop
 80060a2:	e008      	b.n	80060b6 <USBH_HandleControl+0x2ca>
    break;
 80060a4:	bf00      	nop
 80060a6:	e006      	b.n	80060b6 <USBH_HandleControl+0x2ca>
    break;
 80060a8:	bf00      	nop
 80060aa:	e004      	b.n	80060b6 <USBH_HandleControl+0x2ca>
    break;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <USBH_HandleControl+0x2ca>
    break;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <USBH_HandleControl+0x2ca>
    break;
 80060b4:	bf00      	nop
  }
  return status;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af04      	add	r7, sp, #16
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80060ce:	79f9      	ldrb	r1, [r7, #7]
 80060d0:	2300      	movs	r3, #0
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	2308      	movs	r3, #8
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	2200      	movs	r2, #0
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 faf4 	bl	80066d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af04      	add	r7, sp, #16
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4611      	mov	r1, r2
 8006100:	461a      	mov	r2, r3
 8006102:	460b      	mov	r3, r1
 8006104:	80fb      	strh	r3, [r7, #6]
 8006106:	4613      	mov	r3, r2
 8006108:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006118:	7979      	ldrb	r1, [r7, #5]
 800611a:	7e3b      	ldrb	r3, [r7, #24]
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	2301      	movs	r3, #1
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	2200      	movs	r2, #0
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 facf 	bl	80066d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b088      	sub	sp, #32
 8006142:	af04      	add	r7, sp, #16
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	4611      	mov	r1, r2
 800614a:	461a      	mov	r2, r3
 800614c:	460b      	mov	r3, r1
 800614e:	80fb      	strh	r3, [r7, #6]
 8006150:	4613      	mov	r3, r2
 8006152:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006154:	7979      	ldrb	r1, [r7, #5]
 8006156:	2300      	movs	r3, #0
 8006158:	9303      	str	r3, [sp, #12]
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	9302      	str	r3, [sp, #8]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	2301      	movs	r3, #1
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	2300      	movs	r3, #0
 8006168:	2201      	movs	r2, #1
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fab1 	bl	80066d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006170:	2300      	movs	r3, #0

}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b088      	sub	sp, #32
 800617e:	af04      	add	r7, sp, #16
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	4611      	mov	r1, r2
 8006186:	461a      	mov	r2, r3
 8006188:	460b      	mov	r3, r1
 800618a:	80fb      	strh	r3, [r7, #6]
 800618c:	4613      	mov	r3, r2
 800618e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800619e:	7979      	ldrb	r1, [r7, #5]
 80061a0:	7e3b      	ldrb	r3, [r7, #24]
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	9302      	str	r3, [sp, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	2301      	movs	r3, #1
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	2302      	movs	r3, #2
 80061b2:	2200      	movs	r2, #0
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fa8c 	bl	80066d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af04      	add	r7, sp, #16
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4611      	mov	r1, r2
 80061d0:	461a      	mov	r2, r3
 80061d2:	460b      	mov	r3, r1
 80061d4:	80fb      	strh	r3, [r7, #6]
 80061d6:	4613      	mov	r3, r2
 80061d8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80061da:	7979      	ldrb	r1, [r7, #5]
 80061dc:	2300      	movs	r3, #0
 80061de:	9303      	str	r3, [sp, #12]
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	9302      	str	r3, [sp, #8]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	2301      	movs	r3, #1
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	2302      	movs	r3, #2
 80061ee:	2201      	movs	r2, #1
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fa6e 	bl	80066d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af04      	add	r7, sp, #16
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	4608      	mov	r0, r1
 800620a:	4611      	mov	r1, r2
 800620c:	461a      	mov	r2, r3
 800620e:	4603      	mov	r3, r0
 8006210:	70fb      	strb	r3, [r7, #3]
 8006212:	460b      	mov	r3, r1
 8006214:	70bb      	strb	r3, [r7, #2]
 8006216:	4613      	mov	r3, r2
 8006218:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800621a:	7878      	ldrb	r0, [r7, #1]
 800621c:	78ba      	ldrb	r2, [r7, #2]
 800621e:	78f9      	ldrb	r1, [r7, #3]
 8006220:	8b3b      	ldrh	r3, [r7, #24]
 8006222:	9302      	str	r3, [sp, #8]
 8006224:	7d3b      	ldrb	r3, [r7, #20]
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	7c3b      	ldrb	r3, [r7, #16]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4603      	mov	r3, r0
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa01 	bl	8006636 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8006234:	2300      	movs	r3, #0

}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa20 	bl	8006694 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006254:	2300      	movs	r3, #0

}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f831 	bl	80062d2 <USBH_GetFreePipe>
 8006270:	4603      	mov	r3, r0
 8006272:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	89fa      	ldrh	r2, [r7, #14]
 8006282:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32e0      	adds	r2, #224	; 0xe0
 800628a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800628e:	89fb      	ldrh	r3, [r7, #14]
 8006290:	b2db      	uxtb	r3, r3
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	2b0a      	cmp	r3, #10
 80062aa:	d80b      	bhi.n	80062c4 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32e0      	adds	r2, #224	; 0xe0
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	32e0      	adds	r2, #224	; 0xe0
 80062c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
 80062e2:	e00e      	b.n	8006302 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80062e4:	7bfa      	ldrb	r2, [r7, #15]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	32e0      	adds	r2, #224	; 0xe0
 80062ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	e007      	b.n	800630c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	3301      	adds	r3, #1
 8006300:	73fb      	strb	r3, [r7, #15]
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2b0a      	cmp	r3, #10
 8006306:	d9ed      	bls.n	80062e4 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006308:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800631c:	2201      	movs	r2, #1
 800631e:	490e      	ldr	r1, [pc, #56]	; (8006358 <MX_USB_HOST_Init+0x40>)
 8006320:	480e      	ldr	r0, [pc, #56]	; (800635c <MX_USB_HOST_Init+0x44>)
 8006322:	f7ff fb3d 	bl	80059a0 <USBH_Init>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800632c:	f7fa fb0c 	bl	8000948 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006330:	490b      	ldr	r1, [pc, #44]	; (8006360 <MX_USB_HOST_Init+0x48>)
 8006332:	480a      	ldr	r0, [pc, #40]	; (800635c <MX_USB_HOST_Init+0x44>)
 8006334:	f7ff fba7 	bl	8005a86 <USBH_RegisterClass>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800633e:	f7fa fb03 	bl	8000948 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006342:	4806      	ldr	r0, [pc, #24]	; (800635c <MX_USB_HOST_Init+0x44>)
 8006344:	f7ff fc2c 	bl	8005ba0 <USBH_Start>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800634e:	f7fa fafb 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006352:	bf00      	nop
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	08006365 	.word	0x08006365
 800635c:	20000200 	.word	0x20000200
 8006360:	2000000c 	.word	0x2000000c

08006364 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	3b01      	subs	r3, #1
 8006374:	2b04      	cmp	r3, #4
 8006376:	d819      	bhi.n	80063ac <USBH_UserProcess+0x48>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBH_UserProcess+0x1c>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	080063ad 	.word	0x080063ad
 8006384:	0800639d 	.word	0x0800639d
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063a5 	.word	0x080063a5
 8006390:	08006395 	.word	0x08006395
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <USBH_UserProcess+0x58>)
 8006396:	2203      	movs	r2, #3
 8006398:	701a      	strb	r2, [r3, #0]
  break;
 800639a:	e008      	b.n	80063ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800639c:	4b07      	ldr	r3, [pc, #28]	; (80063bc <USBH_UserProcess+0x58>)
 800639e:	2202      	movs	r2, #2
 80063a0:	701a      	strb	r2, [r3, #0]
  break;
 80063a2:	e004      	b.n	80063ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <USBH_UserProcess+0x58>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	701a      	strb	r2, [r3, #0]
  break;
 80063aa:	e000      	b.n	80063ae <USBH_UserProcess+0x4a>

  default:
  break;
 80063ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	200000b4 	.word	0x200000b4

080063c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063c8:	f107 0314 	add.w	r3, r7, #20
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	605a      	str	r2, [r3, #4]
 80063d2:	609a      	str	r2, [r3, #8]
 80063d4:	60da      	str	r2, [r3, #12]
 80063d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063e0:	d147      	bne.n	8006472 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063e2:	2300      	movs	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	4b25      	ldr	r3, [pc, #148]	; (800647c <HAL_HCD_MspInit+0xbc>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	4a24      	ldr	r2, [pc, #144]	; (800647c <HAL_HCD_MspInit+0xbc>)
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	6313      	str	r3, [r2, #48]	; 0x30
 80063f2:	4b22      	ldr	r3, [pc, #136]	; (800647c <HAL_HCD_MspInit+0xbc>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80063fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006404:	2300      	movs	r3, #0
 8006406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006408:	2300      	movs	r3, #0
 800640a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800640c:	f107 0314 	add.w	r3, r7, #20
 8006410:	4619      	mov	r1, r3
 8006412:	481b      	ldr	r0, [pc, #108]	; (8006480 <HAL_HCD_MspInit+0xc0>)
 8006414:	f7fa fe70 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006418:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800641c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641e:	2302      	movs	r3, #2
 8006420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006426:	2303      	movs	r3, #3
 8006428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800642a:	230a      	movs	r3, #10
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800642e:	f107 0314 	add.w	r3, r7, #20
 8006432:	4619      	mov	r1, r3
 8006434:	4812      	ldr	r0, [pc, #72]	; (8006480 <HAL_HCD_MspInit+0xc0>)
 8006436:	f7fa fe5f 	bl	80010f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800643a:	4b10      	ldr	r3, [pc, #64]	; (800647c <HAL_HCD_MspInit+0xbc>)
 800643c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643e:	4a0f      	ldr	r2, [pc, #60]	; (800647c <HAL_HCD_MspInit+0xbc>)
 8006440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006444:	6353      	str	r3, [r2, #52]	; 0x34
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <HAL_HCD_MspInit+0xbc>)
 800644c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644e:	4a0b      	ldr	r2, [pc, #44]	; (800647c <HAL_HCD_MspInit+0xbc>)
 8006450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006454:	6453      	str	r3, [r2, #68]	; 0x44
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_HCD_MspInit+0xbc>)
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006462:	2200      	movs	r2, #0
 8006464:	2100      	movs	r1, #0
 8006466:	2043      	movs	r0, #67	; 0x43
 8006468:	f7fa fe0f 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800646c:	2043      	movs	r0, #67	; 0x43
 800646e:	f7fa fe28 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006472:	bf00      	nop
 8006474:	3728      	adds	r7, #40	; 0x28
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40023800 	.word	0x40023800
 8006480:	40020000 	.word	0x40020000

08006484 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fba3 	bl	8005bde <USBH_LL_IncTimer>
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fbdb 	bl	8005c6a <USBH_LL_Connect>
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff fbf3 	bl	8005cb6 <USBH_LL_Disconnect>
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
 80064e4:	4613      	mov	r3, r2
 80064e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fb95 	bl	8005c32 <USBH_LL_PortEnabled>
} 
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fb95 	bl	8005c4e <USBH_LL_PortDisabled>
} 
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d12a      	bne.n	8006594 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800653e:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <USBH_LL_Init+0x74>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <USBH_LL_Init+0x74>)
 800654a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <USBH_LL_Init+0x74>)
 8006550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006554:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <USBH_LL_Init+0x74>)
 8006558:	2208      	movs	r2, #8
 800655a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800655c:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <USBH_LL_Init+0x74>)
 800655e:	2201      	movs	r2, #1
 8006560:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006562:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <USBH_LL_Init+0x74>)
 8006564:	2200      	movs	r2, #0
 8006566:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <USBH_LL_Init+0x74>)
 800656a:	2202      	movs	r2, #2
 800656c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800656e:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <USBH_LL_Init+0x74>)
 8006570:	2200      	movs	r2, #0
 8006572:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006574:	480a      	ldr	r0, [pc, #40]	; (80065a0 <USBH_LL_Init+0x74>)
 8006576:	f7fa ff5a 	bl	800142e <HAL_HCD_Init>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006580:	f7fa f9e2 	bl	8000948 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006584:	4806      	ldr	r0, [pc, #24]	; (80065a0 <USBH_LL_Init+0x74>)
 8006586:	f7fb fb47 	bl	8001c18 <HAL_HCD_GetCurrentFrame>
 800658a:	4603      	mov	r3, r0
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff fb16 	bl	8005bc0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200005cc 	.word	0x200005cc

080065a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fb fac2 	bl	8001b44 <HAL_HCD_Start>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f912 	bl	80067f0 <USBH_Get_USB_Status>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fb faca 	bl	8001b8a <HAL_HCD_Stop>
 80065f6:	4603      	mov	r3, r0
 80065f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f8f7 	bl	80067f0 <USBH_Get_USB_Status>
 8006602:	4603      	mov	r3, r0
 8006604:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006606:	7bbb      	ldrb	r3, [r7, #14]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f7fb fae1 	bl	8001bee <HAL_HCD_HC_GetXferCount>
 800662c:	4603      	mov	r3, r0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006636:	b590      	push	{r4, r7, lr}
 8006638:	b089      	sub	sp, #36	; 0x24
 800663a:	af04      	add	r7, sp, #16
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	4608      	mov	r0, r1
 8006640:	4611      	mov	r1, r2
 8006642:	461a      	mov	r2, r3
 8006644:	4603      	mov	r3, r0
 8006646:	70fb      	strb	r3, [r7, #3]
 8006648:	460b      	mov	r3, r1
 800664a:	70bb      	strb	r3, [r7, #2]
 800664c:	4613      	mov	r3, r2
 800664e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800665e:	787c      	ldrb	r4, [r7, #1]
 8006660:	78ba      	ldrb	r2, [r7, #2]
 8006662:	78f9      	ldrb	r1, [r7, #3]
 8006664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006666:	9302      	str	r3, [sp, #8]
 8006668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	4623      	mov	r3, r4
 8006676:	f7fa ff3c 	bl	80014f2 <HAL_HCD_HC_Init>
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	4618      	mov	r0, r3
 8006682:	f000 f8b5 	bl	80067f0 <USBH_Get_USB_Status>
 8006686:	4603      	mov	r3, r0
 8006688:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800668a:	7bbb      	ldrb	r3, [r7, #14]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	bd90      	pop	{r4, r7, pc}

08006694 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066ae:	78fa      	ldrb	r2, [r7, #3]
 80066b0:	4611      	mov	r1, r2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fa ffb5 	bl	8001622 <HAL_HCD_HC_Halt>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f896 	bl	80067f0 <USBH_Get_USB_Status>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80066d2:	b590      	push	{r4, r7, lr}
 80066d4:	b089      	sub	sp, #36	; 0x24
 80066d6:	af04      	add	r7, sp, #16
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	4608      	mov	r0, r1
 80066dc:	4611      	mov	r1, r2
 80066de:	461a      	mov	r2, r3
 80066e0:	4603      	mov	r3, r0
 80066e2:	70fb      	strb	r3, [r7, #3]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70bb      	strb	r3, [r7, #2]
 80066e8:	4613      	mov	r3, r2
 80066ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80066fa:	787c      	ldrb	r4, [r7, #1]
 80066fc:	78ba      	ldrb	r2, [r7, #2]
 80066fe:	78f9      	ldrb	r1, [r7, #3]
 8006700:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006704:	9303      	str	r3, [sp, #12]
 8006706:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4623      	mov	r3, r4
 8006716:	f7fa ffa7 	bl	8001668 <HAL_HCD_HC_SubmitRequest>
 800671a:	4603      	mov	r3, r0
 800671c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f865 	bl	80067f0 <USBH_Get_USB_Status>
 8006726:	4603      	mov	r3, r0
 8006728:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800672a:	7bbb      	ldrb	r3, [r7, #14]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}

08006734 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f7fb fa3a 	bl	8001bc4 <HAL_HCD_HC_GetURBState>
 8006750:	4603      	mov	r3, r0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800676c:	2b01      	cmp	r3, #1
 800676e:	d103      	bne.n	8006778 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f868 	bl	8006848 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006778:	20c8      	movs	r0, #200	; 0xc8
 800677a:	f7fa fb89 	bl	8000e90 <HAL_Delay>
  return USBH_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
 8006794:	4613      	mov	r3, r2
 8006796:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800679e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	440b      	add	r3, r1
 80067ae:	333b      	adds	r3, #59	; 0x3b
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	68f9      	ldr	r1, [r7, #12]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	440b      	add	r3, r1
 80067c4:	3350      	adds	r3, #80	; 0x50
 80067c6:	78ba      	ldrb	r2, [r7, #2]
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e009      	b.n	80067e0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80067cc:	78fa      	ldrb	r2, [r7, #3]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	440b      	add	r3, r1
 80067da:	3351      	adds	r3, #81	; 0x51
 80067dc:	78ba      	ldrb	r2, [r7, #2]
 80067de:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d817      	bhi.n	8006834 <USBH_Get_USB_Status+0x44>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBH_Get_USB_Status+0x1c>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	0800681d 	.word	0x0800681d
 8006810:	08006823 	.word	0x08006823
 8006814:	08006829 	.word	0x08006829
 8006818:	0800682f 	.word	0x0800682f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
    break;
 8006820:	e00b      	b.n	800683a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006822:	2302      	movs	r3, #2
 8006824:	73fb      	strb	r3, [r7, #15]
    break;
 8006826:	e008      	b.n	800683a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
    break;
 800682c:	e005      	b.n	800683a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800682e:	2302      	movs	r3, #2
 8006830:	73fb      	strb	r3, [r7, #15]
    break;
 8006832:	e002      	b.n	800683a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006834:	2302      	movs	r3, #2
 8006836:	73fb      	strb	r3, [r7, #15]
    break;
 8006838:	bf00      	nop
  }
  return usb_status;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800685c:	2301      	movs	r3, #1
 800685e:	73fb      	strb	r3, [r7, #15]
 8006860:	e001      	b.n	8006866 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	461a      	mov	r2, r3
 800686a:	2101      	movs	r1, #1
 800686c:	4803      	ldr	r0, [pc, #12]	; (800687c <MX_DriverVbusFS+0x34>)
 800686e:	f7fa fdc5 	bl	80013fc <HAL_GPIO_WritePin>
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40020800 	.word	0x40020800

08006880 <__errno>:
 8006880:	4b01      	ldr	r3, [pc, #4]	; (8006888 <__errno+0x8>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	2000002c 	.word	0x2000002c

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4e0d      	ldr	r6, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1ba4      	subs	r4, r4, r6
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2500      	movs	r5, #0
 8006898:	42a5      	cmp	r5, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4e0b      	ldr	r6, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f000 f8ea 	bl	8006a78 <_init>
 80068a4:	1ba4      	subs	r4, r4, r6
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2500      	movs	r5, #0
 80068aa:	42a5      	cmp	r5, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068b4:	4798      	blx	r3
 80068b6:	3501      	adds	r5, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068be:	4798      	blx	r3
 80068c0:	3501      	adds	r5, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08006ab4 	.word	0x08006ab4
 80068c8:	08006ab4 	.word	0x08006ab4
 80068cc:	08006ab4 	.word	0x08006ab4
 80068d0:	08006ab8 	.word	0x08006ab8

080068d4 <malloc>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <malloc+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f000 b861 	b.w	80069a0 <_malloc_r>
 80068de:	bf00      	nop
 80068e0:	2000002c 	.word	0x2000002c

080068e4 <free>:
 80068e4:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <free+0xc>)
 80068e6:	4601      	mov	r1, r0
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	f000 b80b 	b.w	8006904 <_free_r>
 80068ee:	bf00      	nop
 80068f0:	2000002c 	.word	0x2000002c

080068f4 <memset>:
 80068f4:	4402      	add	r2, r0
 80068f6:	4603      	mov	r3, r0
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d100      	bne.n	80068fe <memset+0xa>
 80068fc:	4770      	bx	lr
 80068fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006902:	e7f9      	b.n	80068f8 <memset+0x4>

08006904 <_free_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4605      	mov	r5, r0
 8006908:	2900      	cmp	r1, #0
 800690a:	d045      	beq.n	8006998 <_free_r+0x94>
 800690c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006910:	1f0c      	subs	r4, r1, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	bfb8      	it	lt
 8006916:	18e4      	addlt	r4, r4, r3
 8006918:	f000 f8ac 	bl	8006a74 <__malloc_lock>
 800691c:	4a1f      	ldr	r2, [pc, #124]	; (800699c <_free_r+0x98>)
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	4610      	mov	r0, r2
 8006922:	b933      	cbnz	r3, 8006932 <_free_r+0x2e>
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6014      	str	r4, [r2, #0]
 8006928:	4628      	mov	r0, r5
 800692a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692e:	f000 b8a2 	b.w	8006a76 <__malloc_unlock>
 8006932:	42a3      	cmp	r3, r4
 8006934:	d90c      	bls.n	8006950 <_free_r+0x4c>
 8006936:	6821      	ldr	r1, [r4, #0]
 8006938:	1862      	adds	r2, r4, r1
 800693a:	4293      	cmp	r3, r2
 800693c:	bf04      	itt	eq
 800693e:	681a      	ldreq	r2, [r3, #0]
 8006940:	685b      	ldreq	r3, [r3, #4]
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	bf04      	itt	eq
 8006946:	1852      	addeq	r2, r2, r1
 8006948:	6022      	streq	r2, [r4, #0]
 800694a:	6004      	str	r4, [r0, #0]
 800694c:	e7ec      	b.n	8006928 <_free_r+0x24>
 800694e:	4613      	mov	r3, r2
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	b10a      	cbz	r2, 8006958 <_free_r+0x54>
 8006954:	42a2      	cmp	r2, r4
 8006956:	d9fa      	bls.n	800694e <_free_r+0x4a>
 8006958:	6819      	ldr	r1, [r3, #0]
 800695a:	1858      	adds	r0, r3, r1
 800695c:	42a0      	cmp	r0, r4
 800695e:	d10b      	bne.n	8006978 <_free_r+0x74>
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	4401      	add	r1, r0
 8006964:	1858      	adds	r0, r3, r1
 8006966:	4282      	cmp	r2, r0
 8006968:	6019      	str	r1, [r3, #0]
 800696a:	d1dd      	bne.n	8006928 <_free_r+0x24>
 800696c:	6810      	ldr	r0, [r2, #0]
 800696e:	6852      	ldr	r2, [r2, #4]
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	4401      	add	r1, r0
 8006974:	6019      	str	r1, [r3, #0]
 8006976:	e7d7      	b.n	8006928 <_free_r+0x24>
 8006978:	d902      	bls.n	8006980 <_free_r+0x7c>
 800697a:	230c      	movs	r3, #12
 800697c:	602b      	str	r3, [r5, #0]
 800697e:	e7d3      	b.n	8006928 <_free_r+0x24>
 8006980:	6820      	ldr	r0, [r4, #0]
 8006982:	1821      	adds	r1, r4, r0
 8006984:	428a      	cmp	r2, r1
 8006986:	bf04      	itt	eq
 8006988:	6811      	ldreq	r1, [r2, #0]
 800698a:	6852      	ldreq	r2, [r2, #4]
 800698c:	6062      	str	r2, [r4, #4]
 800698e:	bf04      	itt	eq
 8006990:	1809      	addeq	r1, r1, r0
 8006992:	6021      	streq	r1, [r4, #0]
 8006994:	605c      	str	r4, [r3, #4]
 8006996:	e7c7      	b.n	8006928 <_free_r+0x24>
 8006998:	bd38      	pop	{r3, r4, r5, pc}
 800699a:	bf00      	nop
 800699c:	200000b8 	.word	0x200000b8

080069a0 <_malloc_r>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	1ccd      	adds	r5, r1, #3
 80069a4:	f025 0503 	bic.w	r5, r5, #3
 80069a8:	3508      	adds	r5, #8
 80069aa:	2d0c      	cmp	r5, #12
 80069ac:	bf38      	it	cc
 80069ae:	250c      	movcc	r5, #12
 80069b0:	2d00      	cmp	r5, #0
 80069b2:	4606      	mov	r6, r0
 80069b4:	db01      	blt.n	80069ba <_malloc_r+0x1a>
 80069b6:	42a9      	cmp	r1, r5
 80069b8:	d903      	bls.n	80069c2 <_malloc_r+0x22>
 80069ba:	230c      	movs	r3, #12
 80069bc:	6033      	str	r3, [r6, #0]
 80069be:	2000      	movs	r0, #0
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
 80069c2:	f000 f857 	bl	8006a74 <__malloc_lock>
 80069c6:	4a21      	ldr	r2, [pc, #132]	; (8006a4c <_malloc_r+0xac>)
 80069c8:	6814      	ldr	r4, [r2, #0]
 80069ca:	4621      	mov	r1, r4
 80069cc:	b991      	cbnz	r1, 80069f4 <_malloc_r+0x54>
 80069ce:	4c20      	ldr	r4, [pc, #128]	; (8006a50 <_malloc_r+0xb0>)
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	b91b      	cbnz	r3, 80069dc <_malloc_r+0x3c>
 80069d4:	4630      	mov	r0, r6
 80069d6:	f000 f83d 	bl	8006a54 <_sbrk_r>
 80069da:	6020      	str	r0, [r4, #0]
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	f000 f838 	bl	8006a54 <_sbrk_r>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d124      	bne.n	8006a32 <_malloc_r+0x92>
 80069e8:	230c      	movs	r3, #12
 80069ea:	6033      	str	r3, [r6, #0]
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f842 	bl	8006a76 <__malloc_unlock>
 80069f2:	e7e4      	b.n	80069be <_malloc_r+0x1e>
 80069f4:	680b      	ldr	r3, [r1, #0]
 80069f6:	1b5b      	subs	r3, r3, r5
 80069f8:	d418      	bmi.n	8006a2c <_malloc_r+0x8c>
 80069fa:	2b0b      	cmp	r3, #11
 80069fc:	d90f      	bls.n	8006a1e <_malloc_r+0x7e>
 80069fe:	600b      	str	r3, [r1, #0]
 8006a00:	50cd      	str	r5, [r1, r3]
 8006a02:	18cc      	adds	r4, r1, r3
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 f836 	bl	8006a76 <__malloc_unlock>
 8006a0a:	f104 000b 	add.w	r0, r4, #11
 8006a0e:	1d23      	adds	r3, r4, #4
 8006a10:	f020 0007 	bic.w	r0, r0, #7
 8006a14:	1ac3      	subs	r3, r0, r3
 8006a16:	d0d3      	beq.n	80069c0 <_malloc_r+0x20>
 8006a18:	425a      	negs	r2, r3
 8006a1a:	50e2      	str	r2, [r4, r3]
 8006a1c:	e7d0      	b.n	80069c0 <_malloc_r+0x20>
 8006a1e:	428c      	cmp	r4, r1
 8006a20:	684b      	ldr	r3, [r1, #4]
 8006a22:	bf16      	itet	ne
 8006a24:	6063      	strne	r3, [r4, #4]
 8006a26:	6013      	streq	r3, [r2, #0]
 8006a28:	460c      	movne	r4, r1
 8006a2a:	e7eb      	b.n	8006a04 <_malloc_r+0x64>
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	6849      	ldr	r1, [r1, #4]
 8006a30:	e7cc      	b.n	80069cc <_malloc_r+0x2c>
 8006a32:	1cc4      	adds	r4, r0, #3
 8006a34:	f024 0403 	bic.w	r4, r4, #3
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d005      	beq.n	8006a48 <_malloc_r+0xa8>
 8006a3c:	1a21      	subs	r1, r4, r0
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f000 f808 	bl	8006a54 <_sbrk_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d0cf      	beq.n	80069e8 <_malloc_r+0x48>
 8006a48:	6025      	str	r5, [r4, #0]
 8006a4a:	e7db      	b.n	8006a04 <_malloc_r+0x64>
 8006a4c:	200000b8 	.word	0x200000b8
 8006a50:	200000bc 	.word	0x200000bc

08006a54 <_sbrk_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4c06      	ldr	r4, [pc, #24]	; (8006a70 <_sbrk_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	f7fa f938 	bl	8000cd4 <_sbrk>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_sbrk_r+0x1a>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_sbrk_r+0x1a>
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20000890 	.word	0x20000890

08006a74 <__malloc_lock>:
 8006a74:	4770      	bx	lr

08006a76 <__malloc_unlock>:
 8006a76:	4770      	bx	lr

08006a78 <_init>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr

08006a84 <_fini>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	bf00      	nop
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr
