
bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cfc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec0  08007ec0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ec8  08007ec8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ecc  08007ecc  00017ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  08007f60  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08007f60  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7b5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cee  00000000  00000000  0003d875  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001808  00000000  00000000  00041568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  00042d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a2d9  00000000  00000000  000443e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014779  00000000  00000000  0005e6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000976d2  00000000  00000000  00072e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067ac  00000000  00000000  0010a580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007e7c 	.word	0x08007e7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08007e7c 	.word	0x08007e7c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t message[5];
	int distance;
	uint8_t str[]="Hello, stm32\n";
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <main+0x50>)
 80004e0:	463c      	mov	r4, r7
 80004e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004e4:	c407      	stmia	r4!, {r0, r1, r2}
 80004e6:	8023      	strh	r3, [r4, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fde4 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f820 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fa10 	bl	8000914 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f4:	f000 f8a0 	bl	8000638 <MX_I2C1_Init>
  MX_I2S2_Init();
 80004f8:	f000 f8cc 	bl	8000694 <MX_I2S2_Init>
  MX_I2S3_Init();
 80004fc:	f000 f8f8 	bl	80006f0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000500:	f000 f926 	bl	8000750 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000504:	f007 f90a 	bl	800771c <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8000508:	f000 f9da 	bl	80008c0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800050c:	f000 f956 	bl	80007bc <MX_TIM1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();
	  HAL_UART_Transmit(&huart1,str,13,1000);
 8000510:	4639      	mov	r1, r7
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	220d      	movs	r2, #13
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <main+0x54>)
 800051a:	f004 fd4e 	bl	8004fba <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000522:	f000 fe39 	bl	8001198 <HAL_Delay>
	  HAL_UART_Transmit(&huart1,str,13,1000);
 8000526:	e7f3      	b.n	8000510 <main+0x38>
 8000528:	08007e94 	.word	0x08007e94
 800052c:	20000114 	.word	0x20000114

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b09a      	sub	sp, #104	; 0x68
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 fbda 	bl	8007cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
 8000564:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <SystemClock_Config+0x100>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	4a30      	ldr	r2, [pc, #192]	; (8000630 <SystemClock_Config+0x100>)
 8000570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000574:	6413      	str	r3, [r2, #64]	; 0x40
 8000576:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <SystemClock_Config+0x100>)
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <SystemClock_Config+0x104>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a2a      	ldr	r2, [pc, #168]	; (8000634 <SystemClock_Config+0x104>)
 800058c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0x104>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	2301      	movs	r3, #1
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b6:	23c0      	movs	r3, #192	; 0xc0
 80005b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005ba:	2306      	movs	r3, #6
 80005bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005be:	2308      	movs	r3, #8
 80005c0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fad8 	bl	8003b7c <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005d2:	f000 fa79 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fd32 	bl	800405c <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005fe:	f000 fa63 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000602:	2301      	movs	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800060a:	2305      	movs	r3, #5
 800060c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	4618      	mov	r0, r3
 8000618:	f003 ff12 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000622:	f000 fa51 	bl	8000ac8 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3768      	adds	r7, #104	; 0x68
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C1_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <MX_I2C1_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C1_Init+0x50>)
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_I2C1_Init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_I2C1_Init+0x50>)
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_I2C1_Init+0x50>)
 8000676:	f002 fca9 	bl	8002fcc <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 fa22 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000c0 	.word	0x200000c0
 800068c:	40005400 	.word	0x40005400
 8000690:	000186a0 	.word	0x000186a0

08000694 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2S2_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2S2_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006ba:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <MX_I2S2_Init+0x58>)
 80006bc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2S2_Init+0x50>)
 80006d2:	f002 fdb3 	bl	800323c <HAL_I2S_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f9f4 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200001ec 	.word	0x200001ec
 80006e8:	40003800 	.word	0x40003800
 80006ec:	00017700 	.word	0x00017700

080006f0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_I2S3_Init+0x54>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <MX_I2S3_Init+0x58>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2S3_Init+0x54>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_I2S3_Init+0x54>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_I2S3_Init+0x54>)
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <MX_I2S3_Init+0x5c>)
 800071a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2S3_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_I2S3_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2S3_Init+0x54>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2S3_Init+0x54>)
 8000730:	f002 fd84 	bl	800323c <HAL_I2S_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800073a:	f000 f9c5 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000234 	.word	0x20000234
 8000748:	40003c00 	.word	0x40003c00
 800074c:	00017700 	.word	0x00017700

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_SPI1_Init+0x64>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_SPI1_Init+0x64>)
 80007a2:	f003 ff9b 	bl	80046dc <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f98c 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000194 	.word	0x20000194
 80007b8:	40013000 	.word	0x40013000

080007bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b092      	sub	sp, #72	; 0x48
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2220      	movs	r2, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 fa86 	bl	8007cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MX_TIM1_Init+0xfc>)
 80007ee:	4a33      	ldr	r2, [pc, #204]	; (80008bc <MX_TIM1_Init+0x100>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <MX_TIM1_Init+0xfc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <MX_TIM1_Init+0xfc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_TIM1_Init+0xfc>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <MX_TIM1_Init+0xfc>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_TIM1_Init+0xfc>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <MX_TIM1_Init+0xfc>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000816:	4828      	ldr	r0, [pc, #160]	; (80008b8 <MX_TIM1_Init+0xfc>)
 8000818:	f003 ffc4 	bl	80047a4 <HAL_TIM_PWM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f951 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000832:	4619      	mov	r1, r3
 8000834:	4820      	ldr	r0, [pc, #128]	; (80008b8 <MX_TIM1_Init+0xfc>)
 8000836:	f004 fab3 	bl	8004da0 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8000840:	f000 f942 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_TIM1_Init+0xfc>)
 800086a:	f003 ffc7 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000874:	f000 f928 	bl	8000ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <MX_TIM1_Init+0xfc>)
 800089c:	f004 faee 	bl	8004e7c <HAL_TIMEx_ConfigBreakDeadTime>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80008a6:	f000 f90f 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008aa:	4803      	ldr	r0, [pc, #12]	; (80008b8 <MX_TIM1_Init+0xfc>)
 80008ac:	f000 fabc 	bl	8000e28 <HAL_TIM_MspPostInit>

}
 80008b0:	bf00      	nop
 80008b2:	3748      	adds	r7, #72	; 0x48
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000154 	.word	0x20000154
 80008bc:	40010000 	.word	0x40010000

080008c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART1_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART1_UART_Init+0x4c>)
 80008f8:	f004 fb12 	bl	8004f20 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f8e1 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000114 	.word	0x20000114
 8000910:	40011000 	.word	0x40011000

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a5f      	ldr	r2, [pc, #380]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a58      	ldr	r2, [pc, #352]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b4b      	ldr	r3, [pc, #300]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a4a      	ldr	r2, [pc, #296]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b48      	ldr	r3, [pc, #288]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a43      	ldr	r2, [pc, #268]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a3c      	ldr	r2, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <MX_GPIO_Init+0x19c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2108      	movs	r1, #8
 80009d6:	4837      	ldr	r0, [pc, #220]	; (8000ab4 <MX_GPIO_Init+0x1a0>)
 80009d8:	f000 fe94 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2101      	movs	r1, #1
 80009e0:	4835      	ldr	r0, [pc, #212]	; (8000ab8 <MX_GPIO_Init+0x1a4>)
 80009e2:	f000 fe8f 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f24c 0110 	movw	r1, #49168	; 0xc010
 80009ec:	4833      	ldr	r0, [pc, #204]	; (8000abc <MX_GPIO_Init+0x1a8>)
 80009ee:	f000 fe89 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009f2:	2304      	movs	r3, #4
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <MX_GPIO_Init+0x1a0>)
 8000a06:	f000 fcfb 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <MX_GPIO_Init+0x1a0>)
 8000a22:	f000 fced 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <MX_GPIO_Init+0x1ac>)
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x1a0>)
 8000a3a:	f000 fce1 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x1a4>)
 8000a56:	f000 fcd3 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0x1ac>)
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0x1b0>)
 8000a6e:	f000 fcc7 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000a72:	f24c 0310 	movw	r3, #49168	; 0xc010
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_GPIO_Init+0x1a8>)
 8000a8c:	f000 fcb8 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_GPIO_Init+0x1a8>)
 8000aa4:	f000 fcac 	bl	8001400 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	10120000 	.word	0x10120000
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_I2C_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b84:	f000 fc3c 	bl	8001400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a59      	ldr	r2, [pc, #356]	; (8000d3c <HAL_I2S_MspInit+0x184>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d15b      	bne.n	8000c92 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a57      	ldr	r2, [pc, #348]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b55      	ldr	r3, [pc, #340]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	623b      	str	r3, [r7, #32]
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a50      	ldr	r2, [pc, #320]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	483e      	ldr	r0, [pc, #248]	; (8000d44 <HAL_I2S_MspInit+0x18c>)
 8000c4a:	f000 fbd9 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4836      	ldr	r0, [pc, #216]	; (8000d44 <HAL_I2S_MspInit+0x18c>)
 8000c6a:	f000 fbc9 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c80:	2305      	movs	r3, #5
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	482f      	ldr	r0, [pc, #188]	; (8000d48 <HAL_I2S_MspInit+0x190>)
 8000c8c:	f000 fbb8 	bl	8001400 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c90:	e04f      	b.n	8000d32 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <HAL_I2S_MspInit+0x194>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d14a      	bne.n	8000d32 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_I2S_MspInit+0x188>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d00:	2306      	movs	r3, #6
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <HAL_I2S_MspInit+0x198>)
 8000d0c:	f000 fb78 	bl	8001400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d22:	2306      	movs	r3, #6
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_I2S_MspInit+0x18c>)
 8000d2e:	f000 fb67 	bl	8001400 <HAL_GPIO_Init>
}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	; 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40003800 	.word	0x40003800
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40003c00 	.word	0x40003c00
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_SPI_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12b      	bne.n	8000dce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_SPI_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dae:	23e0      	movs	r3, #224	; 0xe0
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_SPI_MspInit+0x8c>)
 8000dca:	f000 fb19 	bl	8001400 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40013000 	.word	0x40013000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_TIM_PWM_MspInit+0x3c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10d      	bne.n	8000e12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_TIM_PWM_MspInit+0x40>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <HAL_TIM_PWM_MspInit+0x40>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_TIM_PWM_MspInit+0x40>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <HAL_TIM_MspPostInit+0x68>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d11e      	bne.n	8000e88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_TIM_MspPostInit+0x6c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_TIM_MspPostInit+0x6c>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_TIM_MspPostInit+0x6c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_TIM_MspPostInit+0x70>)
 8000e84:	f000 fabc 	bl	8001400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40010000 	.word	0x40010000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <HAL_UART_MspInit+0xc0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d14a      	bne.n	8000f54 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f24:	2307      	movs	r3, #7
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <HAL_UART_MspInit+0xc8>)
 8000f30:	f000 fa66 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f44:	2307      	movs	r3, #7
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <HAL_UART_MspInit+0xcc>)
 8000f50:	f000 fa56 	bl	8001400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f8ca 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <OTG_FS_IRQHandler+0x10>)
 8000fce:	f000 fe37 	bl	8001c40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000064c 	.word	0x2000064c

08000fdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x50>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x16>
		heap_end = &end;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <_sbrk+0x50>)
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <_sbrk+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <_sbrk+0x50>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <_sbrk+0x50>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	466a      	mov	r2, sp
 8001002:	4293      	cmp	r3, r2
 8001004:	d907      	bls.n	8001016 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001006:	f006 fe3d 	bl	8007c84 <__errno>
 800100a:	4602      	mov	r2, r0
 800100c:	230c      	movs	r3, #12
 800100e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001014:	e006      	b.n	8001024 <_sbrk+0x48>
	}

	heap_end += incr;
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <_sbrk+0x50>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a03      	ldr	r2, [pc, #12]	; (800102c <_sbrk+0x50>)
 8001020:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200000ac 	.word	0x200000ac
 8001030:	20000918 	.word	0x20000918

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <SystemInit+0x28>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <SystemInit+0x28>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <SystemInit+0x28>)
 800104a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800104e:	609a      	str	r2, [r3, #8]
#endif
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001066:	e003      	b.n	8001070 <LoopCopyDataInit>

08001068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800106a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800106c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800106e:	3104      	adds	r1, #4

08001070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001078:	d3f6      	bcc.n	8001068 <CopyDataInit>
  ldr  r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800107c:	e002      	b.n	8001084 <LoopFillZerobss>

0800107e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800107e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001080:	f842 3b04 	str.w	r3, [r2], #4

08001084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001088:	d3f9      	bcc.n	800107e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffd3 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f006 fdff 	bl	8007c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa21 	bl	80004d8 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800109c:	08007ed0 	.word	0x08007ed0
  ldr  r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010a4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80010a8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80010ac:	20000914 	.word	0x20000914

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f94d 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fcf6 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f965 	bl	80013e6 <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001134:	f000 f92d 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	2000027c 	.word	0x2000027c

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000027c 	.word	0x2000027c

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_Delay+0x40>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000008 	.word	0x20000008

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff29 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff3e 	bl	8001224 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff31 	bl	8001240 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	e159      	b.n	80016d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	f040 8148 	bne.w	80016ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d00b      	beq.n	800145a <HAL_GPIO_Init+0x5a>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800144e:	2b11      	cmp	r3, #17
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b12      	cmp	r3, #18
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0xfc>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b12      	cmp	r3, #18
 80014fa:	d123      	bne.n	8001544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0203 	and.w	r2, r3, #3
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a2 	beq.w	80016ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_GPIO_Init+0x2e4>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a55      	ldr	r2, [pc, #340]	; (80016e4 <HAL_GPIO_Init+0x2e4>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_GPIO_Init+0x2e4>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a2:	4a51      	ldr	r2, [pc, #324]	; (80016e8 <HAL_GPIO_Init+0x2e8>)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2ec>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d019      	beq.n	8001602 <HAL_GPIO_Init+0x202>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <HAL_GPIO_Init+0x2f0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0x1fe>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a46      	ldr	r2, [pc, #280]	; (80016f4 <HAL_GPIO_Init+0x2f4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00d      	beq.n	80015fa <HAL_GPIO_Init+0x1fa>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a45      	ldr	r2, [pc, #276]	; (80016f8 <HAL_GPIO_Init+0x2f8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x1f6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a44      	ldr	r2, [pc, #272]	; (80016fc <HAL_GPIO_Init+0x2fc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_GPIO_Init+0x1f2>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x204>
 80015f2:	2307      	movs	r3, #7
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x204>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x204>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x204>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x204>
 8001602:	2300      	movs	r3, #0
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001614:	4934      	ldr	r1, [pc, #208]	; (80016e8 <HAL_GPIO_Init+0x2e8>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_GPIO_Init+0x300>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001646:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_GPIO_Init+0x300>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_GPIO_Init+0x300>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001670:	4a23      	ldr	r2, [pc, #140]	; (8001700 <HAL_GPIO_Init+0x300>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_GPIO_Init+0x300>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_GPIO_Init+0x300>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_GPIO_Init+0x300>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_GPIO_Init+0x300>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b0f      	cmp	r3, #15
 80016d4:	f67f aea2 	bls.w	800141c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d8:	bf00      	nop
 80016da:	3724      	adds	r7, #36	; 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40013c00 	.word	0x40013c00

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001720:	e003      	b.n	800172a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	041a      	lsls	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	619a      	str	r2, [r3, #24]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001738:	b08f      	sub	sp, #60	; 0x3c
 800173a:	af0a      	add	r7, sp, #40	; 0x28
 800173c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e054      	b.n	80017f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f006 f82e 	bl	80077c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f004 f8e8 	bl	800595c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	687e      	ldr	r6, [r7, #4]
 8001794:	466d      	mov	r5, sp
 8001796:	f106 0410 	add.w	r4, r6, #16
 800179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017aa:	1d33      	adds	r3, r6, #4
 80017ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f004 f862 	bl	8005878 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 f8df 	bl	800597e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	687e      	ldr	r6, [r7, #4]
 80017c8:	466d      	mov	r5, sp
 80017ca:	f106 0410 	add.w	r4, r6, #16
 80017ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017da:	e885 0003 	stmia.w	r5, {r0, r1}
 80017de:	1d33      	adds	r3, r6, #4
 80017e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e2:	6838      	ldr	r0, [r7, #0]
 80017e4:	f004 f9f2 	bl	8005bcc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017fa:	b590      	push	{r4, r7, lr}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af04      	add	r7, sp, #16
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	4608      	mov	r0, r1
 8001804:	4611      	mov	r1, r2
 8001806:	461a      	mov	r2, r3
 8001808:	4603      	mov	r3, r0
 800180a:	70fb      	strb	r3, [r7, #3]
 800180c:	460b      	mov	r3, r1
 800180e:	70bb      	strb	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_HCD_HC_Init+0x28>
 800181e:	2302      	movs	r3, #2
 8001820:	e07f      	b.n	8001922 <HAL_HCD_HC_Init+0x128>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	333d      	adds	r3, #61	; 0x3d
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	3338      	adds	r3, #56	; 0x38
 800184e:	787a      	ldrb	r2, [r7, #1]
 8001850:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3340      	adds	r3, #64	; 0x40
 8001862:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001864:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3339      	adds	r3, #57	; 0x39
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	333f      	adds	r3, #63	; 0x3f
 800188a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800188e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	78bb      	ldrb	r3, [r7, #2]
 8001894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001898:	b2d8      	uxtb	r0, r3
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	333a      	adds	r3, #58	; 0x3a
 80018a8:	4602      	mov	r2, r0
 80018aa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da0a      	bge.n	80018ca <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	333b      	adds	r3, #59	; 0x3b
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e009      	b.n	80018de <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	333b      	adds	r3, #59	; 0x3b
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	333c      	adds	r3, #60	; 0x3c
 80018ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018f2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	787c      	ldrb	r4, [r7, #1]
 80018fa:	78ba      	ldrb	r2, [r7, #2]
 80018fc:	78f9      	ldrb	r1, [r7, #3]
 80018fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f897 3020 	ldrb.w	r3, [r7, #32]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4623      	mov	r3, r4
 8001910:	f004 fa9c 	bl	8005e4c <USB_HC_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}

0800192a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_HCD_HC_Halt+0x1e>
 8001944:	2302      	movs	r3, #2
 8001946:	e00f      	b.n	8001968 <HAL_HCD_HC_Halt+0x3e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f004 fcd6 	bl	800630a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	70fb      	strb	r3, [r7, #3]
 8001982:	460b      	mov	r3, r1
 8001984:	70bb      	strb	r3, [r7, #2]
 8001986:	4613      	mov	r3, r2
 8001988:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	333b      	adds	r3, #59	; 0x3b
 800199a:	78ba      	ldrb	r2, [r7, #2]
 800199c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	333f      	adds	r3, #63	; 0x3f
 80019ae:	787a      	ldrb	r2, [r7, #1]
 80019b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019b2:	7c3b      	ldrb	r3, [r7, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3342      	adds	r3, #66	; 0x42
 80019c8:	2203      	movs	r2, #3
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e009      	b.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019e2:	787b      	ldrb	r3, [r7, #1]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	f200 80d6 	bhi.w	8001b96 <HAL_HCD_HC_SubmitRequest+0x226>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_HCD_HC_SubmitRequest+0x80>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001b81 	.word	0x08001b81
 80019f8:	08001a6d 	.word	0x08001a6d
 80019fc:	08001af7 	.word	0x08001af7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a00:	7c3b      	ldrb	r3, [r7, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80c9 	bne.w	8001b9a <HAL_HCD_HC_SubmitRequest+0x22a>
 8001a08:	78bb      	ldrb	r3, [r7, #2]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80c5 	bne.w	8001b9a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001a10:	8b3b      	ldrh	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3351      	adds	r3, #81	; 0x51
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3351      	adds	r3, #81	; 0x51
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3342      	adds	r3, #66	; 0x42
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a54:	e0a1      	b.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3342      	adds	r3, #66	; 0x42
 8001a66:	2202      	movs	r2, #2
 8001a68:	701a      	strb	r2, [r3, #0]
      break;
 8001a6a:	e096      	b.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a6c:	78bb      	ldrb	r3, [r7, #2]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d120      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a72:	78fa      	ldrb	r2, [r7, #3]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	3351      	adds	r3, #81	; 0x51
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	3342      	adds	r3, #66	; 0x42
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a9c:	e07e      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	3342      	adds	r3, #66	; 0x42
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
      break;
 8001ab2:	e073      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3350      	adds	r3, #80	; 0x50
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aca:	78fa      	ldrb	r2, [r7, #3]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3342      	adds	r3, #66	; 0x42
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e05d      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	3342      	adds	r3, #66	; 0x42
 8001af0:	2202      	movs	r2, #2
 8001af2:	701a      	strb	r2, [r3, #0]
      break;
 8001af4:	e052      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001af6:	78bb      	ldrb	r3, [r7, #2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d120      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3351      	adds	r3, #81	; 0x51
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10a      	bne.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b26:	e039      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3342      	adds	r3, #66	; 0x42
 8001b38:	2202      	movs	r2, #2
 8001b3a:	701a      	strb	r2, [r3, #0]
      break;
 8001b3c:	e02e      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3350      	adds	r3, #80	; 0x50
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10a      	bne.n	8001b6a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3342      	adds	r3, #66	; 0x42
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
      break;
 8001b68:	e018      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3342      	adds	r3, #66	; 0x42
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	701a      	strb	r2, [r3, #0]
      break;
 8001b7e:	e00d      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3342      	adds	r3, #66	; 0x42
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001b96:	bf00      	nop
 8001b98:	e000      	b.n	8001b9c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001b9a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3344      	adds	r3, #68	; 0x44
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	8b39      	ldrh	r1, [r7, #24]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4403      	add	r3, r0
 8001bc0:	3348      	adds	r3, #72	; 0x48
 8001bc2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	335c      	adds	r3, #92	; 0x5c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	334c      	adds	r3, #76	; 0x4c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3339      	adds	r3, #57	; 0x39
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	335d      	adds	r3, #93	; 0x5d
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	18d1      	adds	r1, r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f004 fa16 	bl	8006060 <USB_HC_StartXfer>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop

08001c40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 ff75 	bl	8005b46 <USB_GetMode>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 80f1 	bne.w	8001e46 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 ff59 	bl	8005b20 <USB_ReadInterrupts>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80e7 	beq.w	8001e44 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 ff50 	bl	8005b20 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c8a:	d104      	bne.n	8001c96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 ff40 	bl	8005b20 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001caa:	d104      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 ff30 	bl	8005b20 <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cca:	d104      	bne.n	8001cd6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 ff20 	bl	8005b20 <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d103      	bne.n	8001cf2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 ff12 	bl	8005b20 <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d06:	d117      	bne.n	8001d38 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001d16:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f005 fdcf 	bl	80078c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f004 f80b 	bl	8005d44 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 feef 	bl	8005b20 <USB_ReadInterrupts>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d102      	bne.n	8001d54 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f001 f8ac 	bl	8002eac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fee1 	bl	8005b20 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d106      	bne.n	8001d76 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f005 fd8d 	bl	8007888 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2208      	movs	r2, #8
 8001d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fed0 	bl	8005b20 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d8a:	d138      	bne.n	8001dfe <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 faa9 	bl	80062e8 <USB_HC_ReadInterrupt>
 8001d96:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e025      	b.n	8001dea <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d018      	beq.n	8001de4 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc8:	d106      	bne.n	8001dd8 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8b3 	bl	8001f3c <HCD_HC_IN_IRQHandler>
 8001dd6:	e005      	b.n	8001de4 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fc43 	bl	800266a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3d4      	bcc.n	8001d9e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fe8c 	bl	8005b20 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d101      	bne.n	8001e16 <HAL_HCD_IRQHandler+0x1d6>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_HCD_IRQHandler+0x1d8>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d014      	beq.n	8001e46 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0210 	bic.w	r2, r2, #16
 8001e2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 ff91 	bl	8002d54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0210 	orr.w	r2, r2, #16
 8001e40:	619a      	str	r2, [r3, #24]
 8001e42:	e000      	b.n	8001e46 <HAL_HCD_IRQHandler+0x206>
      return;
 8001e44:	bf00      	nop
    }
  }
}
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_HCD_Start+0x16>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e013      	b.n	8001e8a <HAL_HCD_Start+0x3e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fd63 	bl	800593a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 ff9c 	bl	8005db8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_HCD_Stop+0x16>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e00d      	b.n	8001ec4 <HAL_HCD_Stop+0x32>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 fb63 	bl	8006580 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	335c      	adds	r3, #92	; 0x5c
 8001ee8:	781b      	ldrb	r3, [r3, #0]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	334c      	adds	r3, #76	; 0x4c
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 ff7c 	bl	8005e2a <USB_GetCurrentFrame>
 8001f32:	4603      	mov	r3, r0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d119      	bne.n	8001fa0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	0151      	lsls	r1, r2, #5
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	440a      	add	r2, r1
 8001f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	60d3      	str	r3, [r2, #12]
 8001f9e:	e095      	b.n	80020cc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d109      	bne.n	8001fca <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	6093      	str	r3, [r2, #8]
 8001fc8:	e080      	b.n	80020cc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d134      	bne.n	800204a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	0151      	lsls	r1, r2, #5
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	440a      	add	r2, r1
 8001ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	335d      	adds	r3, #93	; 0x5d
 8002010:	2205      	movs	r2, #5
 8002012:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	2310      	movs	r3, #16
 8002024:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	461a      	mov	r2, r3
 8002034:	2308      	movs	r3, #8
 8002036:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f961 	bl	800630a <USB_HC_Halt>
 8002048:	e040      	b.n	80020cc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002060:	d134      	bne.n	80020cc <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	0151      	lsls	r1, r2, #5
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	440a      	add	r2, r1
 8002078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f004 f93c 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	461a      	mov	r2, r3
 80020a0:	2310      	movs	r3, #16
 80020a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	335d      	adds	r3, #93	; 0x5d
 80020b4:	2208      	movs	r2, #8
 80020b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	461a      	mov	r2, r3
 80020c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ca:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e2:	d122      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	0151      	lsls	r1, r2, #5
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	440a      	add	r2, r1
 80020fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f004 f8fb 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	461a      	mov	r2, r3
 8002122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002126:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002128:	e29b      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	f040 80c1 	bne.w	80022c4 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01b      	beq.n	8002182 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3348      	adds	r3, #72	; 0x48
 800215a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	0159      	lsls	r1, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	440b      	add	r3, r1
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800216e:	1ad1      	subs	r1, r2, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4403      	add	r3, r0
 800217e:	334c      	adds	r3, #76	; 0x4c
 8002180:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	335d      	adds	r3, #93	; 0x5d
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3358      	adds	r3, #88	; 0x58
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	461a      	mov	r2, r3
 80021b8:	2301      	movs	r3, #1
 80021ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	333f      	adds	r3, #63	; 0x3f
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	333f      	adds	r3, #63	; 0x3f
 80021e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d121      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	0151      	lsls	r1, r2, #5
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	440a      	add	r2, r1
 80021fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f004 f879 	bl	800630a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	461a      	mov	r2, r3
 8002226:	2310      	movs	r3, #16
 8002228:	6093      	str	r3, [r2, #8]
 800222a:	e034      	b.n	8002296 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	333f      	adds	r3, #63	; 0x3f
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d129      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	0151      	lsls	r1, r2, #5
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	440a      	add	r2, r1
 8002258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800225c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002260:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	335c      	adds	r3, #92	; 0x5c
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	b2d8      	uxtb	r0, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	335c      	adds	r3, #92	; 0x5c
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4601      	mov	r1, r0
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f005 fb23 	bl	80078dc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3350      	adds	r3, #80	; 0x50
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2d8      	uxtb	r0, r3
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3350      	adds	r3, #80	; 0x50
 80022be:	4602      	mov	r2, r0
 80022c0:	701a      	strb	r2, [r3, #0]
}
 80022c2:	e1ce      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	f040 80f1 	bne.w	80024be <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	0151      	lsls	r1, r2, #5
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	440a      	add	r2, r1
 80022f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f6:	f023 0302 	bic.w	r3, r3, #2
 80022fa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	335d      	adds	r3, #93	; 0x5d
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10a      	bne.n	8002328 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	335c      	adds	r3, #92	; 0x5c
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e0b0      	b.n	800248a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	335d      	adds	r3, #93	; 0x5d
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d10a      	bne.n	8002354 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	335c      	adds	r3, #92	; 0x5c
 800234e:	2205      	movs	r2, #5
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e09a      	b.n	800248a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	335d      	adds	r3, #93	; 0x5d
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d00a      	beq.n	8002380 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	335d      	adds	r3, #93	; 0x5d
 800237a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800237c:	2b08      	cmp	r3, #8
 800237e:	d156      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3358      	adds	r3, #88	; 0x58
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4403      	add	r3, r0
 80023a2:	3358      	adds	r3, #88	; 0x58
 80023a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3358      	adds	r3, #88	; 0x58
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d914      	bls.n	80023e6 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	3358      	adds	r3, #88	; 0x58
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	335c      	adds	r3, #92	; 0x5c
 80023e0:	2204      	movs	r2, #4
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e009      	b.n	80023fa <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	335c      	adds	r3, #92	; 0x5c
 80023f6:	2202      	movs	r2, #2
 80023f8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002410:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002418:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e02d      	b.n	800248a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	335d      	adds	r3, #93	; 0x5d
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d122      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	335c      	adds	r3, #92	; 0x5c
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800246e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002476:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	2302      	movs	r3, #2
 800249a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	b2d8      	uxtb	r0, r3
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	335c      	adds	r3, #92	; 0x5c
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4601      	mov	r1, r0
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f005 fa10 	bl	80078dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024bc:	e0d1      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d13e      	bne.n	8002552 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	0151      	lsls	r1, r2, #5
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	440a      	add	r2, r1
 80024ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	3358      	adds	r3, #88	; 0x58
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	1c59      	adds	r1, r3, #1
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4403      	add	r3, r0
 8002516:	3358      	adds	r3, #88	; 0x58
 8002518:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	335d      	adds	r3, #93	; 0x5d
 800252a:	2206      	movs	r2, #6
 800252c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f003 fee6 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	461a      	mov	r2, r3
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	6093      	str	r3, [r2, #8]
}
 8002550:	e087      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b10      	cmp	r3, #16
 8002566:	d17c      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	333f      	adds	r3, #63	; 0x3f
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b03      	cmp	r3, #3
 800257c:	d122      	bne.n	80025c4 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	3358      	adds	r3, #88	; 0x58
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	0151      	lsls	r1, r2, #5
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	440a      	add	r2, r1
 80025a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fea4 	bl	800630a <USB_HC_Halt>
 80025c2:	e045      	b.n	8002650 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	333f      	adds	r3, #63	; 0x3f
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	333f      	adds	r3, #63	; 0x3f
 80025ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d12f      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	3358      	adds	r3, #88	; 0x58
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d121      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	335d      	adds	r3, #93	; 0x5d
 800261c:	2203      	movs	r2, #3
 800261e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	440a      	add	r2, r1
 8002636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fe5d 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	2310      	movs	r3, #16
 8002660:	6093      	str	r3, [r2, #8]
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d119      	bne.n	80026ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	461a      	mov	r2, r3
 80026a8:	2304      	movs	r3, #4
 80026aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	0151      	lsls	r1, r2, #5
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	440a      	add	r2, r1
 80026c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026cc:	e33e      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d141      	bne.n	8002768 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	2320      	movs	r3, #32
 80026f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	333d      	adds	r3, #61	; 0x3d
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	f040 831f 	bne.w	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	333d      	adds	r3, #61	; 0x3d
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	335c      	adds	r3, #92	; 0x5c
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	0151      	lsls	r1, r2, #5
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	440a      	add	r2, r1
 800274c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f003 fdd2 	bl	800630a <USB_HC_Halt>
}
 8002766:	e2f1      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d13f      	bne.n	80027fe <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	335d      	adds	r3, #93	; 0x5d
 800278e:	2204      	movs	r2, #4
 8002790:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	333d      	adds	r3, #61	; 0x3d
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	3358      	adds	r3, #88	; 0x58
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	0151      	lsls	r1, r2, #5
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	440a      	add	r2, r1
 80027d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 fd90 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2340      	movs	r3, #64	; 0x40
 80027fa:	6093      	str	r3, [r2, #8]
}
 80027fc:	e2a6      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d122      	bne.n	800285c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	0151      	lsls	r1, r2, #5
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	440a      	add	r2, r1
 800282c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fd62 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002858:	6093      	str	r3, [r2, #8]
}
 800285a:	e277      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d135      	bne.n	80028de <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	3358      	adds	r3, #88	; 0x58
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	0151      	lsls	r1, r2, #5
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	440a      	add	r2, r1
 800289c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fd2a 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2301      	movs	r3, #1
 80028c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	335d      	adds	r3, #93	; 0x5d
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
}
 80028dc:	e236      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d12b      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	2308      	movs	r3, #8
 8002904:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	0151      	lsls	r1, r2, #5
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	440a      	add	r2, r1
 800291c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fcea 	bl	800630a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	335d      	adds	r3, #93	; 0x5d
 8002946:	2205      	movs	r2, #5
 8002948:	701a      	strb	r2, [r3, #0]
}
 800294a:	e1ff      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b10      	cmp	r3, #16
 8002960:	d155      	bne.n	8002a0e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	3358      	adds	r3, #88	; 0x58
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	335d      	adds	r3, #93	; 0x5d
 8002986:	2203      	movs	r2, #3
 8002988:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	333d      	adds	r3, #61	; 0x3d
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d114      	bne.n	80029ca <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	333c      	adds	r3, #60	; 0x3c
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	333d      	adds	r3, #61	; 0x3d
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	0151      	lsls	r1, r2, #5
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	440a      	add	r2, r1
 80029e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fc88 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	2310      	movs	r3, #16
 8002a0a:	6093      	str	r3, [r2, #8]
}
 8002a0c:	e19e      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d12b      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	0151      	lsls	r1, r2, #5
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	440a      	add	r2, r1
 8002a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fc5b 	bl	800630a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	335d      	adds	r3, #93	; 0x5d
 8002a64:	2206      	movs	r2, #6
 8002a66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	6093      	str	r3, [r2, #8]
}
 8002a7a:	e167      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d135      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	0151      	lsls	r1, r2, #5
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	440a      	add	r2, r1
 8002aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aae:	f043 0302 	orr.w	r3, r3, #2
 8002ab2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fc23 	bl	800630a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	335d      	adds	r3, #93	; 0x5d
 8002afa:	2208      	movs	r2, #8
 8002afc:	701a      	strb	r2, [r3, #0]
}
 8002afe:	e125      	b.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	f040 811a 	bne.w	8002d4c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	0151      	lsls	r1, r2, #5
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b32:	f023 0302 	bic.w	r3, r3, #2
 8002b36:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	335d      	adds	r3, #93	; 0x5d
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d137      	bne.n	8002bbe <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	335c      	adds	r3, #92	; 0x5c
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	333f      	adds	r3, #63	; 0x3f
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d00b      	beq.n	8002b90 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	333f      	adds	r3, #63	; 0x3f
 8002b88:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	f040 80c5 	bne.w	8002d1a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3351      	adds	r3, #81	; 0x51
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3351      	adds	r3, #81	; 0x51
 8002bb8:	4602      	mov	r2, r0
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e0ad      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	440b      	add	r3, r1
 8002bcc:	335d      	adds	r3, #93	; 0x5d
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d10a      	bne.n	8002bea <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	335c      	adds	r3, #92	; 0x5c
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e097      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335d      	adds	r3, #93	; 0x5d
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d10a      	bne.n	8002c16 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	335c      	adds	r3, #92	; 0x5c
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e081      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	335d      	adds	r3, #93	; 0x5d
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d10a      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e06b      	b.n	8002d1a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	335d      	adds	r3, #93	; 0x5d
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d00a      	beq.n	8002c6e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	335d      	adds	r3, #93	; 0x5d
 8002c68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d155      	bne.n	8002d1a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3358      	adds	r3, #88	; 0x58
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4403      	add	r3, r0
 8002c90:	3358      	adds	r3, #88	; 0x58
 8002c92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3358      	adds	r3, #88	; 0x58
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d914      	bls.n	8002cd4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3358      	adds	r3, #88	; 0x58
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2204      	movs	r2, #4
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e009      	b.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfe:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d06:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d26:	461a      	mov	r2, r3
 8002d28:	2302      	movs	r3, #2
 8002d2a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	b2d8      	uxtb	r0, r3
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	335c      	adds	r3, #92	; 0x5c
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4601      	mov	r1, r0
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f004 fdc8 	bl	80078dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	0c5b      	lsrs	r3, r3, #17
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d003      	beq.n	8002d98 <HCD_RXQLVL_IRQHandler+0x44>
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	f000 8082 	beq.w	8002e9a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d96:	e083      	b.n	8002ea0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d07f      	beq.n	8002e9e <HCD_RXQLVL_IRQHandler+0x14a>
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	3344      	adds	r3, #68	; 0x44
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d074      	beq.n	8002e9e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3344      	adds	r3, #68	; 0x44
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f002 fe7d 	bl	8005ace <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3344      	adds	r3, #68	; 0x44
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	18d1      	adds	r1, r2, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4403      	add	r3, r0
 8002df8:	3344      	adds	r3, #68	; 0x44
 8002dfa:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	334c      	adds	r3, #76	; 0x4c
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	18d1      	adds	r1, r2, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4403      	add	r3, r0
 8002e20:	334c      	adds	r3, #76	; 0x4c
 8002e22:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d031      	beq.n	8002e9e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e50:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e58:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3350      	adds	r3, #80	; 0x50
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2d8      	uxtb	r0, r3
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	3350      	adds	r3, #80	; 0x50
 8002e94:	4602      	mov	r2, r0
 8002e96:	701a      	strb	r2, [r3, #0]
      break;
 8002e98:	e001      	b.n	8002e9e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e9e:	bf00      	nop
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	1ff80000 	.word	0x1ff80000

08002eac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ed8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d113      	bne.n	8002f0c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d10a      	bne.n	8002f04 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002efc:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f004 fcd0 	bl	80078a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d147      	bne.n	8002fa6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d129      	bne.n	8002f7c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d113      	bne.n	8002f58 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f3a:	d106      	bne.n	8002f4a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fefe 	bl	8005d44 <USB_InitFSLSPClkSel>
 8002f48:	e011      	b.n	8002f6e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4618      	mov	r0, r3
 8002f52:	f002 fef7 	bl	8005d44 <USB_InitFSLSPClkSel>
 8002f56:	e00a      	b.n	8002f6e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d106      	bne.n	8002f6e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f66:	461a      	mov	r2, r3
 8002f68:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f6c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f004 fcc2 	bl	80078f8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f004 fc95 	bl	80078a4 <HAL_HCD_Connect_Callback>
 8002f7a:	e014      	b.n	8002fa6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f004 fcc9 	bl	8007914 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002f90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f94:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002fa4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d103      	bne.n	8002fb8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e11f      	b.n	800321e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fd98 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	; 0x24
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800302e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003030:	f001 f9de 	bl	80043f0 <HAL_RCC_GetPCLK1Freq>
 8003034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4a7b      	ldr	r2, [pc, #492]	; (8003228 <HAL_I2C_Init+0x25c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d807      	bhi.n	8003050 <HAL_I2C_Init+0x84>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a7a      	ldr	r2, [pc, #488]	; (800322c <HAL_I2C_Init+0x260>)
 8003044:	4293      	cmp	r3, r2
 8003046:	bf94      	ite	ls
 8003048:	2301      	movls	r3, #1
 800304a:	2300      	movhi	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e006      	b.n	800305e <HAL_I2C_Init+0x92>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a77      	ldr	r2, [pc, #476]	; (8003230 <HAL_I2C_Init+0x264>)
 8003054:	4293      	cmp	r3, r2
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0db      	b.n	800321e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4a72      	ldr	r2, [pc, #456]	; (8003234 <HAL_I2C_Init+0x268>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9b      	lsrs	r3, r3, #18
 8003070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4a64      	ldr	r2, [pc, #400]	; (8003228 <HAL_I2C_Init+0x25c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d802      	bhi.n	80030a0 <HAL_I2C_Init+0xd4>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3301      	adds	r3, #1
 800309e:	e009      	b.n	80030b4 <HAL_I2C_Init+0xe8>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_I2C_Init+0x26c>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	3301      	adds	r3, #1
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4956      	ldr	r1, [pc, #344]	; (8003228 <HAL_I2C_Init+0x25c>)
 80030d0:	428b      	cmp	r3, r1
 80030d2:	d80d      	bhi.n	80030f0 <HAL_I2C_Init+0x124>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e59      	subs	r1, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	bf38      	it	cc
 80030ec:	2304      	movcc	r3, #4
 80030ee:	e04f      	b.n	8003190 <HAL_I2C_Init+0x1c4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <HAL_I2C_Init+0x150>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e012      	b.n	8003142 <HAL_I2C_Init+0x176>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Init+0x17e>
 8003146:	2301      	movs	r3, #1
 8003148:	e022      	b.n	8003190 <HAL_I2C_Init+0x1c4>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_I2C_Init+0x1a4>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e58      	subs	r0, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	440b      	add	r3, r1
 8003160:	fbb0 f3f3 	udiv	r3, r0, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316e:	e00f      	b.n	8003190 <HAL_I2C_Init+0x1c4>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	6809      	ldr	r1, [r1, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6911      	ldr	r1, [r2, #16]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68d2      	ldr	r2, [r2, #12]
 80031ca:	4311      	orrs	r1, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	000186a0 	.word	0x000186a0
 800322c:	001e847f 	.word	0x001e847f
 8003230:	003d08ff 	.word	0x003d08ff
 8003234:	431bde83 	.word	0x431bde83
 8003238:	10624dd3 	.word	0x10624dd3

0800323c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e128      	b.n	80034a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a90      	ldr	r2, [pc, #576]	; (80034a8 <HAL_I2S_Init+0x26c>)
 8003266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fd fca5 	bl	8000bb8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003284:	f023 030f 	bic.w	r3, r3, #15
 8003288:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d060      	beq.n	800335c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032a2:	2310      	movs	r3, #16
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e001      	b.n	80032ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d802      	bhi.n	80032ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f001 f9b0 	bl	8004620 <HAL_RCCEx_GetPeriphCLKFreq>
 80032c0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d125      	bne.n	8003318 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	fbb2 f2f3 	udiv	r2, r2, r3
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	461a      	mov	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	3305      	adds	r3, #5
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	e01f      	b.n	8003336 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	3305      	adds	r3, #5
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e00e      	b.n	8003336 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	3305      	adds	r3, #5
 8003334:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4a5c      	ldr	r2, [pc, #368]	; (80034ac <HAL_I2S_Init+0x270>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e003      	b.n	8003364 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800335c:	2302      	movs	r3, #2
 800335e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d902      	bls.n	8003370 <HAL_I2S_Init+0x134>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	2bff      	cmp	r3, #255	; 0xff
 800336e:	d907      	bls.n	8003380 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0210 	orr.w	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e08f      	b.n	80034a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	ea42 0103 	orr.w	r1, r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	430a      	orrs	r2, r1
 8003392:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800339e:	f023 030f 	bic.w	r3, r3, #15
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6851      	ldr	r1, [r2, #4]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68d2      	ldr	r2, [r2, #12]
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6992      	ldr	r2, [r2, #24]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d161      	bne.n	8003490 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <HAL_I2S_Init+0x274>)
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a37      	ldr	r2, [pc, #220]	; (80034b4 <HAL_I2S_Init+0x278>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_I2S_Init+0x1a4>
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_I2S_Init+0x27c>)
 80033de:	e001      	b.n	80033e4 <HAL_I2S_Init+0x1a8>
 80033e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	4932      	ldr	r1, [pc, #200]	; (80034b4 <HAL_I2S_Init+0x278>)
 80033ec:	428a      	cmp	r2, r1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x1b8>
 80033f0:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x1bc>
 80033f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033fc:	f023 030f 	bic.w	r3, r3, #15
 8003400:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <HAL_I2S_Init+0x278>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_I2S_Init+0x1d4>
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <HAL_I2S_Init+0x27c>)
 800340e:	e001      	b.n	8003414 <HAL_I2S_Init+0x1d8>
 8003410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003414:	2202      	movs	r2, #2
 8003416:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <HAL_I2S_Init+0x278>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_I2S_Init+0x1ea>
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_I2S_Init+0x27c>)
 8003424:	e001      	b.n	800342a <HAL_I2S_Init+0x1ee>
 8003426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d003      	beq.n	8003440 <HAL_I2S_Init+0x204>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	e001      	b.n	800344c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	b299      	uxth	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003462:	4303      	orrs	r3, r0
 8003464:	b29b      	uxth	r3, r3
 8003466:	430b      	orrs	r3, r1
 8003468:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800346a:	4313      	orrs	r3, r2
 800346c:	b29a      	uxth	r2, r3
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	4313      	orrs	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003478:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_I2S_Init+0x278>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_I2S_Init+0x24c>
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <HAL_I2S_Init+0x27c>)
 8003486:	e001      	b.n	800348c <HAL_I2S_Init+0x250>
 8003488:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348c:	897a      	ldrh	r2, [r7, #10]
 800348e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	080035b3 	.word	0x080035b3
 80034ac:	cccccccd 	.word	0xcccccccd
 80034b0:	080036c9 	.word	0x080036c9
 80034b4:	40003800 	.word	0x40003800
 80034b8:	40003400 	.word	0x40003400

080034bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10e      	bne.n	800354c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800353c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffb8 	bl	80034bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	b292      	uxth	r2, r2
 8003568:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10e      	bne.n	80035aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800359a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff93 	bl	80034d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d13a      	bne.n	8003644 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d109      	bne.n	80035ec <I2S_IRQHandler+0x3a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d102      	bne.n	80035ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ffb4 	bl	8003554 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d126      	bne.n	8003644 <I2S_IRQHandler+0x92>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d11f      	bne.n	8003644 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003612:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff50 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b03      	cmp	r3, #3
 800364e:	d136      	bne.n	80036be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d109      	bne.n	800366e <I2S_IRQHandler+0xbc>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d102      	bne.n	800366e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff45 	bl	80034f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d122      	bne.n	80036be <I2S_IRQHandler+0x10c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b20      	cmp	r3, #32
 8003684:	d11b      	bne.n	80036be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003694:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff13 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4aa2      	ldr	r2, [pc, #648]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036e2:	4ba2      	ldr	r3, [pc, #648]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036e4:	e001      	b.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a9b      	ldr	r2, [pc, #620]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003700:	4b9a      	ldr	r3, [pc, #616]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003702:	e001      	b.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003704:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d004      	beq.n	8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 8099 	bne.w	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d107      	bne.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f925 	bl	8003984 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9c8 	bl	8003ae4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d13a      	bne.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d035      	beq.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7e      	ldr	r2, [pc, #504]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003772:	4b7e      	ldr	r3, [pc, #504]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003774:	e001      	b.n	800377a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4979      	ldr	r1, [pc, #484]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003782:	428b      	cmp	r3, r1
 8003784:	d101      	bne.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003786:	4b79      	ldr	r3, [pc, #484]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003788:	e001      	b.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003792:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fe88 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	f040 80be 	bne.w	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80b8 	beq.w	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a59      	ldr	r2, [pc, #356]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003806:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003808:	e001      	b.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4954      	ldr	r1, [pc, #336]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003816:	428b      	cmp	r3, r1
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800381a:	4b54      	ldr	r3, [pc, #336]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003826:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fe4a 	bl	80034e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003850:	e084      	b.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b02      	cmp	r3, #2
 800385a:	d107      	bne.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8be 	bl	80039e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d107      	bne.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8fd 	bl	8003a80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d12f      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02a      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2e      	ldr	r2, [pc, #184]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038b4:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038b6:	e001      	b.n	80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4929      	ldr	r1, [pc, #164]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d101      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038c8:	4b28      	ldr	r3, [pc, #160]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ca:	e001      	b.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fdfa 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d131      	bne.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d02c      	beq.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a17      	ldr	r2, [pc, #92]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003910:	e001      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4912      	ldr	r1, [pc, #72]	; (8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391e:	428b      	cmp	r3, r1
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800392e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f043 0204 	orr.w	r2, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fdc5 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395a:	e000      	b.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800395c:	bf00      	nop
}
 800395e:	bf00      	nop
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40003800 	.word	0x40003800
 800396c:	40003400 	.word	0x40003400

08003970 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c99      	adds	r1, r3, #2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6251      	str	r1, [r2, #36]	; 0x24
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d113      	bne.n	80039de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffc9 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c99      	adds	r1, r3, #2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6251      	str	r1, [r2, #36]	; 0x24
 80039fa:	8819      	ldrh	r1, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <I2SEx_TxISR_I2SExt+0x90>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <I2SEx_TxISR_I2SExt+0x22>
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <I2SEx_TxISR_I2SExt+0x94>)
 8003a08:	e001      	b.n	8003a0e <I2SEx_TxISR_I2SExt+0x26>
 8003a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0e:	460a      	mov	r2, r1
 8003a10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d121      	bne.n	8003a6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <I2SEx_TxISR_I2SExt+0x90>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <I2SEx_TxISR_I2SExt+0x50>
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <I2SEx_TxISR_I2SExt+0x94>)
 8003a36:	e001      	b.n	8003a3c <I2SEx_TxISR_I2SExt+0x54>
 8003a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	490d      	ldr	r1, [pc, #52]	; (8003a78 <I2SEx_TxISR_I2SExt+0x90>)
 8003a44:	428b      	cmp	r3, r1
 8003a46:	d101      	bne.n	8003a4c <I2SEx_TxISR_I2SExt+0x64>
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <I2SEx_TxISR_I2SExt+0x94>)
 8003a4a:	e001      	b.n	8003a50 <I2SEx_TxISR_I2SExt+0x68>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff81 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40003800 	.word	0x40003800
 8003a7c:	40003400 	.word	0x40003400

08003a80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68d8      	ldr	r0, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	1c99      	adds	r1, r3, #2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a98:	b282      	uxth	r2, r0
 8003a9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d113      	bne.n	8003adc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff4a 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <I2SEx_RxISR_I2SExt+0x90>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <I2SEx_RxISR_I2SExt+0x16>
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <I2SEx_RxISR_I2SExt+0x94>)
 8003af8:	e001      	b.n	8003afe <I2SEx_RxISR_I2SExt+0x1a>
 8003afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afe:	68d8      	ldr	r0, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	1c99      	adds	r1, r3, #2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b0a:	b282      	uxth	r2, r0
 8003b0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d121      	bne.n	8003b6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <I2SEx_RxISR_I2SExt+0x90>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <I2SEx_RxISR_I2SExt+0x50>
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <I2SEx_RxISR_I2SExt+0x94>)
 8003b32:	e001      	b.n	8003b38 <I2SEx_RxISR_I2SExt+0x54>
 8003b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	490d      	ldr	r1, [pc, #52]	; (8003b74 <I2SEx_RxISR_I2SExt+0x90>)
 8003b40:	428b      	cmp	r3, r1
 8003b42:	d101      	bne.n	8003b48 <I2SEx_RxISR_I2SExt+0x64>
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <I2SEx_RxISR_I2SExt+0x94>)
 8003b46:	e001      	b.n	8003b4c <I2SEx_RxISR_I2SExt+0x68>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff ff03 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40003800 	.word	0x40003800
 8003b78:	40003400 	.word	0x40003400

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e25b      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d075      	beq.n	8003c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9a:	4ba3      	ldr	r3, [pc, #652]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4ba0      	ldr	r3, [pc, #640]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d112      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b9d      	ldr	r3, [pc, #628]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x108>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e236      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x74>
 8003be2:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a90      	ldr	r2, [pc, #576]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x98>
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a8a      	ldr	r2, [pc, #552]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a87      	ldr	r2, [pc, #540]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c14:	4b84      	ldr	r3, [pc, #528]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a83      	ldr	r2, [pc, #524]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a80      	ldr	r2, [pc, #512]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd faa4 	bl	8001180 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd faa0 	bl	8001180 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1fb      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b76      	ldr	r3, [pc, #472]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xc0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fa90 	bl	8001180 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fa8c 	bl	8001180 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1e7      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b6c      	ldr	r3, [pc, #432]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0xe8>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b62      	ldr	r3, [pc, #392]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1bb      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b56      	ldr	r3, [pc, #344]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4952      	ldr	r1, [pc, #328]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e03a      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b4f      	ldr	r3, [pc, #316]	; (8003e2c <HAL_RCC_OscConfig+0x2b0>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fa45 	bl	8001180 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fd fa41 	bl	8001180 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e19c      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	4b46      	ldr	r3, [pc, #280]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b43      	ldr	r3, [pc, #268]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4940      	ldr	r1, [pc, #256]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_OscConfig+0x2b0>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd fa24 	bl	8001180 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fd fa20 	bl	8001180 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e17b      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d030      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_RCC_OscConfig+0x2b4>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fd fa04 	bl	8001180 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fd fa00 	bl	8001180 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e15b      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x200>
 8003d9a:	e015      	b.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <HAL_RCC_OscConfig+0x2b4>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fd f9ed 	bl	8001180 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fd f9e9 	bl	8001180 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e144      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80a0 	beq.w	8003f16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_OscConfig+0x2b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d121      	bne.n	8003e56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_RCC_OscConfig+0x2b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <HAL_RCC_OscConfig+0x2b8>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd f9af 	bl	8001180 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	e011      	b.n	8003e4a <HAL_RCC_OscConfig+0x2ce>
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	42470000 	.word	0x42470000
 8003e30:	42470e80 	.word	0x42470e80
 8003e34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e38:	f7fd f9a2 	bl	8001180 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0fd      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4a:	4b81      	ldr	r3, [pc, #516]	; (8004050 <HAL_RCC_OscConfig+0x4d4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d106      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2f0>
 8003e5e:	4b7d      	ldr	r3, [pc, #500]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a7c      	ldr	r2, [pc, #496]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	e01c      	b.n	8003ea6 <HAL_RCC_OscConfig+0x32a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d10c      	bne.n	8003e8e <HAL_RCC_OscConfig+0x312>
 8003e74:	4b77      	ldr	r3, [pc, #476]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a76      	ldr	r2, [pc, #472]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e7a:	f043 0304 	orr.w	r3, r3, #4
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e80:	4b74      	ldr	r3, [pc, #464]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a73      	ldr	r2, [pc, #460]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	e00b      	b.n	8003ea6 <HAL_RCC_OscConfig+0x32a>
 8003e8e:	4b71      	ldr	r3, [pc, #452]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a70      	ldr	r2, [pc, #448]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	4b6e      	ldr	r3, [pc, #440]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	4a6d      	ldr	r2, [pc, #436]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d015      	beq.n	8003eda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eae:	f7fd f967 	bl	8001180 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7fd f963 	bl	8001180 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e0bc      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	4b61      	ldr	r3, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ee      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x33a>
 8003ed8:	e014      	b.n	8003f04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fd f951 	bl	8001180 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd f94d 	bl	8001180 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0a6      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	4b56      	ldr	r3, [pc, #344]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ee      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b52      	ldr	r3, [pc, #328]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a51      	ldr	r2, [pc, #324]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8092 	beq.w	8004044 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d05c      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d141      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f34:	4b48      	ldr	r3, [pc, #288]	; (8004058 <HAL_RCC_OscConfig+0x4dc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd f921 	bl	8001180 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fd f91d 	bl	8001180 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e078      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f54:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	019b      	lsls	r3, r3, #6
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	4933      	ldr	r1, [pc, #204]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8a:	4b33      	ldr	r3, [pc, #204]	; (8004058 <HAL_RCC_OscConfig+0x4dc>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fd f8f6 	bl	8001180 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd f8f2 	bl	8001180 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e04d      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003faa:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x41c>
 8003fb6:	e045      	b.n	8004044 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb8:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x4dc>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd f8df 	bl	8001180 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fd f8db 	bl	8001180 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e036      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x44a>
 8003fe4:	e02e      	b.n	8004044 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e029      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ff2:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCC_OscConfig+0x4d8>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	429a      	cmp	r2, r3
 8004004:	d11c      	bne.n	8004040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d115      	bne.n	8004040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004020:	4293      	cmp	r3, r2
 8004022:	d10d      	bne.n	8004040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40007000 	.word	0x40007000
 8004054:	40023800 	.word	0x40023800
 8004058:	42470060 	.word	0x42470060

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0cc      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d90c      	bls.n	8004098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b8      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c8:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a52      	ldr	r2, [pc, #328]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d044      	beq.n	800417c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d119      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d003      	beq.n	800411a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	2b03      	cmp	r3, #3
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e067      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4934      	ldr	r1, [pc, #208]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414c:	f7fd f818 	bl	8001180 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fd f814 	bl	8001180 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d20c      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e032      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e2:	f000 f821 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e6:	4601      	mov	r1, r0
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	5cd3      	ldrb	r3, [r2, r3]
 80041f6:	fa21 f303 	lsr.w	r3, r1, r3
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc ff78 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	08007ea8 	.word	0x08007ea8
 8004220:	20000000 	.word	0x20000000
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	2300      	movs	r3, #0
 8004238:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423e:	4b63      	ldr	r3, [pc, #396]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b04      	cmp	r3, #4
 8004248:	d007      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x32>
 800424a:	2b08      	cmp	r3, #8
 800424c:	d008      	beq.n	8004260 <HAL_RCC_GetSysClockFreq+0x38>
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 80b4 	bne.w	80043bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004254:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004256:	60bb      	str	r3, [r7, #8]
       break;
 8004258:	e0b3      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800425a:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800425c:	60bb      	str	r3, [r7, #8]
      break;
 800425e:	e0b0      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004260:	4b5a      	ldr	r3, [pc, #360]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004268:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800426a:	4b58      	ldr	r3, [pc, #352]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d04a      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004276:	4b55      	ldr	r3, [pc, #340]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	099b      	lsrs	r3, r3, #6
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	ea03 0501 	and.w	r5, r3, r1
 800428c:	ea04 0602 	and.w	r6, r4, r2
 8004290:	4629      	mov	r1, r5
 8004292:	4632      	mov	r2, r6
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	0154      	lsls	r4, r2, #5
 800429e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042a2:	014b      	lsls	r3, r1, #5
 80042a4:	4619      	mov	r1, r3
 80042a6:	4622      	mov	r2, r4
 80042a8:	1b49      	subs	r1, r1, r5
 80042aa:	eb62 0206 	sbc.w	r2, r2, r6
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	0194      	lsls	r4, r2, #6
 80042b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042bc:	018b      	lsls	r3, r1, #6
 80042be:	1a5b      	subs	r3, r3, r1
 80042c0:	eb64 0402 	sbc.w	r4, r4, r2
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	00e2      	lsls	r2, r4, #3
 80042ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042d2:	00d9      	lsls	r1, r3, #3
 80042d4:	460b      	mov	r3, r1
 80042d6:	4614      	mov	r4, r2
 80042d8:	195b      	adds	r3, r3, r5
 80042da:	eb44 0406 	adc.w	r4, r4, r6
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	0262      	lsls	r2, r4, #9
 80042e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042ec:	0259      	lsls	r1, r3, #9
 80042ee:	460b      	mov	r3, r1
 80042f0:	4614      	mov	r4, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	4621      	mov	r1, r4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f04f 0400 	mov.w	r4, #0
 80042fc:	461a      	mov	r2, r3
 80042fe:	4623      	mov	r3, r4
 8004300:	f7fb ff6a 	bl	80001d8 <__aeabi_uldivmod>
 8004304:	4603      	mov	r3, r0
 8004306:	460c      	mov	r4, r1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e049      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430c:	4b2f      	ldr	r3, [pc, #188]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	f240 11ff 	movw	r1, #511	; 0x1ff
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	ea03 0501 	and.w	r5, r3, r1
 8004322:	ea04 0602 	and.w	r6, r4, r2
 8004326:	4629      	mov	r1, r5
 8004328:	4632      	mov	r2, r6
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	0154      	lsls	r4, r2, #5
 8004334:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004338:	014b      	lsls	r3, r1, #5
 800433a:	4619      	mov	r1, r3
 800433c:	4622      	mov	r2, r4
 800433e:	1b49      	subs	r1, r1, r5
 8004340:	eb62 0206 	sbc.w	r2, r2, r6
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	0194      	lsls	r4, r2, #6
 800434e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004352:	018b      	lsls	r3, r1, #6
 8004354:	1a5b      	subs	r3, r3, r1
 8004356:	eb64 0402 	sbc.w	r4, r4, r2
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	00e2      	lsls	r2, r4, #3
 8004364:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004368:	00d9      	lsls	r1, r3, #3
 800436a:	460b      	mov	r3, r1
 800436c:	4614      	mov	r4, r2
 800436e:	195b      	adds	r3, r3, r5
 8004370:	eb44 0406 	adc.w	r4, r4, r6
 8004374:	f04f 0100 	mov.w	r1, #0
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	02a2      	lsls	r2, r4, #10
 800437e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004382:	0299      	lsls	r1, r3, #10
 8004384:	460b      	mov	r3, r1
 8004386:	4614      	mov	r4, r2
 8004388:	4618      	mov	r0, r3
 800438a:	4621      	mov	r1, r4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f04f 0400 	mov.w	r4, #0
 8004392:	461a      	mov	r2, r3
 8004394:	4623      	mov	r3, r4
 8004396:	f7fb ff1f 	bl	80001d8 <__aeabi_uldivmod>
 800439a:	4603      	mov	r3, r0
 800439c:	460c      	mov	r4, r1
 800439e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	60bb      	str	r3, [r7, #8]
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043be:	60bb      	str	r3, [r7, #8]
      break;
 80043c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c2:	68bb      	ldr	r3, [r7, #8]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	00f42400 	.word	0x00f42400
 80043d4:	007a1200 	.word	0x007a1200

080043d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <HAL_RCC_GetHCLKFreq+0x14>)
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20000000 	.word	0x20000000

080043f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043f4:	f7ff fff0 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 80043f8:	4601      	mov	r1, r0
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	0a9b      	lsrs	r3, r3, #10
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4a03      	ldr	r2, [pc, #12]	; (8004414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40023800 	.word	0x40023800
 8004414:	08007eb8 	.word	0x08007eb8

08004418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800441c:	f7ff ffdc 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 8004420:	4601      	mov	r1, r0
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0b5b      	lsrs	r3, r3, #13
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4a03      	ldr	r2, [pc, #12]	; (800443c <HAL_RCC_GetPCLK2Freq+0x24>)
 800442e:	5cd3      	ldrb	r3, [r2, r3]
 8004430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	08007eb8 	.word	0x08007eb8

08004440 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004464:	2b00      	cmp	r3, #0
 8004466:	d038      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800446e:	f7fc fe87 	bl	8001180 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004476:	f7fc fe83 	bl	8001180 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0bd      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004488:	4b61      	ldr	r3, [pc, #388]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	495a      	ldr	r1, [pc, #360]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ae:	4b57      	ldr	r3, [pc, #348]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044b4:	f7fc fe64 	bl	8001180 <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044bc:	f7fc fe60 	bl	8001180 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e09a      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ce:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8083 	beq.w	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	4b48      	ldr	r3, [pc, #288]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	4a47      	ldr	r2, [pc, #284]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	; 0x40
 80044f8:	4b45      	ldr	r3, [pc, #276]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004504:	4b43      	ldr	r3, [pc, #268]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a42      	ldr	r2, [pc, #264]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800450a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004510:	f7fc fe36 	bl	8001180 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004518:	f7fc fe32 	bl	8001180 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e06c      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800452a:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004536:	4b36      	ldr	r3, [pc, #216]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d02f      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d028      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455e:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004564:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b01      	cmp	r3, #1
 800457a:	d114      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800457c:	f7fc fe00 	bl	8001180 <HAL_GetTick>
 8004580:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	e00a      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fc fdfc 	bl	8001180 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e034      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b2:	d10d      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80045b4:	4b16      	ldr	r3, [pc, #88]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c8:	4911      	ldr	r1, [pc, #68]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
 80045ce:	e005      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045da:	6093      	str	r3, [r2, #8]
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e8:	4909      	ldr	r1, [pc, #36]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7d1a      	ldrb	r2, [r3, #20]
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004600:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	42470068 	.word	0x42470068
 8004610:	40023800 	.word	0x40023800
 8004614:	40007000 	.word	0x40007000
 8004618:	42470e40 	.word	0x42470e40
 800461c:	424711e0 	.word	0x424711e0

08004620 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d13f      	bne.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800463e:	4b23      	ldr	r3, [pc, #140]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004646:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d004      	beq.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800464e:	2b01      	cmp	r3, #1
 8004650:	d131      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004652:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004654:	617b      	str	r3, [r7, #20]
          break;
 8004656:	e031      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004658:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004664:	d109      	bne.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	e008      	b.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800467c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800468e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004692:	099b      	lsrs	r3, r3, #6
 8004694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a6:	0f1b      	lsrs	r3, r3, #28
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	617b      	str	r3, [r7, #20]
          break;
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
          break;
 80046ba:	bf00      	nop
        }
      }
      break;
 80046bc:	bf00      	nop
    }
  }
  return frequency;
 80046be:	697b      	ldr	r3, [r7, #20]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40023800 	.word	0x40023800
 80046d0:	00bb8000 	.word	0x00bb8000
 80046d4:	007a1200 	.word	0x007a1200
 80046d8:	00f42400 	.word	0x00f42400

080046dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e056      	b.n	800479c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fc fb23 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004724:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	ea42 0103 	orr.w	r1, r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	f003 0104 	and.w	r1, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800478a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e01d      	b.n	80047f2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc fb0a 	bl	8000de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f000 f8d0 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004812:	2302      	movs	r3, #2
 8004814:	e0b4      	b.n	8004980 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	f200 809f 	bhi.w	800496c <HAL_TIM_PWM_ConfigChannel+0x170>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004869 	.word	0x08004869
 8004838:	0800496d 	.word	0x0800496d
 800483c:	0800496d 	.word	0x0800496d
 8004840:	0800496d 	.word	0x0800496d
 8004844:	080048a9 	.word	0x080048a9
 8004848:	0800496d 	.word	0x0800496d
 800484c:	0800496d 	.word	0x0800496d
 8004850:	0800496d 	.word	0x0800496d
 8004854:	080048eb 	.word	0x080048eb
 8004858:	0800496d 	.word	0x0800496d
 800485c:	0800496d 	.word	0x0800496d
 8004860:	0800496d 	.word	0x0800496d
 8004864:	0800492b 	.word	0x0800492b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f90a 	bl	8004a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0208 	orr.w	r2, r2, #8
 8004882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0204 	bic.w	r2, r2, #4
 8004892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6999      	ldr	r1, [r3, #24]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	619a      	str	r2, [r3, #24]
      break;
 80048a6:	e062      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f950 	bl	8004b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	619a      	str	r2, [r3, #24]
      break;
 80048e8:	e041      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f99b 	bl	8004c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0208 	orr.w	r2, r2, #8
 8004904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0204 	bic.w	r2, r2, #4
 8004914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69d9      	ldr	r1, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	61da      	str	r2, [r3, #28]
      break;
 8004928:	e021      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f9e5 	bl	8004d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69d9      	ldr	r1, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	61da      	str	r2, [r3, #28]
      break;
 800496a:	e000      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800496c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a34      	ldr	r2, [pc, #208]	; (8004a6c <TIM_Base_SetConfig+0xe4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00f      	beq.n	80049c0 <TIM_Base_SetConfig+0x38>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00b      	beq.n	80049c0 <TIM_Base_SetConfig+0x38>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a31      	ldr	r2, [pc, #196]	; (8004a70 <TIM_Base_SetConfig+0xe8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_Base_SetConfig+0x38>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a30      	ldr	r2, [pc, #192]	; (8004a74 <TIM_Base_SetConfig+0xec>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_Base_SetConfig+0x38>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a2f      	ldr	r2, [pc, #188]	; (8004a78 <TIM_Base_SetConfig+0xf0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d108      	bne.n	80049d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <TIM_Base_SetConfig+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01b      	beq.n	8004a12 <TIM_Base_SetConfig+0x8a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e0:	d017      	beq.n	8004a12 <TIM_Base_SetConfig+0x8a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <TIM_Base_SetConfig+0xe8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <TIM_Base_SetConfig+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a21      	ldr	r2, [pc, #132]	; (8004a74 <TIM_Base_SetConfig+0xec>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00f      	beq.n	8004a12 <TIM_Base_SetConfig+0x8a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <TIM_Base_SetConfig+0xf0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_Base_SetConfig+0x8a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <TIM_Base_SetConfig+0xf4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <TIM_Base_SetConfig+0xf8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <TIM_Base_SetConfig+0xfc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d108      	bne.n	8004a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <TIM_Base_SetConfig+0xe4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d103      	bne.n	8004a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	615a      	str	r2, [r3, #20]
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800

08004a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f023 0201 	bic.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f023 0302 	bic.w	r3, r3, #2
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a1c      	ldr	r2, [pc, #112]	; (8004b50 <TIM_OC1_SetConfig+0xc8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d10c      	bne.n	8004afe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0308 	bic.w	r3, r3, #8
 8004aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f023 0304 	bic.w	r3, r3, #4
 8004afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <TIM_OC1_SetConfig+0xc8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d111      	bne.n	8004b2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40010000 	.word	0x40010000

08004b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0320 	bic.w	r3, r3, #32
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <TIM_OC2_SetConfig+0xd4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d10d      	bne.n	8004bd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <TIM_OC2_SetConfig+0xd4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d113      	bne.n	8004c00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40010000 	.word	0x40010000

08004c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <TIM_OC3_SetConfig+0xd0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d10d      	bne.n	8004ca6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <TIM_OC3_SetConfig+0xd0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d113      	bne.n	8004cd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	621a      	str	r2, [r3, #32]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	40010000 	.word	0x40010000

08004d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	031b      	lsls	r3, r3, #12
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <TIM_OC4_SetConfig+0x9c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d109      	bne.n	8004d74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	019b      	lsls	r3, r3, #6
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40010000 	.word	0x40010000

08004da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e050      	b.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e04:	d013      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10c      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000

08004e7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e03d      	b.n	8004f14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e03f      	b.n	8004fb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fb ffa8 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2224      	movs	r2, #36	; 0x24
 8004f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f90b 	bl	8005180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b088      	sub	sp, #32
 8004fbe:	af02      	add	r7, sp, #8
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	f040 8083 	bne.w	80050e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Transmit+0x2e>
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e07b      	b.n	80050e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Transmit+0x40>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e074      	b.n	80050e4 <HAL_UART_Transmit+0x12a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2221      	movs	r2, #33	; 0x21
 800500c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005010:	f7fc f8b6 	bl	8001180 <HAL_GetTick>
 8005014:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	88fa      	ldrh	r2, [r7, #6]
 800501a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800502a:	e042      	b.n	80050b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005042:	d122      	bne.n	800508a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	2180      	movs	r1, #128	; 0x80
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f84c 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e042      	b.n	80050e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	3302      	adds	r3, #2
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	e017      	b.n	80050b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3301      	adds	r3, #1
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	e013      	b.n	80050b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	2180      	movs	r1, #128	; 0x80
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f829 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e01f      	b.n	80050e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	60ba      	str	r2, [r7, #8]
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1b7      	bne.n	800502c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f810 	bl	80050ec <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e006      	b.n	80050e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	e000      	b.n	80050e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
  }
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fc:	e02c      	b.n	8005158 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005104:	d028      	beq.n	8005158 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <UART_WaitOnFlagUntilTimeout+0x30>
 800510c:	f7fc f838 	bl	8001180 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	429a      	cmp	r2, r3
 800511a:	d21d      	bcs.n	8005158 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800512a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e00f      	b.n	8005178 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4013      	ands	r3, r2
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	429a      	cmp	r2, r3
 8005174:	d0c3      	beq.n	80050fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051c2:	f023 030c 	bic.w	r3, r3, #12
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	430b      	orrs	r3, r1
 80051ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ee:	f040 818b 	bne.w	8005508 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4ac1      	ldr	r2, [pc, #772]	; (80054fc <UART_SetConfig+0x37c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d005      	beq.n	8005208 <UART_SetConfig+0x88>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4abf      	ldr	r2, [pc, #764]	; (8005500 <UART_SetConfig+0x380>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f040 80bd 	bne.w	8005382 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7ff f906 	bl	8004418 <HAL_RCC_GetPCLK2Freq>
 800520c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	461d      	mov	r5, r3
 8005212:	f04f 0600 	mov.w	r6, #0
 8005216:	46a8      	mov	r8, r5
 8005218:	46b1      	mov	r9, r6
 800521a:	eb18 0308 	adds.w	r3, r8, r8
 800521e:	eb49 0409 	adc.w	r4, r9, r9
 8005222:	4698      	mov	r8, r3
 8005224:	46a1      	mov	r9, r4
 8005226:	eb18 0805 	adds.w	r8, r8, r5
 800522a:	eb49 0906 	adc.w	r9, r9, r6
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800523a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800523e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005242:	4688      	mov	r8, r1
 8005244:	4691      	mov	r9, r2
 8005246:	eb18 0005 	adds.w	r0, r8, r5
 800524a:	eb49 0106 	adc.w	r1, r9, r6
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	461d      	mov	r5, r3
 8005254:	f04f 0600 	mov.w	r6, #0
 8005258:	196b      	adds	r3, r5, r5
 800525a:	eb46 0406 	adc.w	r4, r6, r6
 800525e:	461a      	mov	r2, r3
 8005260:	4623      	mov	r3, r4
 8005262:	f7fa ffb9 	bl	80001d8 <__aeabi_uldivmod>
 8005266:	4603      	mov	r3, r0
 8005268:	460c      	mov	r4, r1
 800526a:	461a      	mov	r2, r3
 800526c:	4ba5      	ldr	r3, [pc, #660]	; (8005504 <UART_SetConfig+0x384>)
 800526e:	fba3 2302 	umull	r2, r3, r3, r2
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	461d      	mov	r5, r3
 800527c:	f04f 0600 	mov.w	r6, #0
 8005280:	46a9      	mov	r9, r5
 8005282:	46b2      	mov	sl, r6
 8005284:	eb19 0309 	adds.w	r3, r9, r9
 8005288:	eb4a 040a 	adc.w	r4, sl, sl
 800528c:	4699      	mov	r9, r3
 800528e:	46a2      	mov	sl, r4
 8005290:	eb19 0905 	adds.w	r9, r9, r5
 8005294:	eb4a 0a06 	adc.w	sl, sl, r6
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052ac:	4689      	mov	r9, r1
 80052ae:	4692      	mov	sl, r2
 80052b0:	eb19 0005 	adds.w	r0, r9, r5
 80052b4:	eb4a 0106 	adc.w	r1, sl, r6
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	461d      	mov	r5, r3
 80052be:	f04f 0600 	mov.w	r6, #0
 80052c2:	196b      	adds	r3, r5, r5
 80052c4:	eb46 0406 	adc.w	r4, r6, r6
 80052c8:	461a      	mov	r2, r3
 80052ca:	4623      	mov	r3, r4
 80052cc:	f7fa ff84 	bl	80001d8 <__aeabi_uldivmod>
 80052d0:	4603      	mov	r3, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b8b      	ldr	r3, [pc, #556]	; (8005504 <UART_SetConfig+0x384>)
 80052d8:	fba3 1302 	umull	r1, r3, r3, r2
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	3332      	adds	r3, #50	; 0x32
 80052ea:	4a86      	ldr	r2, [pc, #536]	; (8005504 <UART_SetConfig+0x384>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052f8:	4498      	add	r8, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	461d      	mov	r5, r3
 80052fe:	f04f 0600 	mov.w	r6, #0
 8005302:	46a9      	mov	r9, r5
 8005304:	46b2      	mov	sl, r6
 8005306:	eb19 0309 	adds.w	r3, r9, r9
 800530a:	eb4a 040a 	adc.w	r4, sl, sl
 800530e:	4699      	mov	r9, r3
 8005310:	46a2      	mov	sl, r4
 8005312:	eb19 0905 	adds.w	r9, r9, r5
 8005316:	eb4a 0a06 	adc.w	sl, sl, r6
 800531a:	f04f 0100 	mov.w	r1, #0
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005326:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800532a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800532e:	4689      	mov	r9, r1
 8005330:	4692      	mov	sl, r2
 8005332:	eb19 0005 	adds.w	r0, r9, r5
 8005336:	eb4a 0106 	adc.w	r1, sl, r6
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	461d      	mov	r5, r3
 8005340:	f04f 0600 	mov.w	r6, #0
 8005344:	196b      	adds	r3, r5, r5
 8005346:	eb46 0406 	adc.w	r4, r6, r6
 800534a:	461a      	mov	r2, r3
 800534c:	4623      	mov	r3, r4
 800534e:	f7fa ff43 	bl	80001d8 <__aeabi_uldivmod>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	461a      	mov	r2, r3
 8005358:	4b6a      	ldr	r3, [pc, #424]	; (8005504 <UART_SetConfig+0x384>)
 800535a:	fba3 1302 	umull	r1, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2164      	movs	r1, #100	; 0x64
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a65      	ldr	r2, [pc, #404]	; (8005504 <UART_SetConfig+0x384>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 0207 	and.w	r2, r3, #7
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4442      	add	r2, r8
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	e26f      	b.n	8005862 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005382:	f7ff f835 	bl	80043f0 <HAL_RCC_GetPCLK1Freq>
 8005386:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	461d      	mov	r5, r3
 800538c:	f04f 0600 	mov.w	r6, #0
 8005390:	46a8      	mov	r8, r5
 8005392:	46b1      	mov	r9, r6
 8005394:	eb18 0308 	adds.w	r3, r8, r8
 8005398:	eb49 0409 	adc.w	r4, r9, r9
 800539c:	4698      	mov	r8, r3
 800539e:	46a1      	mov	r9, r4
 80053a0:	eb18 0805 	adds.w	r8, r8, r5
 80053a4:	eb49 0906 	adc.w	r9, r9, r6
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053bc:	4688      	mov	r8, r1
 80053be:	4691      	mov	r9, r2
 80053c0:	eb18 0005 	adds.w	r0, r8, r5
 80053c4:	eb49 0106 	adc.w	r1, r9, r6
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	461d      	mov	r5, r3
 80053ce:	f04f 0600 	mov.w	r6, #0
 80053d2:	196b      	adds	r3, r5, r5
 80053d4:	eb46 0406 	adc.w	r4, r6, r6
 80053d8:	461a      	mov	r2, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	f7fa fefc 	bl	80001d8 <__aeabi_uldivmod>
 80053e0:	4603      	mov	r3, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b47      	ldr	r3, [pc, #284]	; (8005504 <UART_SetConfig+0x384>)
 80053e8:	fba3 2302 	umull	r2, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	461d      	mov	r5, r3
 80053f6:	f04f 0600 	mov.w	r6, #0
 80053fa:	46a9      	mov	r9, r5
 80053fc:	46b2      	mov	sl, r6
 80053fe:	eb19 0309 	adds.w	r3, r9, r9
 8005402:	eb4a 040a 	adc.w	r4, sl, sl
 8005406:	4699      	mov	r9, r3
 8005408:	46a2      	mov	sl, r4
 800540a:	eb19 0905 	adds.w	r9, r9, r5
 800540e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005412:	f04f 0100 	mov.w	r1, #0
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800541e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005422:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005426:	4689      	mov	r9, r1
 8005428:	4692      	mov	sl, r2
 800542a:	eb19 0005 	adds.w	r0, r9, r5
 800542e:	eb4a 0106 	adc.w	r1, sl, r6
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	461d      	mov	r5, r3
 8005438:	f04f 0600 	mov.w	r6, #0
 800543c:	196b      	adds	r3, r5, r5
 800543e:	eb46 0406 	adc.w	r4, r6, r6
 8005442:	461a      	mov	r2, r3
 8005444:	4623      	mov	r3, r4
 8005446:	f7fa fec7 	bl	80001d8 <__aeabi_uldivmod>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	461a      	mov	r2, r3
 8005450:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <UART_SetConfig+0x384>)
 8005452:	fba3 1302 	umull	r1, r3, r3, r2
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2164      	movs	r1, #100	; 0x64
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	3332      	adds	r3, #50	; 0x32
 8005464:	4a27      	ldr	r2, [pc, #156]	; (8005504 <UART_SetConfig+0x384>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005472:	4498      	add	r8, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	461d      	mov	r5, r3
 8005478:	f04f 0600 	mov.w	r6, #0
 800547c:	46a9      	mov	r9, r5
 800547e:	46b2      	mov	sl, r6
 8005480:	eb19 0309 	adds.w	r3, r9, r9
 8005484:	eb4a 040a 	adc.w	r4, sl, sl
 8005488:	4699      	mov	r9, r3
 800548a:	46a2      	mov	sl, r4
 800548c:	eb19 0905 	adds.w	r9, r9, r5
 8005490:	eb4a 0a06 	adc.w	sl, sl, r6
 8005494:	f04f 0100 	mov.w	r1, #0
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054a8:	4689      	mov	r9, r1
 80054aa:	4692      	mov	sl, r2
 80054ac:	eb19 0005 	adds.w	r0, r9, r5
 80054b0:	eb4a 0106 	adc.w	r1, sl, r6
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	461d      	mov	r5, r3
 80054ba:	f04f 0600 	mov.w	r6, #0
 80054be:	196b      	adds	r3, r5, r5
 80054c0:	eb46 0406 	adc.w	r4, r6, r6
 80054c4:	461a      	mov	r2, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	f7fa fe86 	bl	80001d8 <__aeabi_uldivmod>
 80054cc:	4603      	mov	r3, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <UART_SetConfig+0x384>)
 80054d4:	fba3 1302 	umull	r1, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	2164      	movs	r1, #100	; 0x64
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	3332      	adds	r3, #50	; 0x32
 80054e6:	4a07      	ldr	r2, [pc, #28]	; (8005504 <UART_SetConfig+0x384>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f003 0207 	and.w	r2, r3, #7
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4442      	add	r2, r8
 80054f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80054fa:	e1b2      	b.n	8005862 <UART_SetConfig+0x6e2>
 80054fc:	40011000 	.word	0x40011000
 8005500:	40011400 	.word	0x40011400
 8005504:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4ad7      	ldr	r2, [pc, #860]	; (800586c <UART_SetConfig+0x6ec>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d005      	beq.n	800551e <UART_SetConfig+0x39e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4ad6      	ldr	r2, [pc, #856]	; (8005870 <UART_SetConfig+0x6f0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	f040 80d1 	bne.w	80056c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800551e:	f7fe ff7b 	bl	8004418 <HAL_RCC_GetPCLK2Freq>
 8005522:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	469a      	mov	sl, r3
 8005528:	f04f 0b00 	mov.w	fp, #0
 800552c:	46d0      	mov	r8, sl
 800552e:	46d9      	mov	r9, fp
 8005530:	eb18 0308 	adds.w	r3, r8, r8
 8005534:	eb49 0409 	adc.w	r4, r9, r9
 8005538:	4698      	mov	r8, r3
 800553a:	46a1      	mov	r9, r4
 800553c:	eb18 080a 	adds.w	r8, r8, sl
 8005540:	eb49 090b 	adc.w	r9, r9, fp
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005550:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005554:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005558:	4688      	mov	r8, r1
 800555a:	4691      	mov	r9, r2
 800555c:	eb1a 0508 	adds.w	r5, sl, r8
 8005560:	eb4b 0609 	adc.w	r6, fp, r9
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4619      	mov	r1, r3
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	f04f 0400 	mov.w	r4, #0
 8005576:	0094      	lsls	r4, r2, #2
 8005578:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800557c:	008b      	lsls	r3, r1, #2
 800557e:	461a      	mov	r2, r3
 8005580:	4623      	mov	r3, r4
 8005582:	4628      	mov	r0, r5
 8005584:	4631      	mov	r1, r6
 8005586:	f7fa fe27 	bl	80001d8 <__aeabi_uldivmod>
 800558a:	4603      	mov	r3, r0
 800558c:	460c      	mov	r4, r1
 800558e:	461a      	mov	r2, r3
 8005590:	4bb8      	ldr	r3, [pc, #736]	; (8005874 <UART_SetConfig+0x6f4>)
 8005592:	fba3 2302 	umull	r2, r3, r3, r2
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	469b      	mov	fp, r3
 80055a0:	f04f 0c00 	mov.w	ip, #0
 80055a4:	46d9      	mov	r9, fp
 80055a6:	46e2      	mov	sl, ip
 80055a8:	eb19 0309 	adds.w	r3, r9, r9
 80055ac:	eb4a 040a 	adc.w	r4, sl, sl
 80055b0:	4699      	mov	r9, r3
 80055b2:	46a2      	mov	sl, r4
 80055b4:	eb19 090b 	adds.w	r9, r9, fp
 80055b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d0:	4689      	mov	r9, r1
 80055d2:	4692      	mov	sl, r2
 80055d4:	eb1b 0509 	adds.w	r5, fp, r9
 80055d8:	eb4c 060a 	adc.w	r6, ip, sl
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4619      	mov	r1, r3
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	f04f 0400 	mov.w	r4, #0
 80055ee:	0094      	lsls	r4, r2, #2
 80055f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055f4:	008b      	lsls	r3, r1, #2
 80055f6:	461a      	mov	r2, r3
 80055f8:	4623      	mov	r3, r4
 80055fa:	4628      	mov	r0, r5
 80055fc:	4631      	mov	r1, r6
 80055fe:	f7fa fdeb 	bl	80001d8 <__aeabi_uldivmod>
 8005602:	4603      	mov	r3, r0
 8005604:	460c      	mov	r4, r1
 8005606:	461a      	mov	r2, r3
 8005608:	4b9a      	ldr	r3, [pc, #616]	; (8005874 <UART_SetConfig+0x6f4>)
 800560a:	fba3 1302 	umull	r1, r3, r3, r2
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	2164      	movs	r1, #100	; 0x64
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	3332      	adds	r3, #50	; 0x32
 800561c:	4a95      	ldr	r2, [pc, #596]	; (8005874 <UART_SetConfig+0x6f4>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005628:	4498      	add	r8, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	469b      	mov	fp, r3
 800562e:	f04f 0c00 	mov.w	ip, #0
 8005632:	46d9      	mov	r9, fp
 8005634:	46e2      	mov	sl, ip
 8005636:	eb19 0309 	adds.w	r3, r9, r9
 800563a:	eb4a 040a 	adc.w	r4, sl, sl
 800563e:	4699      	mov	r9, r3
 8005640:	46a2      	mov	sl, r4
 8005642:	eb19 090b 	adds.w	r9, r9, fp
 8005646:	eb4a 0a0c 	adc.w	sl, sl, ip
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005656:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800565a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800565e:	4689      	mov	r9, r1
 8005660:	4692      	mov	sl, r2
 8005662:	eb1b 0509 	adds.w	r5, fp, r9
 8005666:	eb4c 060a 	adc.w	r6, ip, sl
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	4619      	mov	r1, r3
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	f04f 0400 	mov.w	r4, #0
 800567c:	0094      	lsls	r4, r2, #2
 800567e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005682:	008b      	lsls	r3, r1, #2
 8005684:	461a      	mov	r2, r3
 8005686:	4623      	mov	r3, r4
 8005688:	4628      	mov	r0, r5
 800568a:	4631      	mov	r1, r6
 800568c:	f7fa fda4 	bl	80001d8 <__aeabi_uldivmod>
 8005690:	4603      	mov	r3, r0
 8005692:	460c      	mov	r4, r1
 8005694:	461a      	mov	r2, r3
 8005696:	4b77      	ldr	r3, [pc, #476]	; (8005874 <UART_SetConfig+0x6f4>)
 8005698:	fba3 1302 	umull	r1, r3, r3, r2
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	2164      	movs	r1, #100	; 0x64
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	3332      	adds	r3, #50	; 0x32
 80056aa:	4a72      	ldr	r2, [pc, #456]	; (8005874 <UART_SetConfig+0x6f4>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	f003 020f 	and.w	r2, r3, #15
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4442      	add	r2, r8
 80056bc:	609a      	str	r2, [r3, #8]
 80056be:	e0d0      	b.n	8005862 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7fe fe96 	bl	80043f0 <HAL_RCC_GetPCLK1Freq>
 80056c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	469a      	mov	sl, r3
 80056ca:	f04f 0b00 	mov.w	fp, #0
 80056ce:	46d0      	mov	r8, sl
 80056d0:	46d9      	mov	r9, fp
 80056d2:	eb18 0308 	adds.w	r3, r8, r8
 80056d6:	eb49 0409 	adc.w	r4, r9, r9
 80056da:	4698      	mov	r8, r3
 80056dc:	46a1      	mov	r9, r4
 80056de:	eb18 080a 	adds.w	r8, r8, sl
 80056e2:	eb49 090b 	adc.w	r9, r9, fp
 80056e6:	f04f 0100 	mov.w	r1, #0
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056fa:	4688      	mov	r8, r1
 80056fc:	4691      	mov	r9, r2
 80056fe:	eb1a 0508 	adds.w	r5, sl, r8
 8005702:	eb4b 0609 	adc.w	r6, fp, r9
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	4619      	mov	r1, r3
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	f04f 0400 	mov.w	r4, #0
 8005718:	0094      	lsls	r4, r2, #2
 800571a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800571e:	008b      	lsls	r3, r1, #2
 8005720:	461a      	mov	r2, r3
 8005722:	4623      	mov	r3, r4
 8005724:	4628      	mov	r0, r5
 8005726:	4631      	mov	r1, r6
 8005728:	f7fa fd56 	bl	80001d8 <__aeabi_uldivmod>
 800572c:	4603      	mov	r3, r0
 800572e:	460c      	mov	r4, r1
 8005730:	461a      	mov	r2, r3
 8005732:	4b50      	ldr	r3, [pc, #320]	; (8005874 <UART_SetConfig+0x6f4>)
 8005734:	fba3 2302 	umull	r2, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	469b      	mov	fp, r3
 8005742:	f04f 0c00 	mov.w	ip, #0
 8005746:	46d9      	mov	r9, fp
 8005748:	46e2      	mov	sl, ip
 800574a:	eb19 0309 	adds.w	r3, r9, r9
 800574e:	eb4a 040a 	adc.w	r4, sl, sl
 8005752:	4699      	mov	r9, r3
 8005754:	46a2      	mov	sl, r4
 8005756:	eb19 090b 	adds.w	r9, r9, fp
 800575a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800575e:	f04f 0100 	mov.w	r1, #0
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800576e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005772:	4689      	mov	r9, r1
 8005774:	4692      	mov	sl, r2
 8005776:	eb1b 0509 	adds.w	r5, fp, r9
 800577a:	eb4c 060a 	adc.w	r6, ip, sl
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4619      	mov	r1, r3
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	f04f 0400 	mov.w	r4, #0
 8005790:	0094      	lsls	r4, r2, #2
 8005792:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005796:	008b      	lsls	r3, r1, #2
 8005798:	461a      	mov	r2, r3
 800579a:	4623      	mov	r3, r4
 800579c:	4628      	mov	r0, r5
 800579e:	4631      	mov	r1, r6
 80057a0:	f7fa fd1a 	bl	80001d8 <__aeabi_uldivmod>
 80057a4:	4603      	mov	r3, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	461a      	mov	r2, r3
 80057aa:	4b32      	ldr	r3, [pc, #200]	; (8005874 <UART_SetConfig+0x6f4>)
 80057ac:	fba3 1302 	umull	r1, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	2164      	movs	r1, #100	; 0x64
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	3332      	adds	r3, #50	; 0x32
 80057be:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <UART_SetConfig+0x6f4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ca:	4498      	add	r8, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	469b      	mov	fp, r3
 80057d0:	f04f 0c00 	mov.w	ip, #0
 80057d4:	46d9      	mov	r9, fp
 80057d6:	46e2      	mov	sl, ip
 80057d8:	eb19 0309 	adds.w	r3, r9, r9
 80057dc:	eb4a 040a 	adc.w	r4, sl, sl
 80057e0:	4699      	mov	r9, r3
 80057e2:	46a2      	mov	sl, r4
 80057e4:	eb19 090b 	adds.w	r9, r9, fp
 80057e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057ec:	f04f 0100 	mov.w	r1, #0
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005800:	4689      	mov	r9, r1
 8005802:	4692      	mov	sl, r2
 8005804:	eb1b 0509 	adds.w	r5, fp, r9
 8005808:	eb4c 060a 	adc.w	r6, ip, sl
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4619      	mov	r1, r3
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	f04f 0400 	mov.w	r4, #0
 800581e:	0094      	lsls	r4, r2, #2
 8005820:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005824:	008b      	lsls	r3, r1, #2
 8005826:	461a      	mov	r2, r3
 8005828:	4623      	mov	r3, r4
 800582a:	4628      	mov	r0, r5
 800582c:	4631      	mov	r1, r6
 800582e:	f7fa fcd3 	bl	80001d8 <__aeabi_uldivmod>
 8005832:	4603      	mov	r3, r0
 8005834:	460c      	mov	r4, r1
 8005836:	461a      	mov	r2, r3
 8005838:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <UART_SetConfig+0x6f4>)
 800583a:	fba3 1302 	umull	r1, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2164      	movs	r1, #100	; 0x64
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	; 0x32
 800584c:	4a09      	ldr	r2, [pc, #36]	; (8005874 <UART_SetConfig+0x6f4>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 020f 	and.w	r2, r3, #15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4442      	add	r2, r8
 800585e:	609a      	str	r2, [r3, #8]
}
 8005860:	e7ff      	b.n	8005862 <UART_SetConfig+0x6e2>
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586c:	40011000 	.word	0x40011000
 8005870:	40011400 	.word	0x40011400
 8005874:	51eb851f 	.word	0x51eb851f

08005878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005878:	b084      	sub	sp, #16
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	f107 001c 	add.w	r0, r7, #28
 8005886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2b01      	cmp	r3, #1
 800588e:	d122      	bne.n	80058d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d105      	bne.n	80058ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f94a 	bl	8005b64 <USB_CoreReset>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	e01a      	b.n	800590c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f93e 	bl	8005b64 <USB_CoreReset>
 80058e8:	4603      	mov	r3, r0
 80058ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
 80058fe:	e005      	b.n	800590c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10b      	bne.n	800592a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f043 0206 	orr.w	r2, r3, #6
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005936:	b004      	add	sp, #16
 8005938:	4770      	bx	lr

0800593a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f043 0201 	orr.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 0201 	bic.w	r2, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e00b      	b.n	80059c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	e001      	b.n	80059c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e003      	b.n	80059ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80059c2:	2032      	movs	r0, #50	; 0x32
 80059c4:	f7fb fbe8 	bl	8001198 <HAL_Delay>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	f043 0220 	orr.w	r2, r3, #32
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <USB_FlushTxFifo+0x48>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d901      	bls.n	8005a00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e006      	b.n	8005a0e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d0f0      	beq.n	80059ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	00030d40 	.word	0x00030d40

08005a20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2210      	movs	r2, #16
 8005a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <USB_FlushRxFifo+0x40>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d901      	bls.n	8005a44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e006      	b.n	8005a52 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d0f0      	beq.n	8005a32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	00030d40 	.word	0x00030d40

08005a64 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b089      	sub	sp, #36	; 0x24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	460b      	mov	r3, r1
 8005a74:	71fb      	strb	r3, [r7, #7]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11a      	bne.n	8005ac0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a8a:	88bb      	ldrh	r3, [r7, #4]
 8005a8c:	3303      	adds	r3, #3
 8005a8e:	089b      	lsrs	r3, r3, #2
 8005a90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e00f      	b.n	8005ab8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	031a      	lsls	r2, r3, #12
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d3eb      	bcc.n	8005a98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b089      	sub	sp, #36	; 0x24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e00b      	b.n	8005b0a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	601a      	str	r2, [r3, #0]
    pDest++;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3304      	adds	r3, #4
 8005b02:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d3ef      	bcc.n	8005af2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b12:	69fb      	ldr	r3, [r7, #28]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3724      	adds	r7, #36	; 0x24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4013      	ands	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0301 	and.w	r3, r3, #1
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <USB_CoreReset+0x64>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e01b      	b.n	8005bba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	daf2      	bge.n	8005b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f043 0201 	orr.w	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <USB_CoreReset+0x64>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e006      	b.n	8005bba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d0f0      	beq.n	8005b9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	00030d40 	.word	0x00030d40

08005bcc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bcc:	b084      	sub	sp, #16
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	f107 001c 	add.w	r0, r7, #28
 8005bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005be8:	461a      	mov	r2, r3
 8005bea:	2300      	movs	r3, #0
 8005bec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d018      	beq.n	8005c50 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d10a      	bne.n	8005c3a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c32:	f043 0304 	orr.w	r3, r3, #4
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	e014      	b.n	8005c64 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c48:	f023 0304 	bic.w	r3, r3, #4
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e009      	b.n	8005c64 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c5e:	f023 0304 	bic.w	r3, r3, #4
 8005c62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005c64:	2110      	movs	r1, #16
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff feb4 	bl	80059d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff fed7 	bl	8005a20 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e015      	b.n	8005ca4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	461a      	mov	r2, r3
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d3e5      	bcc.n	8005c78 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005cac:	2101      	movs	r1, #1
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f882 	bl	8005db8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005cb4:	20c8      	movs	r0, #200	; 0xc8
 8005cb6:	f7fb fa6f 	bl	8001198 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cc6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00b      	beq.n	8005cec <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <USB_HostInit+0x164>)
 8005ce0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <USB_HostInit+0x168>)
 8005ce6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005cea:	e009      	b.n	8005d00 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2280      	movs	r2, #128	; 0x80
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <USB_HostInit+0x16c>)
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a10      	ldr	r2, [pc, #64]	; (8005d3c <USB_HostInit+0x170>)
 8005cfc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d105      	bne.n	8005d12 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f043 0210 	orr.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <USB_HostInit+0x174>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d2a:	b004      	add	sp, #16
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	01000200 	.word	0x01000200
 8005d34:	00e00300 	.word	0x00e00300
 8005d38:	00600080 	.word	0x00600080
 8005d3c:	004000e0 	.word	0x004000e0
 8005d40:	a3200008 	.word	0xa3200008

08005d44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d107      	bne.n	8005d96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d92:	6053      	str	r3, [r2, #4]
 8005d94:	e009      	b.n	8005daa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d106      	bne.n	8005daa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da2:	461a      	mov	r2, r3
 8005da4:	f241 7370 	movw	r3, #6000	; 0x1770
 8005da8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ddc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <USB_DriveVbus+0x44>
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d106      	bne.n	8005dfc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dfa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e06:	d109      	bne.n	8005e1c <USB_DriveVbus+0x64>
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	b29b      	uxth	r3, r3
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	4608      	mov	r0, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	70fb      	strb	r3, [r7, #3]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70bb      	strb	r3, [r7, #2]
 8005e62:	4613      	mov	r3, r2
 8005e64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e80:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d87e      	bhi.n	8005f88 <USB_HC_Init+0x13c>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <USB_HC_Init+0x44>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005ea1 	.word	0x08005ea1
 8005e94:	08005f4b 	.word	0x08005f4b
 8005e98:	08005ea1 	.word	0x08005ea1
 8005e9c:	08005f0d 	.word	0x08005f0d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eac:	461a      	mov	r2, r3
 8005eae:	f240 439d 	movw	r3, #1181	; 0x49d
 8005eb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005eb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da10      	bge.n	8005ede <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	78fa      	ldrb	r2, [r7, #3]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eda:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005edc:	e057      	b.n	8005f8e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d051      	beq.n	8005f8e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f08:	60d3      	str	r3, [r2, #12]
      break;
 8005f0a:	e040      	b.n	8005f8e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	da34      	bge.n	8005f92 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f46:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f48:	e023      	b.n	8005f92 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	461a      	mov	r2, r3
 8005f58:	f240 2325 	movw	r3, #549	; 0x225
 8005f5c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f5e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da17      	bge.n	8005f96 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f80:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f84:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f86:	e006      	b.n	8005f96 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8c:	e004      	b.n	8005f98 <USB_HC_Init+0x14c>
      break;
 8005f8e:	bf00      	nop
 8005f90:	e002      	b.n	8005f98 <USB_HC_Init+0x14c>
      break;
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <USB_HC_Init+0x14c>
      break;
 8005f96:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005fc2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da03      	bge.n	8005fd2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e001      	b.n	8005fd6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005fd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d103      	bne.n	8005fe6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e001      	b.n	8005fea <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fea:	787b      	ldrb	r3, [r7, #1]
 8005fec:	059b      	lsls	r3, r3, #22
 8005fee:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ff2:	78bb      	ldrb	r3, [r7, #2]
 8005ff4:	02db      	lsls	r3, r3, #11
 8005ff6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ffa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006000:	049b      	lsls	r3, r3, #18
 8006002:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006006:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006008:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800600a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800600e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	0159      	lsls	r1, r3, #5
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	440b      	add	r3, r1
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006026:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006028:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800602c:	2b03      	cmp	r3, #3
 800602e:	d10f      	bne.n	8006050 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	440a      	add	r2, r1
 8006046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800604e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006050:	7dfb      	ldrb	r3, [r7, #23]
}
 8006052:	4618      	mov	r0, r3
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08c      	sub	sp, #48	; 0x30
 8006064:	af02      	add	r7, sp, #8
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800607c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d028      	beq.n	80060dc <USB_HC_StartXfer+0x7c>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d124      	bne.n	80060dc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10b      	bne.n	80060b0 <USB_HC_StartXfer+0x50>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	795b      	ldrb	r3, [r3, #5]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d107      	bne.n	80060b0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	4619      	mov	r1, r3
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fa2e 	bl	8006508 <USB_DoPing>
      return HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e112      	b.n	80062d6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d112      	bne.n	80060dc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80060d4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2200      	movs	r2, #0
 80060da:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d018      	beq.n	8006116 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	8912      	ldrh	r2, [r2, #8]
 80060ec:	4413      	add	r3, r2
 80060ee:	3b01      	subs	r3, #1
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	8912      	ldrh	r2, [r2, #8]
 80060f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80060fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060fc:	8b7b      	ldrh	r3, [r7, #26]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d90b      	bls.n	800611a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006102:	8b7b      	ldrh	r3, [r7, #26]
 8006104:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006106:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	8912      	ldrh	r2, [r2, #8]
 800610c:	fb02 f203 	mul.w	r2, r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	611a      	str	r2, [r3, #16]
 8006114:	e001      	b.n	800611a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006116:	2301      	movs	r3, #1
 8006118:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	78db      	ldrb	r3, [r3, #3]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	8912      	ldrh	r2, [r2, #8]
 8006128:	fb02 f203 	mul.w	r2, r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800613a:	04d9      	lsls	r1, r3, #19
 800613c:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <USB_HC_StartXfer+0x280>)
 800613e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006140:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	7a9b      	ldrb	r3, [r3, #10]
 8006146:	075b      	lsls	r3, r3, #29
 8006148:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	0148      	lsls	r0, r1, #5
 8006150:	6a39      	ldr	r1, [r7, #32]
 8006152:	4401      	add	r1, r0
 8006154:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006158:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800615a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	68d9      	ldr	r1, [r3, #12]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	460a      	mov	r2, r1
 8006174:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	7e7b      	ldrb	r3, [r7, #25]
 80061be:	075b      	lsls	r3, r3, #29
 80061c0:	69f9      	ldr	r1, [r7, #28]
 80061c2:	0148      	lsls	r0, r1, #5
 80061c4:	6a39      	ldr	r1, [r7, #32]
 80061c6:	4401      	add	r1, r0
 80061c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061cc:	4313      	orrs	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a41      	ldr	r2, [pc, #260]	; (80062e4 <USB_HC_StartXfer+0x284>)
 80061e0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061e2:	4b40      	ldr	r3, [pc, #256]	; (80062e4 <USB_HC_StartXfer+0x284>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061ea:	4a3e      	ldr	r2, [pc, #248]	; (80062e4 <USB_HC_StartXfer+0x284>)
 80061ec:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	78db      	ldrb	r3, [r3, #3]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d006      	beq.n	8006204 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80061f6:	4b3b      	ldr	r3, [pc, #236]	; (80062e4 <USB_HC_StartXfer+0x284>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	4a39      	ldr	r2, [pc, #228]	; (80062e4 <USB_HC_StartXfer+0x284>)
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e005      	b.n	8006210 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006204:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <USB_HC_StartXfer+0x284>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800620c:	4a35      	ldr	r2, [pc, #212]	; (80062e4 <USB_HC_StartXfer+0x284>)
 800620e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006210:	4b34      	ldr	r3, [pc, #208]	; (80062e4 <USB_HC_StartXfer+0x284>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006218:	4a32      	ldr	r2, [pc, #200]	; (80062e4 <USB_HC_StartXfer+0x284>)
 800621a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	461a      	mov	r2, r3
 800622a:	4b2e      	ldr	r3, [pc, #184]	; (80062e4 <USB_HC_StartXfer+0x284>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d14e      	bne.n	80062d4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	78db      	ldrb	r3, [r3, #3]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d14a      	bne.n	80062d4 <USB_HC_StartXfer+0x274>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d046      	beq.n	80062d4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	79db      	ldrb	r3, [r3, #7]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d830      	bhi.n	80062b0 <USB_HC_StartXfer+0x250>
 800624e:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <USB_HC_StartXfer+0x1f4>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	08006265 	.word	0x08006265
 8006258:	08006289 	.word	0x08006289
 800625c:	08006265 	.word	0x08006265
 8006260:	08006289 	.word	0x08006289
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	3303      	adds	r3, #3
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800626e:	8afa      	ldrh	r2, [r7, #22]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006274:	b29b      	uxth	r3, r3
 8006276:	429a      	cmp	r2, r3
 8006278:	d91c      	bls.n	80062b4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f043 0220 	orr.w	r2, r3, #32
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	619a      	str	r2, [r3, #24]
          }
          break;
 8006286:	e015      	b.n	80062b4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	3303      	adds	r3, #3
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006292:	8afa      	ldrh	r2, [r7, #22]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	b29b      	uxth	r3, r3
 800629e:	429a      	cmp	r2, r3
 80062a0:	d90a      	bls.n	80062b8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	619a      	str	r2, [r3, #24]
          }
          break;
 80062ae:	e003      	b.n	80062b8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80062b0:	bf00      	nop
 80062b2:	e002      	b.n	80062ba <USB_HC_StartXfer+0x25a>
          break;
 80062b4:	bf00      	nop
 80062b6:	e000      	b.n	80062ba <USB_HC_StartXfer+0x25a>
          break;
 80062b8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	68d9      	ldr	r1, [r3, #12]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	785a      	ldrb	r2, [r3, #1]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	b298      	uxth	r0, r3
 80062c8:	2300      	movs	r3, #0
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4603      	mov	r3, r0
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff fbc8 	bl	8005a64 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	1ff80000 	.word	0x1ff80000
 80062e4:	200000b0 	.word	0x200000b0

080062e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	b29b      	uxth	r3, r3
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800630a:	b480      	push	{r7}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	0c9b      	lsrs	r3, r3, #18
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <USB_HC_Halt+0x3a>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d16c      	bne.n	800641e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	440a      	add	r2, r1
 800635a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800635e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006362:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d143      	bne.n	80063f8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	440a      	add	r2, r1
 8006386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800638a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800638e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	3301      	adds	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063dc:	d81d      	bhi.n	800641a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063f4:	d0ec      	beq.n	80063d0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80063f6:	e080      	b.n	80064fa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	440a      	add	r2, r1
 800640e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006416:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006418:	e06f      	b.n	80064fa <USB_HC_Halt+0x1f0>
          break;
 800641a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800641c:	e06d      	b.n	80064fa <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	440a      	add	r2, r1
 8006434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800643c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d143      	bne.n	80064d6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	440a      	add	r2, r1
 8006464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800646c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	440a      	add	r2, r1
 8006484:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800648c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ac:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	3301      	adds	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ba:	d81d      	bhi.n	80064f8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064d2:	d0ec      	beq.n	80064ae <USB_HC_Halt+0x1a4>
 80064d4:	e011      	b.n	80064fa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e000      	b.n	80064fa <USB_HC_Halt+0x1f0>
          break;
 80064f8:	bf00      	nop
    }
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800651c:	2301      	movs	r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	04da      	lsls	r2, r3, #19
 8006524:	4b15      	ldr	r3, [pc, #84]	; (800657c <USB_DoPing+0x74>)
 8006526:	4013      	ands	r3, r2
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	440a      	add	r2, r1
 8006530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006538:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006550:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006558:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	461a      	mov	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	1ff80000 	.word	0x1ff80000

08006580 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff f9e3 	bl	800595c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006596:	2110      	movs	r1, #16
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7ff fa1b 	bl	80059d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fa3e 	bl	8005a20 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	e01f      	b.n	80065ea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065de:	461a      	mov	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	3301      	adds	r3, #1
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b0f      	cmp	r3, #15
 80065ee:	d9dc      	bls.n	80065aa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	e034      	b.n	8006660 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800660c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006614:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800661c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	461a      	mov	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	3301      	adds	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800663c:	d80c      	bhi.n	8006658 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006654:	d0ec      	beq.n	8006630 <USB_StopHost+0xb0>
 8006656:	e000      	b.n	800665a <USB_StopHost+0xda>
        break;
 8006658:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3301      	adds	r3, #1
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d9c7      	bls.n	80065f6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666c:	461a      	mov	r2, r3
 800666e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006672:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800667a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff f95c 	bl	800593a <USB_EnableGlobalInt>

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b089      	sub	sp, #36	; 0x24
 8006690:	af04      	add	r7, sp, #16
 8006692:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006694:	2302      	movs	r3, #2
 8006696:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006698:	2301      	movs	r3, #1
 800669a:	2202      	movs	r2, #2
 800669c:	2102      	movs	r1, #2
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fc3a 	bl	8006f18 <USBH_FindInterface>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2bff      	cmp	r3, #255	; 0xff
 80066ac:	f000 812a 	beq.w	8006904 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fc13 	bl	8006ee0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80066c0:	2050      	movs	r0, #80	; 0x50
 80066c2:	f001 fb09 	bl	8007cd8 <malloc>
 80066c6:	4603      	mov	r3, r0
 80066c8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	211a      	movs	r1, #26
 80066da:	fb01 f303 	mul.w	r3, r1, r3
 80066de:	4413      	add	r3, r2
 80066e0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	b25b      	sxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da15      	bge.n	8006718 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	211a      	movs	r1, #26
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80066fc:	781a      	ldrb	r2, [r3, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	211a      	movs	r1, #26
 8006708:	fb01 f303 	mul.w	r3, r1, r3
 800670c:	4413      	add	r3, r2
 800670e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006712:	881a      	ldrh	r2, [r3, #0]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 ff9f 	bl	8007662 <USBH_AllocPipe>
 8006724:	4603      	mov	r3, r0
 8006726:	461a      	mov	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	7819      	ldrb	r1, [r3, #0]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	7858      	ldrb	r0, [r3, #1]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	8952      	ldrh	r2, [r2, #10]
 8006744:	9202      	str	r2, [sp, #8]
 8006746:	2203      	movs	r2, #3
 8006748:	9201      	str	r2, [sp, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	4623      	mov	r3, r4
 800674e:	4602      	mov	r2, r0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 ff57 	bl	8007604 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fa14 	bl	8007b8c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006764:	2300      	movs	r3, #0
 8006766:	2200      	movs	r2, #0
 8006768:	210a      	movs	r1, #10
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fbd4 	bl	8006f18 <USBH_FindInterface>
 8006770:	4603      	mov	r3, r0
 8006772:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	2bff      	cmp	r3, #255	; 0xff
 8006778:	f000 80c4 	beq.w	8006904 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	211a      	movs	r1, #26
 8006782:	fb01 f303 	mul.w	r3, r1, r3
 8006786:	4413      	add	r3, r2
 8006788:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	b25b      	sxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	da16      	bge.n	80067c2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	211a      	movs	r1, #26
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	211a      	movs	r1, #26
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80067ba:	881a      	ldrh	r2, [r3, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	835a      	strh	r2, [r3, #26]
 80067c0:	e015      	b.n	80067ee <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	211a      	movs	r1, #26
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	211a      	movs	r1, #26
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80067e8:	881a      	ldrh	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	211a      	movs	r1, #26
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	f203 3352 	addw	r3, r3, #850	; 0x352
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b25b      	sxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	da16      	bge.n	8006834 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	211a      	movs	r1, #26
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	4413      	add	r3, r2
 8006812:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	211a      	movs	r1, #26
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800682c:	881a      	ldrh	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	835a      	strh	r2, [r3, #26]
 8006832:	e015      	b.n	8006860 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	211a      	movs	r1, #26
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	211a      	movs	r1, #26
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	4413      	add	r3, r2
 8006856:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800685a:	881a      	ldrh	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	7b9b      	ldrb	r3, [r3, #14]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fefb 	bl	8007662 <USBH_AllocPipe>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	7bdb      	ldrb	r3, [r3, #15]
 8006878:	4619      	mov	r1, r3
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fef1 	bl	8007662 <USBH_AllocPipe>
 8006880:	4603      	mov	r3, r0
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	7b59      	ldrb	r1, [r3, #13]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	7b98      	ldrb	r0, [r3, #14]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	8b12      	ldrh	r2, [r2, #24]
 80068a0:	9202      	str	r2, [sp, #8]
 80068a2:	2202      	movs	r2, #2
 80068a4:	9201      	str	r2, [sp, #4]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	4623      	mov	r3, r4
 80068aa:	4602      	mov	r2, r0
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fea9 	bl	8007604 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	7b19      	ldrb	r1, [r3, #12]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	7bd8      	ldrb	r0, [r3, #15]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	8b52      	ldrh	r2, [r2, #26]
 80068ca:	9202      	str	r2, [sp, #8]
 80068cc:	2202      	movs	r2, #2
 80068ce:	9201      	str	r2, [sp, #4]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	4623      	mov	r3, r4
 80068d4:	4602      	mov	r2, r0
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fe94 	bl	8007604 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	7b5b      	ldrb	r3, [r3, #13]
 80068e8:	2200      	movs	r2, #0
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 f94d 	bl	8007b8c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	7b1b      	ldrb	r3, [r3, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 f946 	bl	8007b8c <USBH_LL_SetToggle>
      status = USBH_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bd90      	pop	{r4, r7, pc}

0800690e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00e      	beq.n	8006946 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fe87 	bl	8007642 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 feaf 	bl	800769e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	7b1b      	ldrb	r3, [r3, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00e      	beq.n	800696c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	7b1b      	ldrb	r3, [r3, #12]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fe74 	bl	8007642 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	7b1b      	ldrb	r3, [r3, #12]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fe9c 	bl	800769e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	7b5b      	ldrb	r3, [r3, #13]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00e      	beq.n	8006992 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	7b5b      	ldrb	r3, [r3, #13]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fe61 	bl	8007642 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	7b5b      	ldrb	r3, [r3, #13]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fe89 	bl	800769e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 f99e 	bl	8007ce8 <free>
    phost->pActiveClass->pData = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069b2:	2200      	movs	r2, #0
 80069b4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80069c8:	2302      	movs	r3, #2
 80069ca:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3340      	adds	r3, #64	; 0x40
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f8b2 	bl	8006b46 <GetLineCoding>
 80069e2:	4603      	mov	r3, r0
 80069e4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d105      	bne.n	80069f8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069f2:	2102      	movs	r1, #2
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
  }
  return status;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d877      	bhi.n	8006b18 <USBH_CDC_Process+0x114>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <USBH_CDC_Process+0x2c>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a45 	.word	0x08006a45
 8006a34:	08006a4b 	.word	0x08006a4b
 8006a38:	08006a7b 	.word	0x08006a7b
 8006a3c:	08006aef 	.word	0x08006aef
 8006a40:	08006afd 	.word	0x08006afd
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
    break;
 8006a48:	e06d      	b.n	8006b26 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f897 	bl	8006b84 <SetLineCoding>
 8006a56:	4603      	mov	r3, r0
 8006a58:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006a68:	e058      	b.n	8006b1c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d055      	beq.n	8006b1c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2204      	movs	r2, #4
 8006a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006a78:	e050      	b.n	8006b1c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	3340      	adds	r3, #64	; 0x40
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f860 	bl	8006b46 <GetLineCoding>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d126      	bne.n	8006ade <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa2:	791b      	ldrb	r3, [r3, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d13b      	bne.n	8006b20 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d133      	bne.n	8006b20 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d12b      	bne.n	8006b20 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d124      	bne.n	8006b20 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f95a 	bl	8006d90 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006adc:	e020      	b.n	8006b20 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d01d      	beq.n	8006b20 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006aec:	e018      	b.n	8006b20 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f867 	bl	8006bc2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f8dc 	bl	8006cb2 <CDC_ProcessReception>
    break;
 8006afa:	e014      	b.n	8006b26 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006afc:	2100      	movs	r1, #0
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fb08 	bl	8007114 <USBH_ClrFeature>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006b16:	e005      	b.n	8006b24 <USBH_CDC_Process+0x120>

  default:
    break;
 8006b18:	bf00      	nop
 8006b1a:	e004      	b.n	8006b26 <USBH_CDC_Process+0x122>
    break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <USBH_CDC_Process+0x122>
    break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <USBH_CDC_Process+0x122>
    break;
 8006b24:	bf00      	nop

  }

  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	22a1      	movs	r2, #161	; 0xa1
 8006b54:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2221      	movs	r2, #33	; 0x21
 8006b5a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2207      	movs	r2, #7
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 faf1 	bl	800715c <USBH_CtlReq>
 8006b7a:	4603      	mov	r3, r0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2221      	movs	r2, #33	; 0x21
 8006b92:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2207      	movs	r2, #7
 8006baa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2207      	movs	r2, #7
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fad2 	bl	800715c <USBH_CtlReq>
 8006bb8:	4603      	mov	r3, r0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b086      	sub	sp, #24
 8006bc6:	af02      	add	r7, sp, #8
 8006bc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d002      	beq.n	8006be8 <CDC_ProcessTransmission+0x26>
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d025      	beq.n	8006c32 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006be6:	e060      	b.n	8006caa <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	8b12      	ldrh	r2, [r2, #24]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d90c      	bls.n	8006c0e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	69d9      	ldr	r1, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8b1a      	ldrh	r2, [r3, #24]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	7b58      	ldrb	r0, [r3, #13]
 8006c00:	2301      	movs	r3, #1
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4603      	mov	r3, r0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fcb9 	bl	800757e <USBH_BulkSendData>
 8006c0c:	e00c      	b.n	8006c28 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	7b58      	ldrb	r0, [r3, #13]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	4603      	mov	r3, r0
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fcab 	bl	800757e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006c30:	e03b      	b.n	8006caa <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	7b5b      	ldrb	r3, [r3, #13]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ff7d 	bl	8007b38 <USBH_LL_GetURBState>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006c42:	7afb      	ldrb	r3, [r7, #11]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d128      	bne.n	8006c9a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	8b12      	ldrh	r2, [r2, #24]
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d90e      	bls.n	8006c72 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	8b12      	ldrh	r2, [r2, #24]
 8006c5c:	1a9a      	subs	r2, r3, r2
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	8b12      	ldrh	r2, [r2, #24]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	61da      	str	r2, [r3, #28]
 8006c70:	e002      	b.n	8006c78 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006c88:	e00e      	b.n	8006ca8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f868 	bl	8006d68 <USBH_CDC_TransmitCallback>
    break;
 8006c98:	e006      	b.n	8006ca8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006c9a:	7afb      	ldrb	r3, [r7, #11]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d103      	bne.n	8006ca8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006ca8:	bf00      	nop
  }
}
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d002      	beq.n	8006cd8 <CDC_ProcessReception+0x26>
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d00e      	beq.n	8006cf4 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006cd6:	e043      	b.n	8006d60 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	6a19      	ldr	r1, [r3, #32]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	8b5a      	ldrh	r2, [r3, #26]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	7b1b      	ldrb	r3, [r3, #12]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fc6f 	bl	80075c8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2204      	movs	r2, #4
 8006cee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006cf2:	e035      	b.n	8006d60 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	7b1b      	ldrb	r3, [r3, #12]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 ff1c 	bl	8007b38 <USBH_LL_GetURBState>
 8006d00:	4603      	mov	r3, r0
 8006d02:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006d04:	7cfb      	ldrb	r3, [r7, #19]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d129      	bne.n	8006d5e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	7b1b      	ldrb	r3, [r3, #12]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fe7f 	bl	8007a14 <USBH_LL_GetLastXferSize>
 8006d16:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d016      	beq.n	8006d50 <CDC_ProcessReception+0x9e>
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	8b5b      	ldrh	r3, [r3, #26]
 8006d26:	461a      	mov	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d910      	bls.n	8006d50 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	1ad2      	subs	r2, r2, r3
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	441a      	add	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006d4e:	e006      	b.n	8006d5e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f80f 	bl	8006d7c <USBH_CDC_ReceiveCallback>
    break;
 8006d5e:	bf00      	nop
  }
}
 8006d60:	bf00      	nop
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]

}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]

}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006db8:	2302      	movs	r3, #2
 8006dba:	e019      	b.n	8006df0 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	79fa      	ldrb	r2, [r7, #7]
 8006dc0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f80f 	bl	8006df8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fda1 	bl	8007930 <USBH_LL_Init>

  return USBH_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006e04:	e008      	b.n	8006e18 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	32e0      	adds	r2, #224	; 0xe0
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	3301      	adds	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b0e      	cmp	r3, #14
 8006e1c:	d9f3      	bls.n	8006e06 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	e009      	b.n	8006e38 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3e:	d3f1      	bcc.n	8006e24 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2240      	movs	r2, #64	; 0x40
 8006e64:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d017      	beq.n	8006ece <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10f      	bne.n	8006ec8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	33dc      	adds	r3, #220	; 0xdc
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e004      	b.n	8006ed2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e001      	b.n	8006ed2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d204      	bcs.n	8006f06 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006f04:	e001      	b.n	8006f0a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f06:	2302      	movs	r3, #2
 8006f08:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	4608      	mov	r0, r1
 8006f22:	4611      	mov	r1, r2
 8006f24:	461a      	mov	r2, r3
 8006f26:	4603      	mov	r3, r0
 8006f28:	70fb      	strb	r3, [r7, #3]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70bb      	strb	r3, [r7, #2]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006f40:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f42:	e025      	b.n	8006f90 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	221a      	movs	r2, #26
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	3302      	adds	r3, #2
 8006f54:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	795b      	ldrb	r3, [r3, #5]
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <USBH_FindInterface+0x4e>
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	2bff      	cmp	r3, #255	; 0xff
 8006f64:	d111      	bne.n	8006f8a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006f6a:	78ba      	ldrb	r2, [r7, #2]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006f70:	78bb      	ldrb	r3, [r7, #2]
 8006f72:	2bff      	cmp	r3, #255	; 0xff
 8006f74:	d109      	bne.n	8006f8a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006f7a:	787a      	ldrb	r2, [r7, #1]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d002      	beq.n	8006f86 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f80:	787b      	ldrb	r3, [r7, #1]
 8006f82:	2bff      	cmp	r3, #255	; 0xff
 8006f84:	d101      	bne.n	8006f8a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	e006      	b.n	8006f98 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d9d6      	bls.n	8006f44 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f96:	23ff      	movs	r3, #255	; 0xff
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fcfb 	bl	80079a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fdd2 	bl	8007b5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f804 	bl	8007006 <USBH_HandleSof>
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b0b      	cmp	r3, #11
 8007016:	d10a      	bne.n	800702e <USBH_HandleSof+0x28>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
  }
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007046:	bf00      	nop
}
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007062:	bf00      	nop
}
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10f      	bne.n	80070a0 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00e      	beq.n	80070b0 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007098:	2104      	movs	r1, #4
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
 800709e:	e007      	b.n	80070b0 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d102      	bne.n	80070b0 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc8b 	bl	80079de <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	791b      	ldrb	r3, [r3, #4]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fae5 	bl	800769e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	795b      	ldrb	r3, [r3, #5]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fadf 	bl	800769e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070f8:	2105      	movs	r1, #5
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fc52 	bl	80079a8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2203      	movs	r2, #3
 8007108:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	789b      	ldrb	r3, [r3, #2]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d10f      	bne.n	8007148 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007148:	2200      	movs	r2, #0
 800714a:	2100      	movs	r1, #0
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f805 	bl	800715c <USBH_CtlReq>
 8007152:	4603      	mov	r3, r0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800716a:	2301      	movs	r3, #1
 800716c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	789b      	ldrb	r3, [r3, #2]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d002      	beq.n	800717c <USBH_CtlReq+0x20>
 8007176:	2b02      	cmp	r3, #2
 8007178:	d00f      	beq.n	800719a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800717a:	e034      	b.n	80071e6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	88fa      	ldrh	r2, [r7, #6]
 8007186:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2202      	movs	r2, #2
 8007192:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007194:	2301      	movs	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
    break;
 8007198:	e025      	b.n	80071e6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f828 	bl	80071f0 <USBH_HandleControl>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d108      	bne.n	80071bc <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
    break;
 80071ba:	e013      	b.n	80071e4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d108      	bne.n	80071d4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80071ce:	2303      	movs	r3, #3
 80071d0:	75fb      	strb	r3, [r7, #23]
    break;
 80071d2:	e007      	b.n	80071e4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d104      	bne.n	80071e4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80071e0:	2302      	movs	r3, #2
 80071e2:	75fb      	strb	r3, [r7, #23]
    break;
 80071e4:	bf00      	nop
  }
  return status;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7e1b      	ldrb	r3, [r3, #24]
 8007204:	3b01      	subs	r3, #1
 8007206:	2b0a      	cmp	r3, #10
 8007208:	f200 814c 	bhi.w	80074a4 <USBH_HandleControl+0x2b4>
 800720c:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <USBH_HandleControl+0x24>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	08007241 	.word	0x08007241
 8007218:	0800725b 	.word	0x0800725b
 800721c:	080072c5 	.word	0x080072c5
 8007220:	080072eb 	.word	0x080072eb
 8007224:	08007323 	.word	0x08007323
 8007228:	0800734f 	.word	0x0800734f
 800722c:	080073a1 	.word	0x080073a1
 8007230:	080073c3 	.word	0x080073c3
 8007234:	080073ff 	.word	0x080073ff
 8007238:	08007427 	.word	0x08007427
 800723c:	08007465 	.word	0x08007465
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 0110 	add.w	r1, r3, #16
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	795b      	ldrb	r3, [r3, #5]
 800724a:	461a      	mov	r2, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f939 	bl	80074c4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	761a      	strb	r2, [r3, #24]
    break;
 8007258:	e12f      	b.n	80074ba <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	795b      	ldrb	r3, [r3, #5]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc69 	bl	8007b38 <USBH_LL_GetURBState>
 8007266:	4603      	mov	r3, r0
 8007268:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d11e      	bne.n	80072ae <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7c1b      	ldrb	r3, [r3, #16]
 8007274:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007278:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8adb      	ldrh	r3, [r3, #22]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007282:	7b7b      	ldrb	r3, [r7, #13]
 8007284:	2b80      	cmp	r3, #128	; 0x80
 8007286:	d103      	bne.n	8007290 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2203      	movs	r2, #3
 800728c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800728e:	e10b      	b.n	80074a8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2205      	movs	r2, #5
 8007294:	761a      	strb	r2, [r3, #24]
    break;
 8007296:	e107      	b.n	80074a8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007298:	7b7b      	ldrb	r3, [r7, #13]
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d103      	bne.n	80072a6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2209      	movs	r2, #9
 80072a2:	761a      	strb	r2, [r3, #24]
    break;
 80072a4:	e100      	b.n	80074a8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2207      	movs	r2, #7
 80072aa:	761a      	strb	r2, [r3, #24]
    break;
 80072ac:	e0fc      	b.n	80074a8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d003      	beq.n	80072bc <USBH_HandleControl+0xcc>
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	f040 80f6 	bne.w	80074a8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	220b      	movs	r2, #11
 80072c0:	761a      	strb	r2, [r3, #24]
    break;
 80072c2:	e0f1      	b.n	80074a8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6899      	ldr	r1, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	899a      	ldrh	r2, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	791b      	ldrb	r3, [r3, #4]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f930 	bl	8007542 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2204      	movs	r2, #4
 80072e6:	761a      	strb	r2, [r3, #24]
    break;
 80072e8:	e0e7      	b.n	80074ba <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	791b      	ldrb	r3, [r3, #4]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc21 	bl	8007b38 <USBH_LL_GetURBState>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d102      	bne.n	8007306 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2209      	movs	r2, #9
 8007304:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	2b05      	cmp	r3, #5
 800730a:	d102      	bne.n	8007312 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800730c:	2303      	movs	r3, #3
 800730e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007310:	e0cc      	b.n	80074ac <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b04      	cmp	r3, #4
 8007316:	f040 80c9 	bne.w	80074ac <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	220b      	movs	r2, #11
 800731e:	761a      	strb	r2, [r3, #24]
    break;
 8007320:	e0c4      	b.n	80074ac <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6899      	ldr	r1, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	899a      	ldrh	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7958      	ldrb	r0, [r3, #5]
 800732e:	2301      	movs	r3, #1
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4603      	mov	r3, r0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f8df 	bl	80074f8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2206      	movs	r2, #6
 800734a:	761a      	strb	r2, [r3, #24]
    break;
 800734c:	e0b5      	b.n	80074ba <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	795b      	ldrb	r3, [r3, #5]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fbef 	bl	8007b38 <USBH_LL_GetURBState>
 800735a:	4603      	mov	r3, r0
 800735c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d103      	bne.n	800736c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2207      	movs	r2, #7
 8007368:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800736a:	e0a1      	b.n	80074b0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b05      	cmp	r3, #5
 8007370:	d105      	bne.n	800737e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	220c      	movs	r2, #12
 8007376:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007378:	2303      	movs	r3, #3
 800737a:	73fb      	strb	r3, [r7, #15]
    break;
 800737c:	e098      	b.n	80074b0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d103      	bne.n	800738c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2205      	movs	r2, #5
 8007388:	761a      	strb	r2, [r3, #24]
    break;
 800738a:	e091      	b.n	80074b0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b04      	cmp	r3, #4
 8007390:	f040 808e 	bne.w	80074b0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	220b      	movs	r2, #11
 8007398:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800739a:	2302      	movs	r3, #2
 800739c:	73fb      	strb	r3, [r7, #15]
    break;
 800739e:	e087      	b.n	80074b0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	791b      	ldrb	r3, [r3, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	2100      	movs	r1, #0
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8ca 	bl	8007542 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2208      	movs	r2, #8
 80073be:	761a      	strb	r2, [r3, #24]

    break;
 80073c0:	e07b      	b.n	80074ba <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	791b      	ldrb	r3, [r3, #4]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fbb5 	bl	8007b38 <USBH_LL_GetURBState>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d105      	bne.n	80073e4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	220d      	movs	r2, #13
 80073dc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80073e2:	e067      	b.n	80074b4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d103      	bne.n	80073f2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	220b      	movs	r2, #11
 80073ee:	761a      	strb	r2, [r3, #24]
    break;
 80073f0:	e060      	b.n	80074b4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	d15d      	bne.n	80074b4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80073f8:	2303      	movs	r3, #3
 80073fa:	73fb      	strb	r3, [r7, #15]
    break;
 80073fc:	e05a      	b.n	80074b4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	795a      	ldrb	r2, [r3, #5]
 8007402:	2301      	movs	r3, #1
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	4613      	mov	r3, r2
 8007408:	2200      	movs	r2, #0
 800740a:	2100      	movs	r1, #0
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f873 	bl	80074f8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007418:	b29a      	uxth	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	220a      	movs	r2, #10
 8007422:	761a      	strb	r2, [r3, #24]
    break;
 8007424:	e049      	b.n	80074ba <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	795b      	ldrb	r3, [r3, #5]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fb83 	bl	8007b38 <USBH_LL_GetURBState>
 8007432:	4603      	mov	r3, r0
 8007434:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d105      	bne.n	8007448 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	220d      	movs	r2, #13
 8007444:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007446:	e037      	b.n	80074b8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d103      	bne.n	8007456 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2209      	movs	r2, #9
 8007452:	761a      	strb	r2, [r3, #24]
    break;
 8007454:	e030      	b.n	80074b8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d12d      	bne.n	80074b8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	220b      	movs	r2, #11
 8007460:	761a      	strb	r2, [r3, #24]
    break;
 8007462:	e029      	b.n	80074b8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	7e5b      	ldrb	r3, [r3, #25]
 8007468:	3301      	adds	r3, #1
 800746a:	b2da      	uxtb	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	765a      	strb	r2, [r3, #25]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7e5b      	ldrb	r3, [r3, #25]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d809      	bhi.n	800748c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fab0 	bl	80079de <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800748a:	e016      	b.n	80074ba <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007492:	2106      	movs	r1, #6
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800749e:	2302      	movs	r3, #2
 80074a0:	73fb      	strb	r3, [r7, #15]
    break;
 80074a2:	e00a      	b.n	80074ba <USBH_HandleControl+0x2ca>

  default:
    break;
 80074a4:	bf00      	nop
 80074a6:	e008      	b.n	80074ba <USBH_HandleControl+0x2ca>
    break;
 80074a8:	bf00      	nop
 80074aa:	e006      	b.n	80074ba <USBH_HandleControl+0x2ca>
    break;
 80074ac:	bf00      	nop
 80074ae:	e004      	b.n	80074ba <USBH_HandleControl+0x2ca>
    break;
 80074b0:	bf00      	nop
 80074b2:	e002      	b.n	80074ba <USBH_HandleControl+0x2ca>
    break;
 80074b4:	bf00      	nop
 80074b6:	e000      	b.n	80074ba <USBH_HandleControl+0x2ca>
    break;
 80074b8:	bf00      	nop
  }
  return status;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af04      	add	r7, sp, #16
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80074d2:	79f9      	ldrb	r1, [r7, #7]
 80074d4:	2300      	movs	r3, #0
 80074d6:	9303      	str	r3, [sp, #12]
 80074d8:	2308      	movs	r3, #8
 80074da:	9302      	str	r3, [sp, #8]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	2300      	movs	r3, #0
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	2200      	movs	r2, #0
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 faf4 	bl	8007ad6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af04      	add	r7, sp, #16
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	4611      	mov	r1, r2
 8007504:	461a      	mov	r2, r3
 8007506:	460b      	mov	r3, r1
 8007508:	80fb      	strh	r3, [r7, #6]
 800750a:	4613      	mov	r3, r2
 800750c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800751c:	7979      	ldrb	r1, [r7, #5]
 800751e:	7e3b      	ldrb	r3, [r7, #24]
 8007520:	9303      	str	r3, [sp, #12]
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	9302      	str	r3, [sp, #8]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	2301      	movs	r3, #1
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	2300      	movs	r3, #0
 8007530:	2200      	movs	r2, #0
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 facf 	bl	8007ad6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b088      	sub	sp, #32
 8007546:	af04      	add	r7, sp, #16
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	4611      	mov	r1, r2
 800754e:	461a      	mov	r2, r3
 8007550:	460b      	mov	r3, r1
 8007552:	80fb      	strh	r3, [r7, #6]
 8007554:	4613      	mov	r3, r2
 8007556:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007558:	7979      	ldrb	r1, [r7, #5]
 800755a:	2300      	movs	r3, #0
 800755c:	9303      	str	r3, [sp, #12]
 800755e:	88fb      	ldrh	r3, [r7, #6]
 8007560:	9302      	str	r3, [sp, #8]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	2301      	movs	r3, #1
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	2300      	movs	r3, #0
 800756c:	2201      	movs	r2, #1
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fab1 	bl	8007ad6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007574:	2300      	movs	r3, #0

}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b088      	sub	sp, #32
 8007582:	af04      	add	r7, sp, #16
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	4611      	mov	r1, r2
 800758a:	461a      	mov	r2, r3
 800758c:	460b      	mov	r3, r1
 800758e:	80fb      	strh	r3, [r7, #6]
 8007590:	4613      	mov	r3, r2
 8007592:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80075a2:	7979      	ldrb	r1, [r7, #5]
 80075a4:	7e3b      	ldrb	r3, [r7, #24]
 80075a6:	9303      	str	r3, [sp, #12]
 80075a8:	88fb      	ldrh	r3, [r7, #6]
 80075aa:	9302      	str	r3, [sp, #8]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	2301      	movs	r3, #1
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	2302      	movs	r3, #2
 80075b6:	2200      	movs	r2, #0
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fa8c 	bl	8007ad6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af04      	add	r7, sp, #16
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	4611      	mov	r1, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	460b      	mov	r3, r1
 80075d8:	80fb      	strh	r3, [r7, #6]
 80075da:	4613      	mov	r3, r2
 80075dc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80075de:	7979      	ldrb	r1, [r7, #5]
 80075e0:	2300      	movs	r3, #0
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	9302      	str	r3, [sp, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	2301      	movs	r3, #1
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	2302      	movs	r3, #2
 80075f2:	2201      	movs	r2, #1
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fa6e 	bl	8007ad6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af04      	add	r7, sp, #16
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4603      	mov	r3, r0
 8007614:	70fb      	strb	r3, [r7, #3]
 8007616:	460b      	mov	r3, r1
 8007618:	70bb      	strb	r3, [r7, #2]
 800761a:	4613      	mov	r3, r2
 800761c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800761e:	7878      	ldrb	r0, [r7, #1]
 8007620:	78ba      	ldrb	r2, [r7, #2]
 8007622:	78f9      	ldrb	r1, [r7, #3]
 8007624:	8b3b      	ldrh	r3, [r7, #24]
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	7d3b      	ldrb	r3, [r7, #20]
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	7c3b      	ldrb	r3, [r7, #16]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa01 	bl	8007a3a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007638:	2300      	movs	r3, #0

}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa20 	bl	8007a98 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007658:	2300      	movs	r3, #0

}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f831 	bl	80076d6 <USBH_GetFreePipe>
 8007674:	4603      	mov	r3, r0
 8007676:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007678:	89fb      	ldrh	r3, [r7, #14]
 800767a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800767e:	4293      	cmp	r3, r2
 8007680:	d007      	beq.n	8007692 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	89fa      	ldrh	r2, [r7, #14]
 8007686:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32e0      	adds	r2, #224	; 0xe0
 800768e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	b2db      	uxtb	r3, r3
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80076aa:	78fb      	ldrb	r3, [r7, #3]
 80076ac:	2b0a      	cmp	r3, #10
 80076ae:	d80b      	bhi.n	80076c8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	32e0      	adds	r2, #224	; 0xe0
 80076b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	32e0      	adds	r2, #224	; 0xe0
 80076c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
 80076e6:	e00e      	b.n	8007706 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80076e8:	7bfa      	ldrb	r2, [r7, #15]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32e0      	adds	r2, #224	; 0xe0
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	e007      	b.n	8007710 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	3301      	adds	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b0a      	cmp	r3, #10
 800770a:	d9ed      	bls.n	80076e8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800770c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007720:	2201      	movs	r2, #1
 8007722:	490e      	ldr	r1, [pc, #56]	; (800775c <MX_USB_HOST_Init+0x40>)
 8007724:	480e      	ldr	r0, [pc, #56]	; (8007760 <MX_USB_HOST_Init+0x44>)
 8007726:	f7ff fb3d 	bl	8006da4 <USBH_Init>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007730:	f7f9 f9ca 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007734:	490b      	ldr	r1, [pc, #44]	; (8007764 <MX_USB_HOST_Init+0x48>)
 8007736:	480a      	ldr	r0, [pc, #40]	; (8007760 <MX_USB_HOST_Init+0x44>)
 8007738:	f7ff fba7 	bl	8006e8a <USBH_RegisterClass>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007742:	f7f9 f9c1 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007746:	4806      	ldr	r0, [pc, #24]	; (8007760 <MX_USB_HOST_Init+0x44>)
 8007748:	f7ff fc2c 	bl	8006fa4 <USBH_Start>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007752:	f7f9 f9b9 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	08007769 	.word	0x08007769
 8007760:	20000280 	.word	0x20000280
 8007764:	2000000c 	.word	0x2000000c

08007768 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	3b01      	subs	r3, #1
 8007778:	2b04      	cmp	r3, #4
 800777a:	d819      	bhi.n	80077b0 <USBH_UserProcess+0x48>
 800777c:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <USBH_UserProcess+0x1c>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	080077b1 	.word	0x080077b1
 8007788:	080077a1 	.word	0x080077a1
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077a9 	.word	0x080077a9
 8007794:	08007799 	.word	0x08007799
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <USBH_UserProcess+0x58>)
 800779a:	2203      	movs	r2, #3
 800779c:	701a      	strb	r2, [r3, #0]
  break;
 800779e:	e008      	b.n	80077b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <USBH_UserProcess+0x58>)
 80077a2:	2202      	movs	r2, #2
 80077a4:	701a      	strb	r2, [r3, #0]
  break;
 80077a6:	e004      	b.n	80077b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <USBH_UserProcess+0x58>)
 80077aa:	2201      	movs	r2, #1
 80077ac:	701a      	strb	r2, [r3, #0]
  break;
 80077ae:	e000      	b.n	80077b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80077b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	200000b4 	.word	0x200000b4

080077c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077cc:	f107 0314 	add.w	r3, r7, #20
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	605a      	str	r2, [r3, #4]
 80077d6:	609a      	str	r2, [r3, #8]
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077e4:	d147      	bne.n	8007876 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077e6:	2300      	movs	r3, #0
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	4b25      	ldr	r3, [pc, #148]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	4a24      	ldr	r2, [pc, #144]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	6313      	str	r3, [r2, #48]	; 0x30
 80077f6:	4b22      	ldr	r3, [pc, #136]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007810:	f107 0314 	add.w	r3, r7, #20
 8007814:	4619      	mov	r1, r3
 8007816:	481b      	ldr	r0, [pc, #108]	; (8007884 <HAL_HCD_MspInit+0xc0>)
 8007818:	f7f9 fdf2 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800781c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007822:	2302      	movs	r3, #2
 8007824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007826:	2300      	movs	r3, #0
 8007828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800782a:	2303      	movs	r3, #3
 800782c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800782e:	230a      	movs	r3, #10
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007832:	f107 0314 	add.w	r3, r7, #20
 8007836:	4619      	mov	r1, r3
 8007838:	4812      	ldr	r0, [pc, #72]	; (8007884 <HAL_HCD_MspInit+0xc0>)
 800783a:	f7f9 fde1 	bl	8001400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800783e:	4b10      	ldr	r3, [pc, #64]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 8007840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007842:	4a0f      	ldr	r2, [pc, #60]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 8007844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007848:	6353      	str	r3, [r2, #52]	; 0x34
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 8007850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007852:	4a0b      	ldr	r2, [pc, #44]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 8007854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007858:	6453      	str	r3, [r2, #68]	; 0x44
 800785a:	4b09      	ldr	r3, [pc, #36]	; (8007880 <HAL_HCD_MspInit+0xbc>)
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	2043      	movs	r0, #67	; 0x43
 800786c:	f7f9 fd91 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007870:	2043      	movs	r0, #67	; 0x43
 8007872:	f7f9 fdaa 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007876:	bf00      	nop
 8007878:	3728      	adds	r7, #40	; 0x28
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	40023800 	.word	0x40023800
 8007884:	40020000 	.word	0x40020000

08007888 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff fba3 	bl	8006fe2 <USBH_LL_IncTimer>
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fbdb 	bl	800706e <USBH_LL_Connect>
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff fbf3 	bl	80070ba <USBH_LL_Disconnect>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
 80078e8:	4613      	mov	r3, r2
 80078ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff fb95 	bl	8007036 <USBH_LL_PortEnabled>
} 
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff fb95 	bl	8007052 <USBH_LL_PortDisabled>
} 
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800793e:	2b01      	cmp	r3, #1
 8007940:	d12a      	bne.n	8007998 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007942:	4a18      	ldr	r2, [pc, #96]	; (80079a4 <USBH_LL_Init+0x74>)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <USBH_LL_Init+0x74>)
 800794e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007952:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <USBH_LL_Init+0x74>)
 8007954:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007958:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <USBH_LL_Init+0x74>)
 800795c:	2208      	movs	r2, #8
 800795e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <USBH_LL_Init+0x74>)
 8007962:	2201      	movs	r2, #1
 8007964:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007966:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <USBH_LL_Init+0x74>)
 8007968:	2200      	movs	r2, #0
 800796a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800796c:	4b0d      	ldr	r3, [pc, #52]	; (80079a4 <USBH_LL_Init+0x74>)
 800796e:	2202      	movs	r2, #2
 8007970:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <USBH_LL_Init+0x74>)
 8007974:	2200      	movs	r2, #0
 8007976:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007978:	480a      	ldr	r0, [pc, #40]	; (80079a4 <USBH_LL_Init+0x74>)
 800797a:	f7f9 fedc 	bl	8001736 <HAL_HCD_Init>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007984:	f7f9 f8a0 	bl	8000ac8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007988:	4806      	ldr	r0, [pc, #24]	; (80079a4 <USBH_LL_Init+0x74>)
 800798a:	f7fa fac9 	bl	8001f20 <HAL_HCD_GetCurrentFrame>
 800798e:	4603      	mov	r3, r0
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff fb16 	bl	8006fc4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	2000064c 	.word	0x2000064c

080079a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fa fa44 	bl	8001e4c <HAL_HCD_Start>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f912 	bl	8007bf4 <USBH_Get_USB_Status>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fa fa4c 	bl	8001e92 <HAL_HCD_Stop>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f8f7 	bl	8007bf4 <USBH_Get_USB_Status>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a26:	78fa      	ldrb	r2, [r7, #3]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fa fa63 	bl	8001ef6 <HAL_HCD_HC_GetXferCount>
 8007a30:	4603      	mov	r3, r0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a3a:	b590      	push	{r4, r7, lr}
 8007a3c:	b089      	sub	sp, #36	; 0x24
 8007a3e:	af04      	add	r7, sp, #16
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	4608      	mov	r0, r1
 8007a44:	4611      	mov	r1, r2
 8007a46:	461a      	mov	r2, r3
 8007a48:	4603      	mov	r3, r0
 8007a4a:	70fb      	strb	r3, [r7, #3]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70bb      	strb	r3, [r7, #2]
 8007a50:	4613      	mov	r3, r2
 8007a52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007a62:	787c      	ldrb	r4, [r7, #1]
 8007a64:	78ba      	ldrb	r2, [r7, #2]
 8007a66:	78f9      	ldrb	r1, [r7, #3]
 8007a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a6a:	9302      	str	r3, [sp, #8]
 8007a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4623      	mov	r3, r4
 8007a7a:	f7f9 febe 	bl	80017fa <HAL_HCD_HC_Init>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f8b5 	bl	8007bf4 <USBH_Get_USB_Status>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd90      	pop	{r4, r7, pc}

08007a98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7f9 ff37 	bl	800192a <HAL_HCD_HC_Halt>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f896 	bl	8007bf4 <USBH_Get_USB_Status>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007ad6:	b590      	push	{r4, r7, lr}
 8007ad8:	b089      	sub	sp, #36	; 0x24
 8007ada:	af04      	add	r7, sp, #16
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	70fb      	strb	r3, [r7, #3]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70bb      	strb	r3, [r7, #2]
 8007aec:	4613      	mov	r3, r2
 8007aee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8007afe:	787c      	ldrb	r4, [r7, #1]
 8007b00:	78ba      	ldrb	r2, [r7, #2]
 8007b02:	78f9      	ldrb	r1, [r7, #3]
 8007b04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b08:	9303      	str	r3, [sp, #12]
 8007b0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b0c:	9302      	str	r3, [sp, #8]
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4623      	mov	r3, r4
 8007b1a:	f7f9 ff29 	bl	8001970 <HAL_HCD_HC_SubmitRequest>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f865 	bl	8007bf4 <USBH_Get_USB_Status>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd90      	pop	{r4, r7, pc}

08007b38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fa f9bc 	bl	8001ecc <HAL_HCD_HC_GetURBState>
 8007b54:	4603      	mov	r3, r0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d103      	bne.n	8007b7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007b74:	78fb      	ldrb	r3, [r7, #3]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f868 	bl	8007c4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007b7c:	20c8      	movs	r0, #200	; 0xc8
 8007b7e:	f7f9 fb0b 	bl	8001198 <HAL_Delay>
  return USBH_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ba2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4413      	add	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	440b      	add	r3, r1
 8007bb2:	333b      	adds	r3, #59	; 0x3b
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	68f9      	ldr	r1, [r7, #12]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3350      	adds	r3, #80	; 0x50
 8007bca:	78ba      	ldrb	r2, [r7, #2]
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e009      	b.n	8007be4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	440b      	add	r3, r1
 8007bde:	3351      	adds	r3, #81	; 0x51
 8007be0:	78ba      	ldrb	r2, [r7, #2]
 8007be2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d817      	bhi.n	8007c38 <USBH_Get_USB_Status+0x44>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <USBH_Get_USB_Status+0x1c>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c21 	.word	0x08007c21
 8007c14:	08007c27 	.word	0x08007c27
 8007c18:	08007c2d 	.word	0x08007c2d
 8007c1c:	08007c33 	.word	0x08007c33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]
    break;
 8007c24:	e00b      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2a:	e008      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c30:	e005      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c32:	2302      	movs	r3, #2
 8007c34:	73fb      	strb	r3, [r7, #15]
    break;
 8007c36:	e002      	b.n	8007c3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3c:	bf00      	nop
  }
  return usb_status;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8007c60:	2301      	movs	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
 8007c64:	e001      	b.n	8007c6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	2101      	movs	r1, #1
 8007c70:	4803      	ldr	r0, [pc, #12]	; (8007c80 <MX_DriverVbusFS+0x34>)
 8007c72:	f7f9 fd47 	bl	8001704 <HAL_GPIO_WritePin>
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	40020800 	.word	0x40020800

08007c84 <__errno>:
 8007c84:	4b01      	ldr	r3, [pc, #4]	; (8007c8c <__errno+0x8>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	2000002c 	.word	0x2000002c

08007c90 <__libc_init_array>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4e0d      	ldr	r6, [pc, #52]	; (8007cc8 <__libc_init_array+0x38>)
 8007c94:	4c0d      	ldr	r4, [pc, #52]	; (8007ccc <__libc_init_array+0x3c>)
 8007c96:	1ba4      	subs	r4, r4, r6
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	2500      	movs	r5, #0
 8007c9c:	42a5      	cmp	r5, r4
 8007c9e:	d109      	bne.n	8007cb4 <__libc_init_array+0x24>
 8007ca0:	4e0b      	ldr	r6, [pc, #44]	; (8007cd0 <__libc_init_array+0x40>)
 8007ca2:	4c0c      	ldr	r4, [pc, #48]	; (8007cd4 <__libc_init_array+0x44>)
 8007ca4:	f000 f8ea 	bl	8007e7c <_init>
 8007ca8:	1ba4      	subs	r4, r4, r6
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	2500      	movs	r5, #0
 8007cae:	42a5      	cmp	r5, r4
 8007cb0:	d105      	bne.n	8007cbe <__libc_init_array+0x2e>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cb8:	4798      	blx	r3
 8007cba:	3501      	adds	r5, #1
 8007cbc:	e7ee      	b.n	8007c9c <__libc_init_array+0xc>
 8007cbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cc2:	4798      	blx	r3
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	e7f2      	b.n	8007cae <__libc_init_array+0x1e>
 8007cc8:	08007ec8 	.word	0x08007ec8
 8007ccc:	08007ec8 	.word	0x08007ec8
 8007cd0:	08007ec8 	.word	0x08007ec8
 8007cd4:	08007ecc 	.word	0x08007ecc

08007cd8 <malloc>:
 8007cd8:	4b02      	ldr	r3, [pc, #8]	; (8007ce4 <malloc+0xc>)
 8007cda:	4601      	mov	r1, r0
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	f000 b861 	b.w	8007da4 <_malloc_r>
 8007ce2:	bf00      	nop
 8007ce4:	2000002c 	.word	0x2000002c

08007ce8 <free>:
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <free+0xc>)
 8007cea:	4601      	mov	r1, r0
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	f000 b80b 	b.w	8007d08 <_free_r>
 8007cf2:	bf00      	nop
 8007cf4:	2000002c 	.word	0x2000002c

08007cf8 <memset>:
 8007cf8:	4402      	add	r2, r0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d100      	bne.n	8007d02 <memset+0xa>
 8007d00:	4770      	bx	lr
 8007d02:	f803 1b01 	strb.w	r1, [r3], #1
 8007d06:	e7f9      	b.n	8007cfc <memset+0x4>

08007d08 <_free_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d045      	beq.n	8007d9c <_free_r+0x94>
 8007d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d14:	1f0c      	subs	r4, r1, #4
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	bfb8      	it	lt
 8007d1a:	18e4      	addlt	r4, r4, r3
 8007d1c:	f000 f8ac 	bl	8007e78 <__malloc_lock>
 8007d20:	4a1f      	ldr	r2, [pc, #124]	; (8007da0 <_free_r+0x98>)
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	4610      	mov	r0, r2
 8007d26:	b933      	cbnz	r3, 8007d36 <_free_r+0x2e>
 8007d28:	6063      	str	r3, [r4, #4]
 8007d2a:	6014      	str	r4, [r2, #0]
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d32:	f000 b8a2 	b.w	8007e7a <__malloc_unlock>
 8007d36:	42a3      	cmp	r3, r4
 8007d38:	d90c      	bls.n	8007d54 <_free_r+0x4c>
 8007d3a:	6821      	ldr	r1, [r4, #0]
 8007d3c:	1862      	adds	r2, r4, r1
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf04      	itt	eq
 8007d42:	681a      	ldreq	r2, [r3, #0]
 8007d44:	685b      	ldreq	r3, [r3, #4]
 8007d46:	6063      	str	r3, [r4, #4]
 8007d48:	bf04      	itt	eq
 8007d4a:	1852      	addeq	r2, r2, r1
 8007d4c:	6022      	streq	r2, [r4, #0]
 8007d4e:	6004      	str	r4, [r0, #0]
 8007d50:	e7ec      	b.n	8007d2c <_free_r+0x24>
 8007d52:	4613      	mov	r3, r2
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	b10a      	cbz	r2, 8007d5c <_free_r+0x54>
 8007d58:	42a2      	cmp	r2, r4
 8007d5a:	d9fa      	bls.n	8007d52 <_free_r+0x4a>
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	1858      	adds	r0, r3, r1
 8007d60:	42a0      	cmp	r0, r4
 8007d62:	d10b      	bne.n	8007d7c <_free_r+0x74>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	4401      	add	r1, r0
 8007d68:	1858      	adds	r0, r3, r1
 8007d6a:	4282      	cmp	r2, r0
 8007d6c:	6019      	str	r1, [r3, #0]
 8007d6e:	d1dd      	bne.n	8007d2c <_free_r+0x24>
 8007d70:	6810      	ldr	r0, [r2, #0]
 8007d72:	6852      	ldr	r2, [r2, #4]
 8007d74:	605a      	str	r2, [r3, #4]
 8007d76:	4401      	add	r1, r0
 8007d78:	6019      	str	r1, [r3, #0]
 8007d7a:	e7d7      	b.n	8007d2c <_free_r+0x24>
 8007d7c:	d902      	bls.n	8007d84 <_free_r+0x7c>
 8007d7e:	230c      	movs	r3, #12
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	e7d3      	b.n	8007d2c <_free_r+0x24>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	1821      	adds	r1, r4, r0
 8007d88:	428a      	cmp	r2, r1
 8007d8a:	bf04      	itt	eq
 8007d8c:	6811      	ldreq	r1, [r2, #0]
 8007d8e:	6852      	ldreq	r2, [r2, #4]
 8007d90:	6062      	str	r2, [r4, #4]
 8007d92:	bf04      	itt	eq
 8007d94:	1809      	addeq	r1, r1, r0
 8007d96:	6021      	streq	r1, [r4, #0]
 8007d98:	605c      	str	r4, [r3, #4]
 8007d9a:	e7c7      	b.n	8007d2c <_free_r+0x24>
 8007d9c:	bd38      	pop	{r3, r4, r5, pc}
 8007d9e:	bf00      	nop
 8007da0:	200000b8 	.word	0x200000b8

08007da4 <_malloc_r>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	1ccd      	adds	r5, r1, #3
 8007da8:	f025 0503 	bic.w	r5, r5, #3
 8007dac:	3508      	adds	r5, #8
 8007dae:	2d0c      	cmp	r5, #12
 8007db0:	bf38      	it	cc
 8007db2:	250c      	movcc	r5, #12
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	4606      	mov	r6, r0
 8007db8:	db01      	blt.n	8007dbe <_malloc_r+0x1a>
 8007dba:	42a9      	cmp	r1, r5
 8007dbc:	d903      	bls.n	8007dc6 <_malloc_r+0x22>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	6033      	str	r3, [r6, #0]
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
 8007dc6:	f000 f857 	bl	8007e78 <__malloc_lock>
 8007dca:	4a21      	ldr	r2, [pc, #132]	; (8007e50 <_malloc_r+0xac>)
 8007dcc:	6814      	ldr	r4, [r2, #0]
 8007dce:	4621      	mov	r1, r4
 8007dd0:	b991      	cbnz	r1, 8007df8 <_malloc_r+0x54>
 8007dd2:	4c20      	ldr	r4, [pc, #128]	; (8007e54 <_malloc_r+0xb0>)
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	b91b      	cbnz	r3, 8007de0 <_malloc_r+0x3c>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f000 f83d 	bl	8007e58 <_sbrk_r>
 8007dde:	6020      	str	r0, [r4, #0]
 8007de0:	4629      	mov	r1, r5
 8007de2:	4630      	mov	r0, r6
 8007de4:	f000 f838 	bl	8007e58 <_sbrk_r>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d124      	bne.n	8007e36 <_malloc_r+0x92>
 8007dec:	230c      	movs	r3, #12
 8007dee:	6033      	str	r3, [r6, #0]
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 f842 	bl	8007e7a <__malloc_unlock>
 8007df6:	e7e4      	b.n	8007dc2 <_malloc_r+0x1e>
 8007df8:	680b      	ldr	r3, [r1, #0]
 8007dfa:	1b5b      	subs	r3, r3, r5
 8007dfc:	d418      	bmi.n	8007e30 <_malloc_r+0x8c>
 8007dfe:	2b0b      	cmp	r3, #11
 8007e00:	d90f      	bls.n	8007e22 <_malloc_r+0x7e>
 8007e02:	600b      	str	r3, [r1, #0]
 8007e04:	50cd      	str	r5, [r1, r3]
 8007e06:	18cc      	adds	r4, r1, r3
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f836 	bl	8007e7a <__malloc_unlock>
 8007e0e:	f104 000b 	add.w	r0, r4, #11
 8007e12:	1d23      	adds	r3, r4, #4
 8007e14:	f020 0007 	bic.w	r0, r0, #7
 8007e18:	1ac3      	subs	r3, r0, r3
 8007e1a:	d0d3      	beq.n	8007dc4 <_malloc_r+0x20>
 8007e1c:	425a      	negs	r2, r3
 8007e1e:	50e2      	str	r2, [r4, r3]
 8007e20:	e7d0      	b.n	8007dc4 <_malloc_r+0x20>
 8007e22:	428c      	cmp	r4, r1
 8007e24:	684b      	ldr	r3, [r1, #4]
 8007e26:	bf16      	itet	ne
 8007e28:	6063      	strne	r3, [r4, #4]
 8007e2a:	6013      	streq	r3, [r2, #0]
 8007e2c:	460c      	movne	r4, r1
 8007e2e:	e7eb      	b.n	8007e08 <_malloc_r+0x64>
 8007e30:	460c      	mov	r4, r1
 8007e32:	6849      	ldr	r1, [r1, #4]
 8007e34:	e7cc      	b.n	8007dd0 <_malloc_r+0x2c>
 8007e36:	1cc4      	adds	r4, r0, #3
 8007e38:	f024 0403 	bic.w	r4, r4, #3
 8007e3c:	42a0      	cmp	r0, r4
 8007e3e:	d005      	beq.n	8007e4c <_malloc_r+0xa8>
 8007e40:	1a21      	subs	r1, r4, r0
 8007e42:	4630      	mov	r0, r6
 8007e44:	f000 f808 	bl	8007e58 <_sbrk_r>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d0cf      	beq.n	8007dec <_malloc_r+0x48>
 8007e4c:	6025      	str	r5, [r4, #0]
 8007e4e:	e7db      	b.n	8007e08 <_malloc_r+0x64>
 8007e50:	200000b8 	.word	0x200000b8
 8007e54:	200000bc 	.word	0x200000bc

08007e58 <_sbrk_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4c06      	ldr	r4, [pc, #24]	; (8007e74 <_sbrk_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4605      	mov	r5, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	f7f9 f8ba 	bl	8000fdc <_sbrk>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_sbrk_r+0x1a>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_sbrk_r+0x1a>
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20000910 	.word	0x20000910

08007e78 <__malloc_lock>:
 8007e78:	4770      	bx	lr

08007e7a <__malloc_unlock>:
 8007e7a:	4770      	bx	lr

08007e7c <_init>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr

08007e88 <_fini>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr
