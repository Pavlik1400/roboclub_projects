
test-PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006940  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006ad8  08006ad8  00016ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af4  08006af4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006afc  08006afc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006afc  08006afc  00016afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000090  08006b94  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08006b94  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018373  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f7  00000000  00000000  00038433  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003ba30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f25  00000000  00000000  0003dad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ac2  00000000  00000000  000569fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e091  00000000  00000000  000674bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  000f55cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ac0 	.word	0x08006ac0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08006ac0 	.word	0x08006ac0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <turn_servo.8069>:
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* USER CODE BEGIN 2 */
	/* USER CODE END 2 */
  void turn_servo(int degree, int freq){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	f8c7 c004 	str.w	ip, [r7, #4]
	  int counter;
	  	  counter = degree / 10;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4a15      	ldr	r2, [pc, #84]	; (8000540 <turn_servo.8069+0x68>)
 80004ea:	fb82 1203 	smull	r1, r2, r2, r3
 80004ee:	1092      	asrs	r2, r2, #2
 80004f0:	17db      	asrs	r3, r3, #31
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	613b      	str	r3, [r7, #16]
	  	  for(int j = 0; j < counter; j++){
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e018      	b.n	800052e <turn_servo.8069+0x56>
	  		  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000502:	4810      	ldr	r0, [pc, #64]	; (8000544 <turn_servo.8069+0x6c>)
 8000504:	f000 ff9e 	bl	8001444 <HAL_GPIO_WritePin>
	  		  HAL_Delay(freq);
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fce4 	bl	8000ed8 <HAL_Delay>
	  		  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <turn_servo.8069+0x6c>)
 8000518:	f000 ff94 	bl	8001444 <HAL_GPIO_WritePin>
	  		  HAL_Delay(20-freq);
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	f1c3 0314 	rsb	r3, r3, #20
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fcd8 	bl	8000ed8 <HAL_Delay>
	  	  for(int j = 0; j < counter; j++){
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	3301      	adds	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	429a      	cmp	r2, r3
 8000534:	dbe2      	blt.n	80004fc <turn_servo.8069+0x24>
	  	  }
  }
 8000536:	bf00      	nop
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	66666667 	.word	0x66666667
 8000544:	40020c00 	.word	0x40020c00

08000548 <main>:
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
int main(void)
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000554:	f000 fc4e 	bl	8000df4 <HAL_Init>
  SystemClock_Config();
 8000558:	f000 f848 	bl	80005ec <SystemClock_Config>
  MX_GPIO_Init();
 800055c:	f000 f95e 	bl	800081c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000560:	f000 f8c8 	bl	80006f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000564:	f000 f8f4 	bl	8000750 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000568:	f000 f922 	bl	80007b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800056c:	f005 fef8 	bl	8006360 <MX_USB_HOST_Init>

  while (1)
  {
	  turn_servo(60, 2.5);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	469c      	mov	ip, r3
 8000574:	2102      	movs	r1, #2
 8000576:	203c      	movs	r0, #60	; 0x3c
 8000578:	f7ff ffae 	bl	80004d8 <turn_servo.8069>
	  HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fcaa 	bl	8000ed8 <HAL_Delay>
	  turn_servo(60, 2.5);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	469c      	mov	ip, r3
 8000588:	2102      	movs	r1, #2
 800058a:	203c      	movs	r0, #60	; 0x3c
 800058c:	f7ff ffa4 	bl	80004d8 <turn_servo.8069>
	  HAL_Delay(1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f000 fca0 	bl	8000ed8 <HAL_Delay>
	  turn_servo(60, 2.5);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	469c      	mov	ip, r3
 800059c:	2102      	movs	r1, #2
 800059e:	203c      	movs	r0, #60	; 0x3c
 80005a0:	f7ff ff9a 	bl	80004d8 <turn_servo.8069>
	  HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f000 fc96 	bl	8000ed8 <HAL_Delay>
	  turn_servo(60, 0.5);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	469c      	mov	ip, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	203c      	movs	r0, #60	; 0x3c
 80005b4:	f7ff ff90 	bl	80004d8 <turn_servo.8069>
	  HAL_Delay(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005bc:	f000 fc8c 	bl	8000ed8 <HAL_Delay>
	  turn_servo(60, 0.5);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	469c      	mov	ip, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	203c      	movs	r0, #60	; 0x3c
 80005c8:	f7ff ff86 	bl	80004d8 <turn_servo.8069>
	  HAL_Delay(1000);
 80005cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d0:	f000 fc82 	bl	8000ed8 <HAL_Delay>
	  turn_servo(60, 0.5);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	469c      	mov	ip, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	203c      	movs	r0, #60	; 0x3c
 80005dc:	f7ff ff7c 	bl	80004d8 <turn_servo.8069>
	  HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f000 fc78 	bl	8000ed8 <HAL_Delay>
	  turn_servo(60, 2.5);
 80005e8:	e7c2      	b.n	8000570 <main+0x28>
	...

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09a      	sub	sp, #104	; 0x68
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f006 f99e 	bl	800693c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <SystemClock_Config+0x100>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <SystemClock_Config+0x100>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	6413      	str	r3, [r2, #64]	; 0x40
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <SystemClock_Config+0x100>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0x104>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0x104>)
 8000648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0x104>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065a:	2301      	movs	r3, #1
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800065e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000672:	23c0      	movs	r3, #192	; 0xc0
 8000674:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800067a:	2308      	movs	r3, #8
 800067c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000682:	4618      	mov	r0, r3
 8000684:	f003 f91a 	bl	80038bc <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800068e:	f000 f9e5 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	2103      	movs	r1, #3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fb74 	bl	8003d9c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ba:	f000 f9cf 	bl	8000a5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006c2:	23c8      	movs	r3, #200	; 0xc8
 80006c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006c6:	2305      	movs	r3, #5
 80006c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fd40 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006de:	f000 f9bd 	bl	8000a5c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3768      	adds	r7, #104	; 0x68
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x50>)
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_I2C1_Init+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x50>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_I2C1_Init+0x58>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_I2C1_Init+0x50>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_I2C1_Init+0x50>)
 8000732:	f002 faeb 	bl	8002d0c <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 f98e 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000c0 	.word	0x200000c0
 8000748:	40005400 	.word	0x40005400
 800074c:	000186a0 	.word	0x000186a0

08000750 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <MX_I2S3_Init+0x58>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <MX_I2S3_Init+0x5c>)
 800077a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000790:	f002 fbf4 	bl	8002f7c <HAL_I2S_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800079a:	f000 f95f 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000016c 	.word	0x2000016c
 80007a8:	40003c00 	.word	0x40003c00
 80007ac:	00017700 	.word	0x00017700

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_SPI1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_SPI1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI1_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_SPI1_Init+0x64>)
 8000802:	f003 fdf7 	bl	80043f4 <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f926 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000114 	.word	0x20000114
 8000818:	40013000 	.word	0x40013000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4b81      	ldr	r3, [pc, #516]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a80      	ldr	r2, [pc, #512]	; (8000a3c <MX_GPIO_Init+0x220>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b7e      	ldr	r3, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b7a      	ldr	r3, [pc, #488]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a79      	ldr	r2, [pc, #484]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b77      	ldr	r3, [pc, #476]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b73      	ldr	r3, [pc, #460]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a72      	ldr	r2, [pc, #456]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <MX_GPIO_Init+0x220>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <MX_GPIO_Init+0x220>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a6b      	ldr	r2, [pc, #428]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x220>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a64      	ldr	r2, [pc, #400]	; (8000a3c <MX_GPIO_Init+0x220>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <MX_GPIO_Init+0x220>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <MX_GPIO_Init+0x220>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a5d      	ldr	r2, [pc, #372]	; (8000a3c <MX_GPIO_Init+0x220>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <MX_GPIO_Init+0x220>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	4858      	ldr	r0, [pc, #352]	; (8000a40 <MX_GPIO_Init+0x224>)
 80008e0:	f000 fdb0 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	4856      	ldr	r0, [pc, #344]	; (8000a44 <MX_GPIO_Init+0x228>)
 80008ea:	f000 fdab 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008f4:	4854      	ldr	r0, [pc, #336]	; (8000a48 <MX_GPIO_Init+0x22c>)
 80008f6:	f000 fda5 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008fa:	2200      	movs	r2, #0
 80008fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000900:	4852      	ldr	r0, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000902:	f000 fd9f 	bl	8001444 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000906:	2304      	movs	r3, #4
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4849      	ldr	r0, [pc, #292]	; (8000a40 <MX_GPIO_Init+0x224>)
 800091a:	f000 fc11 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4842      	ldr	r0, [pc, #264]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000936:	f000 fc03 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800093a:	2332      	movs	r3, #50	; 0x32
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093e:	4b44      	ldr	r3, [pc, #272]	; (8000a50 <MX_GPIO_Init+0x234>)
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	483c      	ldr	r0, [pc, #240]	; (8000a40 <MX_GPIO_Init+0x224>)
 800094e:	f000 fbf7 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4836      	ldr	r0, [pc, #216]	; (8000a44 <MX_GPIO_Init+0x228>)
 800096a:	f000 fbe9 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800096e:	2308      	movs	r3, #8
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097e:	2305      	movs	r3, #5
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	482e      	ldr	r0, [pc, #184]	; (8000a44 <MX_GPIO_Init+0x228>)
 800098a:	f000 fbd9 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800098e:	2301      	movs	r3, #1
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	482c      	ldr	r0, [pc, #176]	; (8000a54 <MX_GPIO_Init+0x238>)
 80009a2:	f000 fbcd 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b8:	2305      	movs	r3, #5
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x22c>)
 80009c4:	f000 fbbc 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009c8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4819      	ldr	r0, [pc, #100]	; (8000a48 <MX_GPIO_Init+0x22c>)
 80009e2:	f000 fbad 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a00:	f000 fb9e 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_GPIO_Init+0x23c>)
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a18:	f000 fb92 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a30:	f000 fb86 	bl	8001140 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	10120000 	.word	0x10120000
 8000a54:	40020000 	.word	0x40020000
 8000a58:	10110000 	.word	0x10110000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_I2C_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000afa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000b18:	f000 fb12 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <HAL_I2S_MspInit+0xc0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d14a      	bne.n	8000c04 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_I2S_MspInit+0xc4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <HAL_I2S_MspInit+0xc8>)
 8000bde:	f000 faaf 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000be2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <HAL_I2S_MspInit+0xcc>)
 8000c00:	f000 fa9e 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40003c00 	.word	0x40003c00
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020800 	.word	0x40020800

08000c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_SPI_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12b      	bne.n	8000c96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c76:	23e0      	movs	r3, #224	; 0xe0
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c92:	f000 fa55 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013000 	.word	0x40013000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f8ca 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <OTG_FS_IRQHandler+0x10>)
 8000d0e:	f000 fe37 	bl	8001980 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000584 	.word	0x20000584

08000d1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x50>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x16>
		heap_end = &end;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <_sbrk+0x50>)
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <_sbrk+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <_sbrk+0x50>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <_sbrk+0x50>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	466a      	mov	r2, sp
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d907      	bls.n	8000d56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d46:	f005 fdbf 	bl	80068c8 <__errno>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d54:	e006      	b.n	8000d64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <_sbrk+0x50>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <_sbrk+0x50>)
 8000d60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000ac 	.word	0x200000ac
 8000d70:	20000850 	.word	0x20000850

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SystemInit+0x28>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <SystemInit+0x28>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SystemInit+0x28>)
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd3 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f005 fd81 	bl	80068d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fbb9 	bl	8000548 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ddc:	08006b04 	.word	0x08006b04
  ldr  r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000de8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000dec:	2000084c 	.word	0x2000084c

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f94d 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fe20 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f965 	bl	8001126 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e74:	f000 f92d 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200001b4 	.word	0x200001b4

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200001b4 	.word	0x200001b4

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_Delay+0x40>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000008 	.word	0x20000008

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff3e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff31 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e159      	b.n	8001410 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8148 	bne.w	800140a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d00b      	beq.n	800119a <HAL_GPIO_Init+0x5a>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	2b11      	cmp	r3, #17
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b12      	cmp	r3, #18
 8001198:	d130      	bne.n	80011fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0xfc>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a2 	beq.w	800140a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a51      	ldr	r2, [pc, #324]	; (8001428 <HAL_GPIO_Init+0x2e8>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2ec>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x202>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a47      	ldr	r2, [pc, #284]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x1fe>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a46      	ldr	r2, [pc, #280]	; (8001434 <HAL_GPIO_Init+0x2f4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x1fa>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <HAL_GPIO_Init+0x2f8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x1f6>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a44      	ldr	r2, [pc, #272]	; (800143c <HAL_GPIO_Init+0x2fc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x1f2>
 800132e:	2304      	movs	r3, #4
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001332:	2307      	movs	r3, #7
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x204>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x204>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001354:	4934      	ldr	r1, [pc, #208]	; (8001428 <HAL_GPIO_Init+0x2e8>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001386:	4a2e      	ldr	r2, [pc, #184]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <HAL_GPIO_Init+0x300>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f aea2 	bls.w	800115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	3724      	adds	r7, #36	; 0x24
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001478:	b08f      	sub	sp, #60	; 0x3c
 800147a:	af0a      	add	r7, sp, #40	; 0x28
 800147c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e054      	b.n	8001532 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f004 ffb0 	bl	8006408 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2203      	movs	r2, #3
 80014ac:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 f86a 	bl	80045a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	687e      	ldr	r6, [r7, #4]
 80014d4:	466d      	mov	r5, sp
 80014d6:	f106 0410 	add.w	r4, r6, #16
 80014da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ea:	1d33      	adds	r3, r6, #4
 80014ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f002 ffe4 	bl	80044bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 f861 	bl	80045c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	687e      	ldr	r6, [r7, #4]
 8001508:	466d      	mov	r5, sp
 800150a:	f106 0410 	add.w	r4, r6, #16
 800150e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001516:	e894 0003 	ldmia.w	r4, {r0, r1}
 800151a:	e885 0003 	stmia.w	r5, {r0, r1}
 800151e:	1d33      	adds	r3, r6, #4
 8001520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f003 f974 	bl	8004810 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800153a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800153a:	b590      	push	{r4, r7, lr}
 800153c:	b089      	sub	sp, #36	; 0x24
 800153e:	af04      	add	r7, sp, #16
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	4608      	mov	r0, r1
 8001544:	4611      	mov	r1, r2
 8001546:	461a      	mov	r2, r3
 8001548:	4603      	mov	r3, r0
 800154a:	70fb      	strb	r3, [r7, #3]
 800154c:	460b      	mov	r3, r1
 800154e:	70bb      	strb	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_HCD_HC_Init+0x28>
 800155e:	2302      	movs	r3, #2
 8001560:	e07f      	b.n	8001662 <HAL_HCD_HC_Init+0x128>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	333d      	adds	r3, #61	; 0x3d
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3338      	adds	r3, #56	; 0x38
 800158e:	787a      	ldrb	r2, [r7, #1]
 8001590:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	3340      	adds	r3, #64	; 0x40
 80015a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015a4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015a6:	78fa      	ldrb	r2, [r7, #3]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3339      	adds	r3, #57	; 0x39
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015ba:	78fa      	ldrb	r2, [r7, #3]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	333f      	adds	r3, #63	; 0x3f
 80015ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	78bb      	ldrb	r3, [r7, #2]
 80015d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015d8:	b2d8      	uxtb	r0, r3
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	333a      	adds	r3, #58	; 0x3a
 80015e8:	4602      	mov	r2, r0
 80015ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da0a      	bge.n	800160a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	333b      	adds	r3, #59	; 0x3b
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e009      	b.n	800161e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	333b      	adds	r3, #59	; 0x3b
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	333c      	adds	r3, #60	; 0x3c
 800162e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001632:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	787c      	ldrb	r4, [r7, #1]
 800163a:	78ba      	ldrb	r2, [r7, #2]
 800163c:	78f9      	ldrb	r1, [r7, #3]
 800163e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	f897 3020 	ldrb.w	r3, [r7, #32]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4623      	mov	r3, r4
 8001650:	f003 fa1e 	bl	8004a90 <USB_HC_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}

0800166a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_HCD_HC_Halt+0x1e>
 8001684:	2302      	movs	r3, #2
 8001686:	e00f      	b.n	80016a8 <HAL_HCD_HC_Halt+0x3e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fc58 	bl	8004f4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	70fb      	strb	r3, [r7, #3]
 80016c2:	460b      	mov	r3, r1
 80016c4:	70bb      	strb	r3, [r7, #2]
 80016c6:	4613      	mov	r3, r2
 80016c8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	333b      	adds	r3, #59	; 0x3b
 80016da:	78ba      	ldrb	r2, [r7, #2]
 80016dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016de:	78fa      	ldrb	r2, [r7, #3]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	333f      	adds	r3, #63	; 0x3f
 80016ee:	787a      	ldrb	r2, [r7, #1]
 80016f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016f2:	7c3b      	ldrb	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10a      	bne.n	800170e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3342      	adds	r3, #66	; 0x42
 8001708:	2203      	movs	r2, #3
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e009      	b.n	8001722 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3342      	adds	r3, #66	; 0x42
 800171e:	2202      	movs	r2, #2
 8001720:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001722:	787b      	ldrb	r3, [r7, #1]
 8001724:	2b03      	cmp	r3, #3
 8001726:	f200 80d6 	bhi.w	80018d6 <HAL_HCD_HC_SubmitRequest+0x226>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <HAL_HCD_HC_SubmitRequest+0x80>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001741 	.word	0x08001741
 8001734:	080018c1 	.word	0x080018c1
 8001738:	080017ad 	.word	0x080017ad
 800173c:	08001837 	.word	0x08001837
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001740:	7c3b      	ldrb	r3, [r7, #16]
 8001742:	2b01      	cmp	r3, #1
 8001744:	f040 80c9 	bne.w	80018da <HAL_HCD_HC_SubmitRequest+0x22a>
 8001748:	78bb      	ldrb	r3, [r7, #2]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 80c5 	bne.w	80018da <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001750:	8b3b      	ldrh	r3, [r7, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	3351      	adds	r3, #81	; 0x51
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3351      	adds	r3, #81	; 0x51
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001794:	e0a1      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2202      	movs	r2, #2
 80017a8:	701a      	strb	r2, [r3, #0]
      break;
 80017aa:	e096      	b.n	80018da <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017ac:	78bb      	ldrb	r3, [r7, #2]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d120      	bne.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3351      	adds	r3, #81	; 0x51
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10a      	bne.n	80017de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3342      	adds	r3, #66	; 0x42
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017dc:	e07e      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3342      	adds	r3, #66	; 0x42
 80017ee:	2202      	movs	r2, #2
 80017f0:	701a      	strb	r2, [r3, #0]
      break;
 80017f2:	e073      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3350      	adds	r3, #80	; 0x50
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3342      	adds	r3, #66	; 0x42
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e05d      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2202      	movs	r2, #2
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e052      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001836:	78bb      	ldrb	r3, [r7, #2]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d120      	bne.n	800187e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3351      	adds	r3, #81	; 0x51
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10a      	bne.n	8001868 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3342      	adds	r3, #66	; 0x42
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001866:	e039      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3342      	adds	r3, #66	; 0x42
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]
      break;
 800187c:	e02e      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800187e:	78fa      	ldrb	r2, [r7, #3]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3350      	adds	r3, #80	; 0x50
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3342      	adds	r3, #66	; 0x42
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
      break;
 80018a8:	e018      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	3342      	adds	r3, #66	; 0x42
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
      break;
 80018be:	e00d      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3342      	adds	r3, #66	; 0x42
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
      break;
 80018d4:	e002      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80018d6:	bf00      	nop
 80018d8:	e000      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80018da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3344      	adds	r3, #68	; 0x44
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	8b39      	ldrh	r1, [r7, #24]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4403      	add	r3, r0
 8001900:	3348      	adds	r3, #72	; 0x48
 8001902:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	335c      	adds	r3, #92	; 0x5c
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	334c      	adds	r3, #76	; 0x4c
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3339      	adds	r3, #57	; 0x39
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	335d      	adds	r3, #93	; 0x5d
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	3338      	adds	r3, #56	; 0x38
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	18d1      	adds	r1, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	f003 f998 	bl	8004ca4 <USB_HC_StartXfer>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop

08001980 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fef7 	bl	800478a <USB_GetMode>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f040 80f1 	bne.w	8001b86 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fedb 	bl	8004764 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80e7 	beq.w	8001b84 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fed2 	bl	8004764 <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ca:	d104      	bne.n	80019d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fec2 	bl	8004764 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ea:	d104      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 feb2 	bl	8004764 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a0a:	d104      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fea2 	bl	8004764 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d103      	bne.n	8001a32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fe94 	bl	8004764 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a46:	d117      	bne.n	8001a78 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001a56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f004 fd51 	bl	8006504 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 ff8d 	bl	8004988 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fe71 	bl	8004764 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d102      	bne.n	8001a94 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 f8ac 	bl	8002bec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fe63 	bl	8004764 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d106      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f004 fd0f 	bl	80064cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fe52 	bl	8004764 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aca:	d138      	bne.n	8001b3e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fa2b 	bl	8004f2c <USB_HC_ReadInterrupt>
 8001ad6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e025      	b.n	8001b2a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d018      	beq.n	8001b24 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b08:	d106      	bne.n	8001b18 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8b3 	bl	8001c7c <HCD_HC_IN_IRQHandler>
 8001b16:	e005      	b.n	8001b24 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fc43 	bl	80023aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3d4      	bcc.n	8001ade <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fe0e 	bl	8004764 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d101      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x1d6>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_HCD_IRQHandler+0x1d8>
 8001b56:	2300      	movs	r3, #0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d014      	beq.n	8001b86 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0210 	bic.w	r2, r2, #16
 8001b6a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 ff91 	bl	8002a94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0210 	orr.w	r2, r2, #16
 8001b80:	619a      	str	r2, [r3, #24]
 8001b82:	e000      	b.n	8001b86 <HAL_HCD_IRQHandler+0x206>
      return;
 8001b84:	bf00      	nop
    }
  }
}
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_HCD_Start+0x16>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e013      	b.n	8001bca <HAL_HCD_Start+0x3e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fce5 	bl	800457e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 ff1e 	bl	80049fc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_HCD_Stop+0x16>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e00d      	b.n	8001c04 <HAL_HCD_Stop+0x32>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fae5 	bl	80051c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	335c      	adds	r3, #92	; 0x5c
 8001c28:	781b      	ldrb	r3, [r3, #0]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	334c      	adds	r3, #76	; 0x4c
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fefe 	bl	8004a6e <USB_GetCurrentFrame>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d119      	bne.n	8001ce0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2304      	movs	r3, #4
 8001cbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	0151      	lsls	r1, r2, #5
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	440a      	add	r2, r1
 8001cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	60d3      	str	r3, [r2, #12]
 8001cde:	e095      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d109      	bne.n	8001d0a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	2320      	movs	r3, #32
 8001d06:	6093      	str	r3, [r2, #8]
 8001d08:	e080      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d134      	bne.n	8001d8a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	0151      	lsls	r1, r2, #5
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	440a      	add	r2, r1
 8001d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	335d      	adds	r3, #93	; 0x5d
 8001d50:	2205      	movs	r2, #5
 8001d52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	2310      	movs	r3, #16
 8001d64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	461a      	mov	r2, r3
 8001d74:	2308      	movs	r3, #8
 8001d76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f8e3 	bl	8004f4e <USB_HC_Halt>
 8001d88:	e040      	b.n	8001e0c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da0:	d134      	bne.n	8001e0c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	0151      	lsls	r1, r2, #5
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	440a      	add	r2, r1
 8001db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 f8be 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	2310      	movs	r3, #16
 8001de2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	335d      	adds	r3, #93	; 0x5d
 8001df4:	2208      	movs	r2, #8
 8001df6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	461a      	mov	r2, r3
 8001e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e22:	d122      	bne.n	8001e6a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	0151      	lsls	r1, r2, #5
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	440a      	add	r2, r1
 8001e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 f87d 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	461a      	mov	r2, r3
 8001e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e66:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e68:	e29b      	b.n	80023a2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	f040 80c1 	bne.w	8002004 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01b      	beq.n	8001ec2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	3348      	adds	r3, #72	; 0x48
 8001e9a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	0159      	lsls	r1, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001eae:	1ad1      	subs	r1, r2, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4403      	add	r3, r0
 8001ebe:	334c      	adds	r3, #76	; 0x4c
 8001ec0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	335d      	adds	r3, #93	; 0x5d
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3358      	adds	r3, #88	; 0x58
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2301      	movs	r3, #1
 8001efa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	333f      	adds	r3, #63	; 0x3f
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	333f      	adds	r3, #63	; 0x3f
 8001f22:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d121      	bne.n	8001f6c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	0151      	lsls	r1, r2, #5
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	440a      	add	r2, r1
 8001f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fffb 	bl	8004f4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	2310      	movs	r3, #16
 8001f68:	6093      	str	r3, [r2, #8]
 8001f6a:	e034      	b.n	8001fd6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	333f      	adds	r3, #63	; 0x3f
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d129      	bne.n	8001fd6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fa0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	335c      	adds	r3, #92	; 0x5c
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	b2d8      	uxtb	r0, r3
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	335c      	adds	r3, #92	; 0x5c
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4601      	mov	r1, r0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f004 faa5 	bl	8006520 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3350      	adds	r3, #80	; 0x50
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2d8      	uxtb	r0, r3
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3350      	adds	r3, #80	; 0x50
 8001ffe:	4602      	mov	r2, r0
 8002000:	701a      	strb	r2, [r3, #0]
}
 8002002:	e1ce      	b.n	80023a2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	f040 80f1 	bne.w	80021fe <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	0151      	lsls	r1, r2, #5
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	440a      	add	r2, r1
 8002032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002036:	f023 0302 	bic.w	r3, r3, #2
 800203a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	335d      	adds	r3, #93	; 0x5d
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d10a      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	335c      	adds	r3, #92	; 0x5c
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e0b0      	b.n	80021ca <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	335d      	adds	r3, #93	; 0x5d
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d10a      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	335c      	adds	r3, #92	; 0x5c
 800208e:	2205      	movs	r2, #5
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e09a      	b.n	80021ca <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	335d      	adds	r3, #93	; 0x5d
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d00a      	beq.n	80020c0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	335d      	adds	r3, #93	; 0x5d
 80020ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d156      	bne.n	800216e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3358      	adds	r3, #88	; 0x58
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	1c59      	adds	r1, r3, #1
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4403      	add	r3, r0
 80020e2:	3358      	adds	r3, #88	; 0x58
 80020e4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	3358      	adds	r3, #88	; 0x58
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d914      	bls.n	8002126 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3358      	adds	r3, #88	; 0x58
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	335c      	adds	r3, #92	; 0x5c
 8002120:	2204      	movs	r2, #4
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e009      	b.n	800213a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	335c      	adds	r3, #92	; 0x5c
 8002136:	2202      	movs	r2, #2
 8002138:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002150:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002158:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	461a      	mov	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	e02d      	b.n	80021ca <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335d      	adds	r3, #93	; 0x5d
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d122      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	335c      	adds	r3, #92	; 0x5c
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2302      	movs	r3, #2
 80021da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	335c      	adds	r3, #92	; 0x5c
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4601      	mov	r1, r0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 f992 	bl	8006520 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021fc:	e0d1      	b.n	80023a2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d13e      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	0151      	lsls	r1, r2, #5
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	440a      	add	r2, r1
 800222a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	3358      	adds	r3, #88	; 0x58
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c59      	adds	r1, r3, #1
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4403      	add	r3, r0
 8002256:	3358      	adds	r3, #88	; 0x58
 8002258:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	335d      	adds	r3, #93	; 0x5d
 800226a:	2206      	movs	r2, #6
 800226c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fe68 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	461a      	mov	r2, r3
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	6093      	str	r3, [r2, #8]
}
 8002290:	e087      	b.n	80023a2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d17c      	bne.n	80023a2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	333f      	adds	r3, #63	; 0x3f
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d122      	bne.n	8002304 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	3358      	adds	r3, #88	; 0x58
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	0151      	lsls	r1, r2, #5
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	440a      	add	r2, r1
 80022e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fe26 	bl	8004f4e <USB_HC_Halt>
 8002302:	e045      	b.n	8002390 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	333f      	adds	r3, #63	; 0x3f
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800232c:	2b02      	cmp	r3, #2
 800232e:	d12f      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	3358      	adds	r3, #88	; 0x58
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d121      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	335d      	adds	r3, #93	; 0x5d
 800235c:	2203      	movs	r2, #3
 800235e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	0151      	lsls	r1, r2, #5
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	440a      	add	r2, r1
 8002376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800237a:	f043 0302 	orr.w	r3, r3, #2
 800237e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fddf 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	461a      	mov	r2, r3
 800239e:	2310      	movs	r3, #16
 80023a0:	6093      	str	r3, [r2, #8]
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d119      	bne.n	800240e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	461a      	mov	r2, r3
 80023e8:	2304      	movs	r3, #4
 80023ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	0151      	lsls	r1, r2, #5
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	440a      	add	r2, r1
 8002402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800240c:	e33e      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b20      	cmp	r3, #32
 8002422:	d141      	bne.n	80024a8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	461a      	mov	r2, r3
 8002432:	2320      	movs	r3, #32
 8002434:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	333d      	adds	r3, #61	; 0x3d
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	f040 831f 	bne.w	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	333d      	adds	r3, #61	; 0x3d
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	335c      	adds	r3, #92	; 0x5c
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	0151      	lsls	r1, r2, #5
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	440a      	add	r2, r1
 800248c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 fd54 	bl	8004f4e <USB_HC_Halt>
}
 80024a6:	e2f1      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ba:	2b40      	cmp	r3, #64	; 0x40
 80024bc:	d13f      	bne.n	800253e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	335d      	adds	r3, #93	; 0x5d
 80024ce:	2204      	movs	r2, #4
 80024d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	333d      	adds	r3, #61	; 0x3d
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	3358      	adds	r3, #88	; 0x58
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	440a      	add	r2, r1
 8002510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f002 fd12 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	2340      	movs	r3, #64	; 0x40
 800253a:	6093      	str	r3, [r2, #8]
}
 800253c:	e2a6      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d122      	bne.n	800259c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	0151      	lsls	r1, r2, #5
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	440a      	add	r2, r1
 800256c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f002 fce4 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002598:	6093      	str	r3, [r2, #8]
}
 800259a:	e277      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d135      	bne.n	800261e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	3358      	adds	r3, #88	; 0x58
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	0151      	lsls	r1, r2, #5
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	440a      	add	r2, r1
 80025dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 fcac 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	2301      	movs	r3, #1
 8002606:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	335d      	adds	r3, #93	; 0x5d
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
}
 800261c:	e236      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b08      	cmp	r3, #8
 8002632:	d12b      	bne.n	800268c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	2308      	movs	r3, #8
 8002644:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	0151      	lsls	r1, r2, #5
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	440a      	add	r2, r1
 800265c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f002 fc6c 	bl	8004f4e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	335d      	adds	r3, #93	; 0x5d
 8002686:	2205      	movs	r2, #5
 8002688:	701a      	strb	r2, [r3, #0]
}
 800268a:	e1ff      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d155      	bne.n	800274e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	3358      	adds	r3, #88	; 0x58
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	335d      	adds	r3, #93	; 0x5d
 80026c6:	2203      	movs	r2, #3
 80026c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	333d      	adds	r3, #61	; 0x3d
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d114      	bne.n	800270a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	333c      	adds	r3, #60	; 0x3c
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	333d      	adds	r3, #61	; 0x3d
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	440a      	add	r2, r1
 8002720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fc0a 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	461a      	mov	r2, r3
 8002748:	2310      	movs	r3, #16
 800274a:	6093      	str	r3, [r2, #8]
}
 800274c:	e19e      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d12b      	bne.n	80027bc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	0151      	lsls	r1, r2, #5
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	440a      	add	r2, r1
 800277a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fbdd 	bl	8004f4e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	335d      	adds	r3, #93	; 0x5d
 80027a4:	2206      	movs	r2, #6
 80027a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	6093      	str	r3, [r2, #8]
}
 80027ba:	e167      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d2:	d135      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	0151      	lsls	r1, r2, #5
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	440a      	add	r2, r1
 80027ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 fba5 	bl	8004f4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2310      	movs	r3, #16
 8002814:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	461a      	mov	r2, r3
 8002824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002828:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	335d      	adds	r3, #93	; 0x5d
 800283a:	2208      	movs	r2, #8
 800283c:	701a      	strb	r2, [r3, #0]
}
 800283e:	e125      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	f040 811a 	bne.w	8002a8c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002872:	f023 0302 	bic.w	r3, r3, #2
 8002876:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	335d      	adds	r3, #93	; 0x5d
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d137      	bne.n	80028fe <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	335c      	adds	r3, #92	; 0x5c
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	333f      	adds	r3, #63	; 0x3f
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d00b      	beq.n	80028d0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	333f      	adds	r3, #63	; 0x3f
 80028c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	f040 80c5 	bne.w	8002a5a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3351      	adds	r3, #81	; 0x51
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2d8      	uxtb	r0, r3
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	3351      	adds	r3, #81	; 0x51
 80028f8:	4602      	mov	r2, r0
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e0ad      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	335d      	adds	r3, #93	; 0x5d
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d10a      	bne.n	800292a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e097      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	335d      	adds	r3, #93	; 0x5d
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d10a      	bne.n	8002956 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	335c      	adds	r3, #92	; 0x5c
 8002950:	2202      	movs	r2, #2
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e081      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	335d      	adds	r3, #93	; 0x5d
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d10a      	bne.n	8002982 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	2205      	movs	r2, #5
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e06b      	b.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	335d      	adds	r3, #93	; 0x5d
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b06      	cmp	r3, #6
 8002996:	d00a      	beq.n	80029ae <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	335d      	adds	r3, #93	; 0x5d
 80029a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d155      	bne.n	8002a5a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	3358      	adds	r3, #88	; 0x58
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	1c59      	adds	r1, r3, #1
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4403      	add	r3, r0
 80029d0:	3358      	adds	r3, #88	; 0x58
 80029d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	3358      	adds	r3, #88	; 0x58
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d914      	bls.n	8002a14 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	3358      	adds	r3, #88	; 0x58
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	335c      	adds	r3, #92	; 0x5c
 8002a0e:	2204      	movs	r2, #4
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e009      	b.n	8002a28 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	335c      	adds	r3, #92	; 0x5c
 8002a24:	2202      	movs	r2, #2
 8002a26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	2302      	movs	r3, #2
 8002a6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	b2d8      	uxtb	r0, r3
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	335c      	adds	r3, #92	; 0x5c
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	4601      	mov	r1, r0
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f003 fd4a 	bl	8006520 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	0c5b      	lsrs	r3, r3, #17
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ac8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d003      	beq.n	8002ad8 <HCD_RXQLVL_IRQHandler+0x44>
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	f000 8082 	beq.w	8002bda <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ad6:	e083      	b.n	8002be0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d07f      	beq.n	8002bde <HCD_RXQLVL_IRQHandler+0x14a>
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	440b      	add	r3, r1
 8002aec:	3344      	adds	r3, #68	; 0x44
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d074      	beq.n	8002bde <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3344      	adds	r3, #68	; 0x44
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f001 fdff 	bl	8004712 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	3344      	adds	r3, #68	; 0x44
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	18d1      	adds	r1, r2, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4403      	add	r3, r0
 8002b38:	3344      	adds	r3, #68	; 0x44
 8002b3a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	334c      	adds	r3, #76	; 0x4c
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	18d1      	adds	r1, r2, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4403      	add	r3, r0
 8002b60:	334c      	adds	r3, #76	; 0x4c
 8002b62:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d031      	beq.n	8002bde <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	3350      	adds	r3, #80	; 0x50
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3350      	adds	r3, #80	; 0x50
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	701a      	strb	r2, [r3, #0]
      break;
 8002bd8:	e001      	b.n	8002bde <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002bde:	bf00      	nop
  }
}
 8002be0:	bf00      	nop
 8002be2:	3728      	adds	r7, #40	; 0x28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	1ff80000 	.word	0x1ff80000

08002bec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d113      	bne.n	8002c4c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d10a      	bne.n	8002c44 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002c3c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f003 fc52 	bl	80064e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d147      	bne.n	8002ce6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d129      	bne.n	8002cbc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d113      	bne.n	8002c98 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c7a:	d106      	bne.n	8002c8a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2102      	movs	r1, #2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 fe80 	bl	8004988 <USB_InitFSLSPClkSel>
 8002c88:	e011      	b.n	8002cae <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 fe79 	bl	8004988 <USB_InitFSLSPClkSel>
 8002c96:	e00a      	b.n	8002cae <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cac:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f003 fc44 	bl	800653c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f003 fc17 	bl	80064e8 <HAL_HCD_Connect_Callback>
 8002cba:	e014      	b.n	8002ce6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f003 fc4b 	bl	8006558 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002cd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cd4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ce4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d103      	bne.n	8002cf8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e11f      	b.n	8002f5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fec2 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	; 0x24
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d70:	f001 f9de 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8002d74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a7b      	ldr	r2, [pc, #492]	; (8002f68 <HAL_I2C_Init+0x25c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d807      	bhi.n	8002d90 <HAL_I2C_Init+0x84>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a7a      	ldr	r2, [pc, #488]	; (8002f6c <HAL_I2C_Init+0x260>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	bf94      	ite	ls
 8002d88:	2301      	movls	r3, #1
 8002d8a:	2300      	movhi	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e006      	b.n	8002d9e <HAL_I2C_Init+0x92>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a77      	ldr	r2, [pc, #476]	; (8002f70 <HAL_I2C_Init+0x264>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	bf94      	ite	ls
 8002d98:	2301      	movls	r3, #1
 8002d9a:	2300      	movhi	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0db      	b.n	8002f5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <HAL_I2C_Init+0x268>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0c9b      	lsrs	r3, r3, #18
 8002db0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a64      	ldr	r2, [pc, #400]	; (8002f68 <HAL_I2C_Init+0x25c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d802      	bhi.n	8002de0 <HAL_I2C_Init+0xd4>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	e009      	b.n	8002df4 <HAL_I2C_Init+0xe8>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	4a63      	ldr	r2, [pc, #396]	; (8002f78 <HAL_I2C_Init+0x26c>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	3301      	adds	r3, #1
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4956      	ldr	r1, [pc, #344]	; (8002f68 <HAL_I2C_Init+0x25c>)
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d80d      	bhi.n	8002e30 <HAL_I2C_Init+0x124>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1e59      	subs	r1, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	bf38      	it	cc
 8002e2c:	2304      	movcc	r3, #4
 8002e2e:	e04f      	b.n	8002ed0 <HAL_I2C_Init+0x1c4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d111      	bne.n	8002e5c <HAL_I2C_Init+0x150>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e58      	subs	r0, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	440b      	add	r3, r1
 8002e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e012      	b.n	8002e82 <HAL_I2C_Init+0x176>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Init+0x17e>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e022      	b.n	8002ed0 <HAL_I2C_Init+0x1c4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10e      	bne.n	8002eb0 <HAL_I2C_Init+0x1a4>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e58      	subs	r0, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	440b      	add	r3, r1
 8002ea0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eae:	e00f      	b.n	8002ed0 <HAL_I2C_Init+0x1c4>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	0099      	lsls	r1, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	6809      	ldr	r1, [r1, #0]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002efe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6911      	ldr	r1, [r2, #16]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	4311      	orrs	r1, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	000186a0 	.word	0x000186a0
 8002f6c:	001e847f 	.word	0x001e847f
 8002f70:	003d08ff 	.word	0x003d08ff
 8002f74:	431bde83 	.word	0x431bde83
 8002f78:	10624dd3 	.word	0x10624dd3

08002f7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e128      	b.n	80031e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a90      	ldr	r2, [pc, #576]	; (80031e8 <HAL_I2S_Init+0x26c>)
 8002fa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd fdcf 	bl	8000b4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fc4:	f023 030f 	bic.w	r3, r3, #15
 8002fc8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d060      	beq.n	800309c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d102      	bne.n	8002fe8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e001      	b.n	8002fec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fe8:	2320      	movs	r3, #32
 8002fea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d802      	bhi.n	8002ffa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f001 f99c 	bl	8004338 <HAL_RCCEx_GetPeriphCLKFreq>
 8003000:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300a:	d125      	bne.n	8003058 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	fbb2 f2f3 	udiv	r2, r2, r3
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	461a      	mov	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	3305      	adds	r3, #5
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	e01f      	b.n	8003076 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	461a      	mov	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	3305      	adds	r3, #5
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	e00e      	b.n	8003076 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	3305      	adds	r3, #5
 8003074:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4a5c      	ldr	r2, [pc, #368]	; (80031ec <HAL_I2S_Init+0x270>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e003      	b.n	80030a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800309c:	2302      	movs	r3, #2
 800309e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d902      	bls.n	80030b0 <HAL_I2S_Init+0x134>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d907      	bls.n	80030c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f043 0210 	orr.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e08f      	b.n	80031e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	ea42 0103 	orr.w	r1, r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030de:	f023 030f 	bic.w	r3, r3, #15
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6851      	ldr	r1, [r2, #4]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6892      	ldr	r2, [r2, #8]
 80030ea:	4311      	orrs	r1, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68d2      	ldr	r2, [r2, #12]
 80030f0:	4311      	orrs	r1, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6992      	ldr	r2, [r2, #24]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003102:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d161      	bne.n	80031d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a38      	ldr	r2, [pc, #224]	; (80031f0 <HAL_I2S_Init+0x274>)
 8003110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a37      	ldr	r2, [pc, #220]	; (80031f4 <HAL_I2S_Init+0x278>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_I2S_Init+0x1a4>
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_I2S_Init+0x27c>)
 800311e:	e001      	b.n	8003124 <HAL_I2S_Init+0x1a8>
 8003120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	4932      	ldr	r1, [pc, #200]	; (80031f4 <HAL_I2S_Init+0x278>)
 800312c:	428a      	cmp	r2, r1
 800312e:	d101      	bne.n	8003134 <HAL_I2S_Init+0x1b8>
 8003130:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <HAL_I2S_Init+0x27c>)
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x1bc>
 8003134:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003138:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800313c:	f023 030f 	bic.w	r3, r3, #15
 8003140:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <HAL_I2S_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_I2S_Init+0x1d4>
 800314c:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <HAL_I2S_Init+0x27c>)
 800314e:	e001      	b.n	8003154 <HAL_I2S_Init+0x1d8>
 8003150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003154:	2202      	movs	r2, #2
 8003156:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <HAL_I2S_Init+0x278>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_I2S_Init+0x1ea>
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_I2S_Init+0x27c>)
 8003164:	e001      	b.n	800316a <HAL_I2S_Init+0x1ee>
 8003166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003176:	d003      	beq.n	8003180 <HAL_I2S_Init+0x204>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e001      	b.n	800318c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	b299      	uxth	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80031a2:	4303      	orrs	r3, r0
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	430b      	orrs	r3, r1
 80031a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <HAL_I2S_Init+0x278>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_I2S_Init+0x24c>
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <HAL_I2S_Init+0x27c>)
 80031c6:	e001      	b.n	80031cc <HAL_I2S_Init+0x250>
 80031c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031cc:	897a      	ldrh	r2, [r7, #10]
 80031ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	080032f3 	.word	0x080032f3
 80031ec:	cccccccd 	.word	0xcccccccd
 80031f0:	08003409 	.word	0x08003409
 80031f4:	40003800 	.word	0x40003800
 80031f8:	40003400 	.word	0x40003400

080031fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800327c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffb8 	bl	80031fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	b292      	uxth	r2, r2
 80032a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10e      	bne.n	80032ea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff93 	bl	8003210 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b04      	cmp	r3, #4
 800330c:	d13a      	bne.n	8003384 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d109      	bne.n	800332c <I2S_IRQHandler+0x3a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d102      	bne.n	800332c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffb4 	bl	8003294 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d126      	bne.n	8003384 <I2S_IRQHandler+0x92>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b20      	cmp	r3, #32
 8003342:	d11f      	bne.n	8003384 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003352:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f043 0202 	orr.w	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff50 	bl	8003224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b03      	cmp	r3, #3
 800338e:	d136      	bne.n	80033fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b02      	cmp	r3, #2
 8003398:	d109      	bne.n	80033ae <I2S_IRQHandler+0xbc>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b80      	cmp	r3, #128	; 0x80
 80033a6:	d102      	bne.n	80033ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff45 	bl	8003238 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d122      	bne.n	80033fe <I2S_IRQHandler+0x10c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d11b      	bne.n	80033fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f043 0204 	orr.w	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff13 	bl	8003224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4aa2      	ldr	r2, [pc, #648]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003422:	4ba2      	ldr	r3, [pc, #648]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003424:	e001      	b.n	800342a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a9b      	ldr	r2, [pc, #620]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003440:	4b9a      	ldr	r3, [pc, #616]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003442:	e001      	b.n	8003448 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003444:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003454:	d004      	beq.n	8003460 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 8099 	bne.w	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d107      	bne.n	800347a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f925 	bl	80036c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9c8 	bl	8003824 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d13a      	bne.n	8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d035      	beq.n	8003514 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7e      	ldr	r2, [pc, #504]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80034b2:	4b7e      	ldr	r3, [pc, #504]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034b4:	e001      	b.n	80034ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80034b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4979      	ldr	r1, [pc, #484]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034c2:	428b      	cmp	r3, r1
 80034c4:	d101      	bne.n	80034ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034c6:	4b79      	ldr	r3, [pc, #484]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034c8:	e001      	b.n	80034ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f043 0202 	orr.w	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fe88 	bl	8003224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b08      	cmp	r3, #8
 800351c:	f040 80be 	bne.w	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80b8 	beq.w	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800353a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a59      	ldr	r2, [pc, #356]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003546:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003548:	e001      	b.n	800354e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800354a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4954      	ldr	r1, [pc, #336]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003556:	428b      	cmp	r3, r1
 8003558:	d101      	bne.n	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800355a:	4b54      	ldr	r3, [pc, #336]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800355c:	e001      	b.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800355e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003562:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003566:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f043 0204 	orr.w	r2, r3, #4
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fe4a 	bl	8003224 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003590:	e084      	b.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d107      	bne.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8be 	bl	8003728 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f8fd 	bl	80037c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d12f      	bne.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d02a      	beq.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f6:	e001      	b.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4929      	ldr	r1, [pc, #164]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003604:	428b      	cmp	r3, r1
 8003606:	d101      	bne.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003608:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800360a:	e001      	b.n	8003610 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800360c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003614:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f043 0202 	orr.w	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fdfa 	bl	8003224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b08      	cmp	r3, #8
 8003638:	d131      	bne.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02c      	beq.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003650:	e001      	b.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4912      	ldr	r1, [pc, #72]	; (80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800365e:	428b      	cmp	r3, r1
 8003660:	d101      	bne.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003664:	e001      	b.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800366e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800367e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f043 0204 	orr.w	r2, r3, #4
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff fdc5 	bl	8003224 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800369a:	e000      	b.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800369c:	bf00      	nop
}
 800369e:	bf00      	nop
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40003800 	.word	0x40003800
 80036ac:	40003400 	.word	0x40003400

080036b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c99      	adds	r1, r3, #2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6251      	str	r1, [r2, #36]	; 0x24
 80036d6:	881a      	ldrh	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d113      	bne.n	800371e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003704:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ffc9 	bl	80036b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	1c99      	adds	r1, r3, #2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6251      	str	r1, [r2, #36]	; 0x24
 800373a:	8819      	ldrh	r1, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <I2SEx_TxISR_I2SExt+0x22>
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <I2SEx_TxISR_I2SExt+0x94>)
 8003748:	e001      	b.n	800374e <I2SEx_TxISR_I2SExt+0x26>
 800374a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374e:	460a      	mov	r2, r1
 8003750:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d121      	bne.n	80037ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <I2SEx_TxISR_I2SExt+0x50>
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <I2SEx_TxISR_I2SExt+0x94>)
 8003776:	e001      	b.n	800377c <I2SEx_TxISR_I2SExt+0x54>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	490d      	ldr	r1, [pc, #52]	; (80037b8 <I2SEx_TxISR_I2SExt+0x90>)
 8003784:	428b      	cmp	r3, r1
 8003786:	d101      	bne.n	800378c <I2SEx_TxISR_I2SExt+0x64>
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <I2SEx_TxISR_I2SExt+0x94>)
 800378a:	e001      	b.n	8003790 <I2SEx_TxISR_I2SExt+0x68>
 800378c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003794:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ff81 	bl	80036b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40003800 	.word	0x40003800
 80037bc:	40003400 	.word	0x40003400

080037c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68d8      	ldr	r0, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	1c99      	adds	r1, r3, #2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037d8:	b282      	uxth	r2, r0
 80037da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d113      	bne.n	800381c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003802:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff4a 	bl	80036b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a20      	ldr	r2, [pc, #128]	; (80038b4 <I2SEx_RxISR_I2SExt+0x90>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <I2SEx_RxISR_I2SExt+0x16>
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003838:	e001      	b.n	800383e <I2SEx_RxISR_I2SExt+0x1a>
 800383a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383e:	68d8      	ldr	r0, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	1c99      	adds	r1, r3, #2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	62d1      	str	r1, [r2, #44]	; 0x2c
 800384a:	b282      	uxth	r2, r0
 800384c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d121      	bne.n	80038aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <I2SEx_RxISR_I2SExt+0x90>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <I2SEx_RxISR_I2SExt+0x50>
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003872:	e001      	b.n	8003878 <I2SEx_RxISR_I2SExt+0x54>
 8003874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	490d      	ldr	r1, [pc, #52]	; (80038b4 <I2SEx_RxISR_I2SExt+0x90>)
 8003880:	428b      	cmp	r3, r1
 8003882:	d101      	bne.n	8003888 <I2SEx_RxISR_I2SExt+0x64>
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <I2SEx_RxISR_I2SExt+0x94>)
 8003886:	e001      	b.n	800388c <I2SEx_RxISR_I2SExt+0x68>
 8003888:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003890:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff03 	bl	80036b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40003800 	.word	0x40003800
 80038b8:	40003400 	.word	0x40003400

080038bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e25b      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d075      	beq.n	80039c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038da:	4ba3      	ldr	r3, [pc, #652]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00c      	beq.n	8003900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e6:	4ba0      	ldr	r3, [pc, #640]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d112      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b9d      	ldr	r3, [pc, #628]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fe:	d10b      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	4b99      	ldr	r3, [pc, #612]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05b      	beq.n	80039c4 <HAL_RCC_OscConfig+0x108>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d157      	bne.n	80039c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e236      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x74>
 8003922:	4b91      	ldr	r3, [pc, #580]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a90      	ldr	r2, [pc, #576]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e01d      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b8b      	ldr	r3, [pc, #556]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a8a      	ldr	r2, [pc, #552]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a87      	ldr	r2, [pc, #540]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003954:	4b84      	ldr	r3, [pc, #528]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a83      	ldr	r2, [pc, #524]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b81      	ldr	r3, [pc, #516]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a80      	ldr	r2, [pc, #512]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd faa4 	bl	8000ec0 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd faa0 	bl	8000ec0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1fb      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0xc0>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fd fa90 	bl	8000ec0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fd fa8c 	bl	8000ec0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1e7      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0xe8>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d063      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039de:	4b62      	ldr	r3, [pc, #392]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d11c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b5f      	ldr	r3, [pc, #380]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d116      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1bb      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b56      	ldr	r3, [pc, #344]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4952      	ldr	r1, [pc, #328]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	e03a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2c:	4b4f      	ldr	r3, [pc, #316]	; (8003b6c <HAL_RCC_OscConfig+0x2b0>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fd fa45 	bl	8000ec0 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fd fa41 	bl	8000ec0 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e19c      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	4b46      	ldr	r3, [pc, #280]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4940      	ldr	r1, [pc, #256]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_RCC_OscConfig+0x2b0>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd fa24 	bl	8000ec0 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fd fa20 	bl	8000ec0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e17b      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aae:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <HAL_RCC_OscConfig+0x2b4>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fd fa04 	bl	8000ec0 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fd fa00 	bl	8000ec0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e15b      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x200>
 8003ada:	e015      	b.n	8003b08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_OscConfig+0x2b4>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd f9ed 	bl	8000ec0 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aea:	f7fd f9e9 	bl	8000ec0 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e144      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f0      	bne.n	8003aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80a0 	beq.w	8003c56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10f      	bne.n	8003b46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	; 0x40
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_OscConfig+0x2b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d121      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <HAL_RCC_OscConfig+0x2b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <HAL_RCC_OscConfig+0x2b8>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd f9af 	bl	8000ec0 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	e011      	b.n	8003b8a <HAL_RCC_OscConfig+0x2ce>
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	42470000 	.word	0x42470000
 8003b70:	42470e80 	.word	0x42470e80
 8003b74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fd f9a2 	bl	8000ec0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0fd      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b81      	ldr	r3, [pc, #516]	; (8003d90 <HAL_RCC_OscConfig+0x4d4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d106      	bne.n	8003bac <HAL_RCC_OscConfig+0x2f0>
 8003b9e:	4b7d      	ldr	r3, [pc, #500]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a7c      	ldr	r2, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8003baa:	e01c      	b.n	8003be6 <HAL_RCC_OscConfig+0x32a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCC_OscConfig+0x312>
 8003bb4:	4b77      	ldr	r3, [pc, #476]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	4a76      	ldr	r2, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc0:	4b74      	ldr	r3, [pc, #464]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a73      	ldr	r2, [pc, #460]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCC_OscConfig+0x32a>
 8003bce:	4b71      	ldr	r3, [pc, #452]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a70      	ldr	r2, [pc, #448]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	4b6e      	ldr	r3, [pc, #440]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a6d      	ldr	r2, [pc, #436]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d015      	beq.n	8003c1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fd f967 	bl	8000ec0 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fd f963 	bl	8000ec0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0bc      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ee      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x33a>
 8003c18:	e014      	b.n	8003c44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd f951 	bl	8000ec0 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fd f94d 	bl	8000ec0 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0a6      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ee      	bne.n	8003c22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d105      	bne.n	8003c56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4b52      	ldr	r3, [pc, #328]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	4a51      	ldr	r2, [pc, #324]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8092 	beq.w	8003d84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c60:	4b4c      	ldr	r3, [pc, #304]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d05c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d141      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c74:	4b48      	ldr	r3, [pc, #288]	; (8003d98 <HAL_RCC_OscConfig+0x4dc>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7fd f921 	bl	8000ec0 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fd f91d 	bl	8000ec0 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e078      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c94:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	019b      	lsls	r3, r3, #6
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	4933      	ldr	r1, [pc, #204]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cca:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <HAL_RCC_OscConfig+0x4dc>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f8f6 	bl	8000ec0 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd f8f2 	bl	8000ec0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e04d      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x41c>
 8003cf6:	e045      	b.n	8003d84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf8:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <HAL_RCC_OscConfig+0x4dc>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd f8df 	bl	8000ec0 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fd f8db 	bl	8000ec0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e036      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x44a>
 8003d24:	e02e      	b.n	8003d84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e029      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_RCC_OscConfig+0x4d8>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d115      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10d      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d106      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40007000 	.word	0x40007000
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470060 	.word	0x42470060

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cc      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e067      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4934      	ldr	r1, [pc, #208]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7fd f818 	bl	8000ec0 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd f814 	bl	8000ec0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e04f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20c      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4601      	mov	r1, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	5cd3      	ldrb	r3, [r2, r3]
 8003f36:	fa21 f303 	lsr.w	r3, r1, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc ff78 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	08006adc 	.word	0x08006adc
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	2300      	movs	r3, #0
 8003f78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f7e:	4b63      	ldr	r3, [pc, #396]	; (800410c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d007      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x32>
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 80b4 	bne.w	80040fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b5e      	ldr	r3, [pc, #376]	; (8004110 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f96:	60bb      	str	r3, [r7, #8]
       break;
 8003f98:	e0b3      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9a:	4b5e      	ldr	r3, [pc, #376]	; (8004114 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f9c:	60bb      	str	r3, [r7, #8]
      break;
 8003f9e:	e0b0      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa0:	4b5a      	ldr	r3, [pc, #360]	; (800410c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003faa:	4b58      	ldr	r3, [pc, #352]	; (800410c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d04a      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b55      	ldr	r3, [pc, #340]	; (800410c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	ea03 0501 	and.w	r5, r3, r1
 8003fcc:	ea04 0602 	and.w	r6, r4, r2
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4632      	mov	r2, r6
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	f04f 0400 	mov.w	r4, #0
 8003fdc:	0154      	lsls	r4, r2, #5
 8003fde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fe2:	014b      	lsls	r3, r1, #5
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	1b49      	subs	r1, r1, r5
 8003fea:	eb62 0206 	sbc.w	r2, r2, r6
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f04f 0400 	mov.w	r4, #0
 8003ff6:	0194      	lsls	r4, r2, #6
 8003ff8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ffc:	018b      	lsls	r3, r1, #6
 8003ffe:	1a5b      	subs	r3, r3, r1
 8004000:	eb64 0402 	sbc.w	r4, r4, r2
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	00e2      	lsls	r2, r4, #3
 800400e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004012:	00d9      	lsls	r1, r3, #3
 8004014:	460b      	mov	r3, r1
 8004016:	4614      	mov	r4, r2
 8004018:	195b      	adds	r3, r3, r5
 800401a:	eb44 0406 	adc.w	r4, r4, r6
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	0262      	lsls	r2, r4, #9
 8004028:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800402c:	0259      	lsls	r1, r3, #9
 800402e:	460b      	mov	r3, r1
 8004030:	4614      	mov	r4, r2
 8004032:	4618      	mov	r0, r3
 8004034:	4621      	mov	r1, r4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f04f 0400 	mov.w	r4, #0
 800403c:	461a      	mov	r2, r3
 800403e:	4623      	mov	r3, r4
 8004040:	f7fc f8ca 	bl	80001d8 <__aeabi_uldivmod>
 8004044:	4603      	mov	r3, r0
 8004046:	460c      	mov	r4, r1
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e049      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404c:	4b2f      	ldr	r3, [pc, #188]	; (800410c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	f04f 0400 	mov.w	r4, #0
 8004056:	f240 11ff 	movw	r1, #511	; 0x1ff
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	ea03 0501 	and.w	r5, r3, r1
 8004062:	ea04 0602 	and.w	r6, r4, r2
 8004066:	4629      	mov	r1, r5
 8004068:	4632      	mov	r2, r6
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	f04f 0400 	mov.w	r4, #0
 8004072:	0154      	lsls	r4, r2, #5
 8004074:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004078:	014b      	lsls	r3, r1, #5
 800407a:	4619      	mov	r1, r3
 800407c:	4622      	mov	r2, r4
 800407e:	1b49      	subs	r1, r1, r5
 8004080:	eb62 0206 	sbc.w	r2, r2, r6
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	f04f 0400 	mov.w	r4, #0
 800408c:	0194      	lsls	r4, r2, #6
 800408e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004092:	018b      	lsls	r3, r1, #6
 8004094:	1a5b      	subs	r3, r3, r1
 8004096:	eb64 0402 	sbc.w	r4, r4, r2
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	00e2      	lsls	r2, r4, #3
 80040a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040a8:	00d9      	lsls	r1, r3, #3
 80040aa:	460b      	mov	r3, r1
 80040ac:	4614      	mov	r4, r2
 80040ae:	195b      	adds	r3, r3, r5
 80040b0:	eb44 0406 	adc.w	r4, r4, r6
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	02a2      	lsls	r2, r4, #10
 80040be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80040c2:	0299      	lsls	r1, r3, #10
 80040c4:	460b      	mov	r3, r1
 80040c6:	4614      	mov	r4, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	4621      	mov	r1, r4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	461a      	mov	r2, r3
 80040d4:	4623      	mov	r3, r4
 80040d6:	f7fc f87f 	bl	80001d8 <__aeabi_uldivmod>
 80040da:	4603      	mov	r3, r0
 80040dc:	460c      	mov	r4, r1
 80040de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	3301      	adds	r3, #1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	60bb      	str	r3, [r7, #8]
      break;
 80040fa:	e002      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040fe:	60bb      	str	r3, [r7, #8]
      break;
 8004100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004102:	68bb      	ldr	r3, [r7, #8]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	00f42400 	.word	0x00f42400
 8004114:	007a1200 	.word	0x007a1200

08004118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_RCC_GetHCLKFreq+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004134:	f7ff fff0 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004138:	4601      	mov	r1, r0
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	0a9b      	lsrs	r3, r3, #10
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4a03      	ldr	r2, [pc, #12]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004146:	5cd3      	ldrb	r3, [r2, r3]
 8004148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40023800 	.word	0x40023800
 8004154:	08006aec 	.word	0x08006aec

08004158 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800417c:	2b00      	cmp	r3, #0
 800417e:	d038      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004180:	4b68      	ldr	r3, [pc, #416]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004186:	f7fc fe9b 	bl	8000ec0 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800418e:	f7fc fe97 	bl	8000ec0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0bd      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	019b      	lsls	r3, r3, #6
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	495a      	ldr	r1, [pc, #360]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041c6:	4b57      	ldr	r3, [pc, #348]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041cc:	f7fc fe78 	bl	8000ec0 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041d4:	f7fc fe74 	bl	8000ec0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e09a      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041e6:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8083 	beq.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	4b48      	ldr	r3, [pc, #288]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	4a47      	ldr	r2, [pc, #284]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6413      	str	r3, [r2, #64]	; 0x40
 8004210:	4b45      	ldr	r3, [pc, #276]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800421c:	4b43      	ldr	r3, [pc, #268]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a42      	ldr	r2, [pc, #264]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004226:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004228:	f7fc fe4a 	bl	8000ec0 <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7fc fe46 	bl	8000ec0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e06c      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004242:	4b3a      	ldr	r3, [pc, #232]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02f      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x166>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d028      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426c:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800427c:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004282:	4a29      	ldr	r2, [pc, #164]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d114      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004294:	f7fc fe14 	bl	8000ec0 <HAL_GetTick>
 8004298:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	e00a      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fc fe10 	bl	8000ec0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e034      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ee      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ca:	d10d      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80042cc:	4b16      	ldr	r3, [pc, #88]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	4911      	ldr	r1, [pc, #68]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
 80042e6:	e005      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042f2:	6093      	str	r3, [r2, #8]
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	4909      	ldr	r1, [pc, #36]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7d1a      	ldrb	r2, [r3, #20]
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004318:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	42470068 	.word	0x42470068
 8004328:	40023800 	.word	0x40023800
 800432c:	40007000 	.word	0x40007000
 8004330:	42470e40 	.word	0x42470e40
 8004334:	424711e0 	.word	0x424711e0

08004338 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d13f      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004356:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800435e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004366:	2b01      	cmp	r3, #1
 8004368:	d131      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800436a:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800436c:	617b      	str	r3, [r7, #20]
          break;
 800436e:	e031      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004370:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437c:	d109      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e008      	b.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043aa:	099b      	lsrs	r3, r3, #6
 80043ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043be:	0f1b      	lsrs	r3, r3, #28
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	617b      	str	r3, [r7, #20]
          break;
 80043cc:	e002      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
          break;
 80043d2:	bf00      	nop
        }
      }
      break;
 80043d4:	bf00      	nop
    }
  }
  return frequency;
 80043d6:	697b      	ldr	r3, [r7, #20]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00bb8000 	.word	0x00bb8000
 80043ec:	007a1200 	.word	0x007a1200
 80043f0:	00f42400 	.word	0x00f42400

080043f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e056      	b.n	80044b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc fbfb 	bl	8000c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	ea42 0103 	orr.w	r1, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	f003 0104 	and.w	r1, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044bc:	b084      	sub	sp, #16
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	f107 001c 	add.w	r0, r7, #28
 80044ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d122      	bne.n	800451a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f94a 	bl	80047a8 <USB_CoreReset>
 8004514:	4603      	mov	r3, r0
 8004516:	73fb      	strb	r3, [r7, #15]
 8004518:	e01a      	b.n	8004550 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f93e 	bl	80047a8 <USB_CoreReset>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
 8004542:	e005      	b.n	8004550 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10b      	bne.n	800456e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f043 0206 	orr.w	r2, r3, #6
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800457a:	b004      	add	sp, #16
 800457c:	4770      	bx	lr

0800457e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 0201 	bic.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
 80045ec:	e00b      	b.n	8004606 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	e001      	b.n	8004606 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e003      	b.n	800460e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004606:	2032      	movs	r0, #50	; 0x32
 8004608:	f7fc fc66 	bl	8000ed8 <HAL_Delay>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3301      	adds	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <USB_FlushTxFifo+0x48>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e006      	b.n	8004652 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d0f0      	beq.n	8004632 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	00030d40 	.word	0x00030d40

08004664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2210      	movs	r2, #16
 8004674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3301      	adds	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <USB_FlushRxFifo+0x40>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d901      	bls.n	8004688 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e006      	b.n	8004696 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b10      	cmp	r3, #16
 8004692:	d0f0      	beq.n	8004676 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	00030d40 	.word	0x00030d40

080046a8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	71fb      	strb	r3, [r7, #7]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80046c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11a      	bne.n	8004704 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046ce:	88bb      	ldrh	r3, [r7, #4]
 80046d0:	3303      	adds	r3, #3
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e00f      	b.n	80046fc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	031a      	lsls	r2, r3, #12
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e8:	461a      	mov	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	3304      	adds	r3, #4
 80046f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	3301      	adds	r3, #1
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	429a      	cmp	r2, r3
 8004702:	d3eb      	bcc.n	80046dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3724      	adds	r7, #36	; 0x24
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004712:	b480      	push	{r7}
 8004714:	b089      	sub	sp, #36	; 0x24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	4613      	mov	r3, r2
 800471e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	3303      	adds	r3, #3
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e00b      	b.n	800474e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	601a      	str	r2, [r3, #0]
    pDest++;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3304      	adds	r3, #4
 8004746:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	3301      	adds	r3, #1
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	429a      	cmp	r2, r3
 8004754:	d3ef      	bcc.n	8004736 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004756:	69fb      	ldr	r3, [r7, #28]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3724      	adds	r7, #36	; 0x24
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800477c:	68fb      	ldr	r3, [r7, #12]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0301 	and.w	r3, r3, #1
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <USB_CoreReset+0x64>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e01b      	b.n	80047fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	daf2      	bge.n	80047b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f043 0201 	orr.w	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <USB_CoreReset+0x64>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e006      	b.n	80047fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d0f0      	beq.n	80047de <USB_CoreReset+0x36>

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	00030d40 	.word	0x00030d40

08004810 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004810:	b084      	sub	sp, #16
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	f107 001c 	add.w	r0, r7, #28
 800481e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d018      	beq.n	8004894 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2b03      	cmp	r3, #3
 8004866:	d10a      	bne.n	800487e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e014      	b.n	80048a8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e009      	b.n	80048a8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048a2:	f023 0304 	bic.w	r3, r3, #4
 80048a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80048a8:	2110      	movs	r1, #16
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff feb4 	bl	8004618 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fed7 	bl	8004664 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e015      	b.n	80048e8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	461a      	mov	r2, r3
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048dc:	461a      	mov	r2, r3
 80048de:	2300      	movs	r3, #0
 80048e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d3e5      	bcc.n	80048bc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80048f0:	2101      	movs	r1, #1
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f882 	bl	80049fc <USB_DriveVbus>

  HAL_Delay(200U);
 80048f8:	20c8      	movs	r0, #200	; 0xc8
 80048fa:	f7fc faed 	bl	8000ed8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800490a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00b      	beq.n	8004930 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a14      	ldr	r2, [pc, #80]	; (8004974 <USB_HostInit+0x164>)
 8004924:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <USB_HostInit+0x168>)
 800492a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800492e:	e009      	b.n	8004944 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2280      	movs	r2, #128	; 0x80
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a10      	ldr	r2, [pc, #64]	; (800497c <USB_HostInit+0x16c>)
 800493a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <USB_HostInit+0x170>)
 8004940:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f043 0210 	orr.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <USB_HostInit+0x174>)
 800495c:	4313      	orrs	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800496e:	b004      	add	sp, #16
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	01000200 	.word	0x01000200
 8004978:	00e00300 	.word	0x00e00300
 800497c:	00600080 	.word	0x00600080
 8004980:	004000e0 	.word	0x004000e0
 8004984:	a3200008 	.word	0xa3200008

08004988 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d0:	461a      	mov	r2, r3
 80049d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049d6:	6053      	str	r3, [r2, #4]
 80049d8:	e009      	b.n	80049ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d106      	bne.n	80049ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e6:	461a      	mov	r2, r3
 80049e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80049ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <USB_DriveVbus+0x44>
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d106      	bne.n	8004a40 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a3e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d109      	bne.n	8004a60 <USB_DriveVbus+0x64>
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a5e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	b29b      	uxth	r3, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	70fb      	strb	r3, [r7, #3]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70bb      	strb	r3, [r7, #2]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ac4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d87e      	bhi.n	8004bcc <USB_HC_Init+0x13c>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <USB_HC_Init+0x44>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004b8f 	.word	0x08004b8f
 8004adc:	08004ae5 	.word	0x08004ae5
 8004ae0:	08004b51 	.word	0x08004b51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	461a      	mov	r2, r3
 8004af2:	f240 439d 	movw	r3, #1181	; 0x49d
 8004af6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004af8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	da10      	bge.n	8004b22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	78fa      	ldrb	r2, [r7, #3]
 8004b10:	0151      	lsls	r1, r2, #5
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	440a      	add	r2, r1
 8004b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004b20:	e057      	b.n	8004bd2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d051      	beq.n	8004bd2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b4c:	60d3      	str	r3, [r2, #12]
      break;
 8004b4e:	e040      	b.n	8004bd2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004b62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da34      	bge.n	8004bd6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b8c:	e023      	b.n	8004bd6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f240 2325 	movw	r3, #549	; 0x225
 8004ba0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da17      	bge.n	8004bda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004bc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004bca:	e006      	b.n	8004bda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd0:	e004      	b.n	8004bdc <USB_HC_Init+0x14c>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e002      	b.n	8004bdc <USB_HC_Init+0x14c>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <USB_HC_Init+0x14c>
      break;
 8004bda:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	2101      	movs	r1, #1
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004c06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da03      	bge.n	8004c16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	e001      	b.n	8004c1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	e001      	b.n	8004c2e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c2e:	787b      	ldrb	r3, [r7, #1]
 8004c30:	059b      	lsls	r3, r3, #22
 8004c32:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c36:	78bb      	ldrb	r3, [r7, #2]
 8004c38:	02db      	lsls	r3, r3, #11
 8004c3a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c44:	049b      	lsls	r3, r3, #18
 8004c46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004c4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004c52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	440b      	add	r3, r1
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c6a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004c6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d10f      	bne.n	8004c94 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c92:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop

08004ca4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cc0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d028      	beq.n	8004d20 <USB_HC_StartXfer+0x7c>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	791b      	ldrb	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d124      	bne.n	8004d20 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <USB_HC_StartXfer+0x50>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	795b      	ldrb	r3, [r3, #5]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d107      	bne.n	8004cf4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fa2e 	bl	800514c <USB_DoPing>
      return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e112      	b.n	8004f1a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d112      	bne.n	8004d20 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	0151      	lsls	r1, r2, #5
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	440a      	add	r2, r1
 8004d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d14:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004d18:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d018      	beq.n	8004d5a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	8912      	ldrh	r2, [r2, #8]
 8004d30:	4413      	add	r3, r2
 8004d32:	3b01      	subs	r3, #1
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	8912      	ldrh	r2, [r2, #8]
 8004d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d3c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004d3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004d40:	8b7b      	ldrh	r3, [r7, #26]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d90b      	bls.n	8004d5e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004d46:	8b7b      	ldrh	r3, [r7, #26]
 8004d48:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	8912      	ldrh	r2, [r2, #8]
 8004d50:	fb02 f203 	mul.w	r2, r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	611a      	str	r2, [r3, #16]
 8004d58:	e001      	b.n	8004d5e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	78db      	ldrb	r3, [r3, #3]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d006      	beq.n	8004d74 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004d66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	8912      	ldrh	r2, [r2, #8]
 8004d6c:	fb02 f203 	mul.w	r2, r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d7e:	04d9      	lsls	r1, r3, #19
 8004d80:	4b68      	ldr	r3, [pc, #416]	; (8004f24 <USB_HC_StartXfer+0x280>)
 8004d82:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d84:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	7a9b      	ldrb	r3, [r3, #10]
 8004d8a:	075b      	lsls	r3, r3, #29
 8004d8c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	0148      	lsls	r0, r1, #5
 8004d94:	6a39      	ldr	r1, [r7, #32]
 8004d96:	4401      	add	r1, r0
 8004d98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d9c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d9e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	68d9      	ldr	r1, [r3, #12]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db6:	460a      	mov	r2, r1
 8004db8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004df0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	7e7b      	ldrb	r3, [r7, #25]
 8004e02:	075b      	lsls	r3, r3, #29
 8004e04:	69f9      	ldr	r1, [r7, #28]
 8004e06:	0148      	lsls	r0, r1, #5
 8004e08:	6a39      	ldr	r1, [r7, #32]
 8004e0a:	4401      	add	r1, r0
 8004e0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a41      	ldr	r2, [pc, #260]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e24:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e26:	4b40      	ldr	r3, [pc, #256]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e2e:	4a3e      	ldr	r2, [pc, #248]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e30:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	78db      	ldrb	r3, [r3, #3]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d006      	beq.n	8004e48 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e42:	4a39      	ldr	r2, [pc, #228]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e005      	b.n	8004e54 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004e48:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e50:	4a35      	ldr	r2, [pc, #212]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e52:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e54:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e5c:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e5e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <USB_HC_StartXfer+0x284>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d14e      	bne.n	8004f18 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	78db      	ldrb	r3, [r3, #3]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d14a      	bne.n	8004f18 <USB_HC_StartXfer+0x274>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d046      	beq.n	8004f18 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	79db      	ldrb	r3, [r3, #7]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d830      	bhi.n	8004ef4 <USB_HC_StartXfer+0x250>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <USB_HC_StartXfer+0x1f4>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ea9 	.word	0x08004ea9
 8004e9c:	08004ecd 	.word	0x08004ecd
 8004ea0:	08004ea9 	.word	0x08004ea9
 8004ea4:	08004ecd 	.word	0x08004ecd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	3303      	adds	r3, #3
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004eb2:	8afa      	ldrh	r2, [r7, #22]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d91c      	bls.n	8004ef8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	619a      	str	r2, [r3, #24]
          }
          break;
 8004eca:	e015      	b.n	8004ef8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	3303      	adds	r3, #3
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004ed6:	8afa      	ldrh	r2, [r7, #22]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d90a      	bls.n	8004efc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	619a      	str	r2, [r3, #24]
          }
          break;
 8004ef2:	e003      	b.n	8004efc <USB_HC_StartXfer+0x258>

        default:
          break;
 8004ef4:	bf00      	nop
 8004ef6:	e002      	b.n	8004efe <USB_HC_StartXfer+0x25a>
          break;
 8004ef8:	bf00      	nop
 8004efa:	e000      	b.n	8004efe <USB_HC_StartXfer+0x25a>
          break;
 8004efc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68d9      	ldr	r1, [r3, #12]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	785a      	ldrb	r2, [r3, #1]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	b298      	uxth	r0, r3
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4603      	mov	r3, r0
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff fbc8 	bl	80046a8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	1ff80000 	.word	0x1ff80000
 8004f28:	200000b0 	.word	0x200000b0

08004f2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	b29b      	uxth	r3, r3
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	0c9b      	lsrs	r3, r3, #18
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <USB_HC_Halt+0x3a>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d16c      	bne.n	8005062 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	0151      	lsls	r1, r2, #5
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	440a      	add	r2, r1
 8004f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fa6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d143      	bne.n	800503c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	0151      	lsls	r1, r2, #5
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	440a      	add	r2, r1
 8004fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ff2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	440a      	add	r2, r1
 800500a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005012:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	3301      	adds	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005020:	d81d      	bhi.n	800505e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005038:	d0ec      	beq.n	8005014 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800503a:	e080      	b.n	800513e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	440a      	add	r2, r1
 8005052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800505a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800505c:	e06f      	b.n	800513e <USB_HC_Halt+0x1f0>
          break;
 800505e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005060:	e06d      	b.n	800513e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	440a      	add	r2, r1
 8005078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800507c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005080:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d143      	bne.n	800511a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050f0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	3301      	adds	r3, #1
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050fe:	d81d      	bhi.n	800513c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005116:	d0ec      	beq.n	80050f2 <USB_HC_Halt+0x1a4>
 8005118:	e011      	b.n	800513e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	440a      	add	r2, r1
 8005130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e000      	b.n	800513e <USB_HC_Halt+0x1f0>
          break;
 800513c:	bf00      	nop
    }
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005160:	2301      	movs	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	04da      	lsls	r2, r3, #19
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <USB_DoPing+0x74>)
 800516a:	4013      	ands	r3, r2
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	440a      	add	r2, r1
 8005174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800517c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005194:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800519c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	461a      	mov	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	1ff80000 	.word	0x1ff80000

080051c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff f9e3 	bl	80045a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80051da:	2110      	movs	r1, #16
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fa1b 	bl	8004618 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fa3e 	bl	8004664 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	e01f      	b.n	800522e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005204:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800520c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005214:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	461a      	mov	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	3301      	adds	r3, #1
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b0f      	cmp	r3, #15
 8005232:	d9dc      	bls.n	80051ee <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	e034      	b.n	80052a4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005250:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005258:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005260:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3301      	adds	r3, #1
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005280:	d80c      	bhi.n	800529c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005298:	d0ec      	beq.n	8005274 <USB_StopHost+0xb0>
 800529a:	e000      	b.n	800529e <USB_StopHost+0xda>
        break;
 800529c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	d9c7      	bls.n	800523a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052b0:	461a      	mov	r2, r3
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052be:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff f95c 	bl	800457e <USB_EnableGlobalInt>

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b089      	sub	sp, #36	; 0x24
 80052d4:	af04      	add	r7, sp, #16
 80052d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80052d8:	2302      	movs	r3, #2
 80052da:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80052dc:	2301      	movs	r3, #1
 80052de:	2202      	movs	r2, #2
 80052e0:	2102      	movs	r1, #2
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fc3a 	bl	8005b5c <USBH_FindInterface>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	2bff      	cmp	r3, #255	; 0xff
 80052f0:	f000 812a 	beq.w	8005548 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80052f4:	7bbb      	ldrb	r3, [r7, #14]
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fc13 	bl	8005b24 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005304:	2050      	movs	r0, #80	; 0x50
 8005306:	f001 fb09 	bl	800691c <malloc>
 800530a:	4603      	mov	r3, r0
 800530c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	211a      	movs	r1, #26
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	b25b      	sxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	da15      	bge.n	800535c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	211a      	movs	r1, #26
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	4413      	add	r3, r2
 800533c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005346:	7bbb      	ldrb	r3, [r7, #14]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	211a      	movs	r1, #26
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	4413      	add	r3, r2
 8005352:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 ff9f 	bl	80062a6 <USBH_AllocPipe>
 8005368:	4603      	mov	r3, r0
 800536a:	461a      	mov	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	7819      	ldrb	r1, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	7858      	ldrb	r0, [r3, #1]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	8952      	ldrh	r2, [r2, #10]
 8005388:	9202      	str	r2, [sp, #8]
 800538a:	2203      	movs	r2, #3
 800538c:	9201      	str	r2, [sp, #4]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	4623      	mov	r3, r4
 8005392:	4602      	mov	r2, r0
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 ff57 	bl	8006248 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 fa14 	bl	80067d0 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 80053a8:	2300      	movs	r3, #0
 80053aa:	2200      	movs	r2, #0
 80053ac:	210a      	movs	r1, #10
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fbd4 	bl	8005b5c <USBH_FindInterface>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	2bff      	cmp	r3, #255	; 0xff
 80053bc:	f000 80c4 	beq.w	8005548 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	211a      	movs	r1, #26
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b25b      	sxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	da16      	bge.n	8005406 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	211a      	movs	r1, #26
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	211a      	movs	r1, #26
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	835a      	strh	r2, [r3, #26]
 8005404:	e015      	b.n	8005432 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005406:	7bbb      	ldrb	r3, [r7, #14]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	211a      	movs	r1, #26
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	4413      	add	r3, r2
 8005412:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	211a      	movs	r1, #26
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800542c:	881a      	ldrh	r2, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005432:	7bbb      	ldrb	r3, [r7, #14]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	211a      	movs	r1, #26
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	4413      	add	r3, r2
 800543e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b25b      	sxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	da16      	bge.n	8005478 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800544a:	7bbb      	ldrb	r3, [r7, #14]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	211a      	movs	r1, #26
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	f203 3352 	addw	r3, r3, #850	; 0x352
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	211a      	movs	r1, #26
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005470:	881a      	ldrh	r2, [r3, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	835a      	strh	r2, [r3, #26]
 8005476:	e015      	b.n	80054a4 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	211a      	movs	r1, #26
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005488:	781a      	ldrb	r2, [r3, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	211a      	movs	r1, #26
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800549e:	881a      	ldrh	r2, [r3, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	7b9b      	ldrb	r3, [r3, #14]
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fefb 	bl	80062a6 <USBH_AllocPipe>
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	7bdb      	ldrb	r3, [r3, #15]
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fef1 	bl	80062a6 <USBH_AllocPipe>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	7b59      	ldrb	r1, [r3, #13]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	7b98      	ldrb	r0, [r3, #14]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	8b12      	ldrh	r2, [r2, #24]
 80054e4:	9202      	str	r2, [sp, #8]
 80054e6:	2202      	movs	r2, #2
 80054e8:	9201      	str	r2, [sp, #4]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4623      	mov	r3, r4
 80054ee:	4602      	mov	r2, r0
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fea9 	bl	8006248 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	7b19      	ldrb	r1, [r3, #12]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	7bd8      	ldrb	r0, [r3, #15]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	8b52      	ldrh	r2, [r2, #26]
 800550e:	9202      	str	r2, [sp, #8]
 8005510:	2202      	movs	r2, #2
 8005512:	9201      	str	r2, [sp, #4]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	4623      	mov	r3, r4
 8005518:	4602      	mov	r2, r0
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fe94 	bl	8006248 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	7b5b      	ldrb	r3, [r3, #13]
 800552c:	2200      	movs	r2, #0
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 f94d 	bl	80067d0 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	7b1b      	ldrb	r3, [r3, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 f946 	bl	80067d0 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bd90      	pop	{r4, r7, pc}

08005552 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fe87 	bl	8006286 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 feaf 	bl	80062e2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	7b1b      	ldrb	r3, [r3, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00e      	beq.n	80055b0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	7b1b      	ldrb	r3, [r3, #12]
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fe74 	bl	8006286 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	7b1b      	ldrb	r3, [r3, #12]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fe9c 	bl	80062e2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	7b5b      	ldrb	r3, [r3, #13]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00e      	beq.n	80055d6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	7b5b      	ldrb	r3, [r3, #13]
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fe61 	bl	8006286 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	7b5b      	ldrb	r3, [r3, #13]
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fe89 	bl	80062e2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f99e 	bl	800692c <free>
    phost->pActiveClass->pData = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055f6:	2200      	movs	r2, #0
 80055f8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800560c:	2302      	movs	r3, #2
 800560e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3340      	adds	r3, #64	; 0x40
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8b2 	bl	800578a <GetLineCoding>
 8005626:	4603      	mov	r3, r0
 8005628:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d105      	bne.n	800563c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005636:	2102      	movs	r1, #2
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
  }
  return status;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005668:	2b04      	cmp	r3, #4
 800566a:	d877      	bhi.n	800575c <USBH_CDC_Process+0x114>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <USBH_CDC_Process+0x2c>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	08005689 	.word	0x08005689
 8005678:	0800568f 	.word	0x0800568f
 800567c:	080056bf 	.word	0x080056bf
 8005680:	08005733 	.word	0x08005733
 8005684:	08005741 	.word	0x08005741
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]
    break;
 800568c:	e06d      	b.n	800576a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f897 	bl	80057c8 <SetLineCoding>
 800569a:	4603      	mov	r3, r0
 800569c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80056ac:	e058      	b.n	8005760 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d055      	beq.n	8005760 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2204      	movs	r2, #4
 80056b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80056bc:	e050      	b.n	8005760 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	3340      	adds	r3, #64	; 0x40
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f860 	bl	800578a <GetLineCoding>
 80056ca:	4603      	mov	r3, r0
 80056cc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80056ce:	7bbb      	ldrb	r3, [r7, #14]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d126      	bne.n	8005722 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e6:	791b      	ldrb	r3, [r3, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d13b      	bne.n	8005764 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d133      	bne.n	8005764 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005708:	429a      	cmp	r2, r3
 800570a:	d12b      	bne.n	8005764 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005714:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005716:	429a      	cmp	r2, r3
 8005718:	d124      	bne.n	8005764 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f95a 	bl	80059d4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005720:	e020      	b.n	8005764 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005722:	7bbb      	ldrb	r3, [r7, #14]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d01d      	beq.n	8005764 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2204      	movs	r2, #4
 800572c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005730:	e018      	b.n	8005764 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f867 	bl	8005806 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f8dc 	bl	80058f6 <CDC_ProcessReception>
    break;
 800573e:	e014      	b.n	800576a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005740:	2100      	movs	r1, #0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb08 	bl	8005d58 <USBH_ClrFeature>
 8005748:	4603      	mov	r3, r0
 800574a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800575a:	e005      	b.n	8005768 <USBH_CDC_Process+0x120>

  default:
    break;
 800575c:	bf00      	nop
 800575e:	e004      	b.n	800576a <USBH_CDC_Process+0x122>
    break;
 8005760:	bf00      	nop
 8005762:	e002      	b.n	800576a <USBH_CDC_Process+0x122>
    break;
 8005764:	bf00      	nop
 8005766:	e000      	b.n	800576a <USBH_CDC_Process+0x122>
    break;
 8005768:	bf00      	nop

  }

  return status;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	22a1      	movs	r2, #161	; 0xa1
 8005798:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2221      	movs	r2, #33	; 0x21
 800579e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2207      	movs	r2, #7
 80057b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2207      	movs	r2, #7
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 faf1 	bl	8005da0 <USBH_CtlReq>
 80057be:	4603      	mov	r3, r0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2221      	movs	r2, #33	; 0x21
 80057d6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2207      	movs	r2, #7
 80057ee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2207      	movs	r2, #7
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fad2 	bl	8005da0 <USBH_CtlReq>
 80057fc:	4603      	mov	r3, r0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b086      	sub	sp, #24
 800580a:	af02      	add	r7, sp, #8
 800580c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005818:	2300      	movs	r3, #0
 800581a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005822:	2b01      	cmp	r3, #1
 8005824:	d002      	beq.n	800582c <CDC_ProcessTransmission+0x26>
 8005826:	2b02      	cmp	r3, #2
 8005828:	d025      	beq.n	8005876 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800582a:	e060      	b.n	80058ee <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	8b12      	ldrh	r2, [r2, #24]
 8005834:	4293      	cmp	r3, r2
 8005836:	d90c      	bls.n	8005852 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	69d9      	ldr	r1, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8b1a      	ldrh	r2, [r3, #24]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	7b58      	ldrb	r0, [r3, #13]
 8005844:	2301      	movs	r3, #1
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	4603      	mov	r3, r0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fcb9 	bl	80061c2 <USBH_BulkSendData>
 8005850:	e00c      	b.n	800586c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	7b58      	ldrb	r0, [r3, #13]
 8005860:	2301      	movs	r3, #1
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	4603      	mov	r3, r0
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fcab 	bl	80061c2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005874:	e03b      	b.n	80058ee <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	7b5b      	ldrb	r3, [r3, #13]
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 ff7d 	bl	800677c <USBH_LL_GetURBState>
 8005882:	4603      	mov	r3, r0
 8005884:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d128      	bne.n	80058de <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	8b12      	ldrh	r2, [r2, #24]
 8005894:	4293      	cmp	r3, r2
 8005896:	d90e      	bls.n	80058b6 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	8b12      	ldrh	r2, [r2, #24]
 80058a0:	1a9a      	subs	r2, r3, r2
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	8b12      	ldrh	r2, [r2, #24]
 80058ae:	441a      	add	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	61da      	str	r2, [r3, #28]
 80058b4:	e002      	b.n	80058bc <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058cc:	e00e      	b.n	80058ec <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f868 	bl	80059ac <USBH_CDC_TransmitCallback>
    break;
 80058dc:	e006      	b.n	80058ec <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 80058de:	7afb      	ldrb	r3, [r7, #11]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d103      	bne.n	80058ec <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80058ec:	bf00      	nop
  }
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005908:	2300      	movs	r3, #0
 800590a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005912:	2b03      	cmp	r3, #3
 8005914:	d002      	beq.n	800591c <CDC_ProcessReception+0x26>
 8005916:	2b04      	cmp	r3, #4
 8005918:	d00e      	beq.n	8005938 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800591a:	e043      	b.n	80059a4 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6a19      	ldr	r1, [r3, #32]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	8b5a      	ldrh	r2, [r3, #26]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	7b1b      	ldrb	r3, [r3, #12]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fc6f 	bl	800620c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2204      	movs	r2, #4
 8005932:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005936:	e035      	b.n	80059a4 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	7b1b      	ldrb	r3, [r3, #12]
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 ff1c 	bl	800677c <USBH_LL_GetURBState>
 8005944:	4603      	mov	r3, r0
 8005946:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005948:	7cfb      	ldrb	r3, [r7, #19]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d129      	bne.n	80059a2 <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	7b1b      	ldrb	r3, [r3, #12]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fe7f 	bl	8006658 <USBH_LL_GetLastXferSize>
 800595a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	429a      	cmp	r2, r3
 8005964:	d016      	beq.n	8005994 <CDC_ProcessReception+0x9e>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	8b5b      	ldrh	r3, [r3, #26]
 800596a:	461a      	mov	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4293      	cmp	r3, r2
 8005970:	d910      	bls.n	8005994 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad2      	subs	r2, r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	441a      	add	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2203      	movs	r2, #3
 800598e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005992:	e006      	b.n	80059a2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f80f 	bl	80059c0 <USBH_CDC_ReceiveCallback>
    break;
 80059a2:	bf00      	nop
  }
}
 80059a4:	bf00      	nop
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]

}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80059fc:	2302      	movs	r3, #2
 80059fe:	e019      	b.n	8005a34 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	79fa      	ldrb	r2, [r7, #7]
 8005a04:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f80f 	bl	8005a3c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fda1 	bl	8006574 <USBH_LL_Init>

  return USBH_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a48:	e008      	b.n	8005a5c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	32e0      	adds	r2, #224	; 0xe0
 8005a50:	2100      	movs	r1, #0
 8005a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b0e      	cmp	r3, #14
 8005a60:	d9f3      	bls.n	8005a4a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e009      	b.n	8005a7c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a82:	d3f1      	bcc.n	8005a68 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2240      	movs	r2, #64	; 0x40
 8005aa8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d017      	beq.n	8005b12 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10f      	bne.n	8005b0c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005af2:	1c59      	adds	r1, r3, #1
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	33dc      	adds	r3, #220	; 0xdc
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	e004      	b.n	8005b16 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	73fb      	strb	r3, [r7, #15]
 8005b10:	e001      	b.n	8005b16 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005b12:	2302      	movs	r3, #2
 8005b14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d204      	bcs.n	8005b4a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	78fa      	ldrb	r2, [r7, #3]
 8005b44:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005b48:	e001      	b.n	8005b4e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	70fb      	strb	r3, [r7, #3]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	70bb      	strb	r3, [r7, #2]
 8005b72:	4613      	mov	r3, r2
 8005b74:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005b84:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005b86:	e025      	b.n	8005bd4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
 8005b8a:	221a      	movs	r2, #26
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	3308      	adds	r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	3302      	adds	r3, #2
 8005b98:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	795b      	ldrb	r3, [r3, #5]
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d002      	beq.n	8005baa <USBH_FindInterface+0x4e>
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	2bff      	cmp	r3, #255	; 0xff
 8005ba8:	d111      	bne.n	8005bce <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005bae:	78ba      	ldrb	r2, [r7, #2]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d002      	beq.n	8005bba <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005bb4:	78bb      	ldrb	r3, [r7, #2]
 8005bb6:	2bff      	cmp	r3, #255	; 0xff
 8005bb8:	d109      	bne.n	8005bce <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005bbe:	787a      	ldrb	r2, [r7, #1]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d002      	beq.n	8005bca <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005bc4:	787b      	ldrb	r3, [r7, #1]
 8005bc6:	2bff      	cmp	r3, #255	; 0xff
 8005bc8:	d101      	bne.n	8005bce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	e006      	b.n	8005bdc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005bce:	7dfb      	ldrb	r3, [r7, #23]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d9d6      	bls.n	8005b88 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005bda:	23ff      	movs	r3, #255	; 0xff
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fcfb 	bl	80065ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fdd2 	bl	80067a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f804 	bl	8005c4a <USBH_HandleSof>
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b0b      	cmp	r3, #11
 8005c5a:	d10a      	bne.n	8005c72 <USBH_HandleSof+0x28>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
  }
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005c8a:	bf00      	nop
}
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8005ca6:	bf00      	nop
}
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10f      	bne.n	8005ce4 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cdc:	2104      	movs	r1, #4
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	4798      	blx	r3
 8005ce2:	e007      	b.n	8005cf4 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d102      	bne.n	8005cf4 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fc8b 	bl	8006622 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	791b      	ldrb	r3, [r3, #4]
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fae5 	bl	80062e2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	795b      	ldrb	r3, [r3, #5]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fadf 	bl	80062e2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d3c:	2105      	movs	r1, #5
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fc52 	bl	80065ec <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	789b      	ldrb	r3, [r3, #2]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d10f      	bne.n	8005d8c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2100      	movs	r1, #0
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f805 	bl	8005da0 <USBH_CtlReq>
 8005d96:	4603      	mov	r3, r0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	789b      	ldrb	r3, [r3, #2]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d002      	beq.n	8005dc0 <USBH_CtlReq+0x20>
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d00f      	beq.n	8005dde <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8005dbe:	e034      	b.n	8005e2a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	75fb      	strb	r3, [r7, #23]
    break;
 8005ddc:	e025      	b.n	8005e2a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f828 	bl	8005e34 <USBH_HandleControl>
 8005de4:	4603      	mov	r3, r0
 8005de6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d108      	bne.n	8005e00 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]
    break;
 8005dfe:	e013      	b.n	8005e28 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d108      	bne.n	8005e18 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005e12:	2303      	movs	r3, #3
 8005e14:	75fb      	strb	r3, [r7, #23]
    break;
 8005e16:	e007      	b.n	8005e28 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d104      	bne.n	8005e28 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8005e24:	2302      	movs	r3, #2
 8005e26:	75fb      	strb	r3, [r7, #23]
    break;
 8005e28:	bf00      	nop
  }
  return status;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7e1b      	ldrb	r3, [r3, #24]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	2b0a      	cmp	r3, #10
 8005e4c:	f200 814c 	bhi.w	80060e8 <USBH_HandleControl+0x2b4>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <USBH_HandleControl+0x24>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e85 	.word	0x08005e85
 8005e5c:	08005e9f 	.word	0x08005e9f
 8005e60:	08005f09 	.word	0x08005f09
 8005e64:	08005f2f 	.word	0x08005f2f
 8005e68:	08005f67 	.word	0x08005f67
 8005e6c:	08005f93 	.word	0x08005f93
 8005e70:	08005fe5 	.word	0x08005fe5
 8005e74:	08006007 	.word	0x08006007
 8005e78:	08006043 	.word	0x08006043
 8005e7c:	0800606b 	.word	0x0800606b
 8005e80:	080060a9 	.word	0x080060a9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f103 0110 	add.w	r1, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	795b      	ldrb	r3, [r3, #5]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f939 	bl	8006108 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	761a      	strb	r2, [r3, #24]
    break;
 8005e9c:	e12f      	b.n	80060fe <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	795b      	ldrb	r3, [r3, #5]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fc69 	bl	800677c <USBH_LL_GetURBState>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d11e      	bne.n	8005ef2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	7c1b      	ldrb	r3, [r3, #16]
 8005eb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ebc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	8adb      	ldrh	r3, [r3, #22]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8005ec6:	7b7b      	ldrb	r3, [r7, #13]
 8005ec8:	2b80      	cmp	r3, #128	; 0x80
 8005eca:	d103      	bne.n	8005ed4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2203      	movs	r2, #3
 8005ed0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ed2:	e10b      	b.n	80060ec <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2205      	movs	r2, #5
 8005ed8:	761a      	strb	r2, [r3, #24]
    break;
 8005eda:	e107      	b.n	80060ec <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8005edc:	7b7b      	ldrb	r3, [r7, #13]
 8005ede:	2b80      	cmp	r3, #128	; 0x80
 8005ee0:	d103      	bne.n	8005eea <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2209      	movs	r2, #9
 8005ee6:	761a      	strb	r2, [r3, #24]
    break;
 8005ee8:	e100      	b.n	80060ec <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2207      	movs	r2, #7
 8005eee:	761a      	strb	r2, [r3, #24]
    break;
 8005ef0:	e0fc      	b.n	80060ec <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d003      	beq.n	8005f00 <USBH_HandleControl+0xcc>
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	f040 80f6 	bne.w	80060ec <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	220b      	movs	r2, #11
 8005f04:	761a      	strb	r2, [r3, #24]
    break;
 8005f06:	e0f1      	b.n	80060ec <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6899      	ldr	r1, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	899a      	ldrh	r2, [r3, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	791b      	ldrb	r3, [r3, #4]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f930 	bl	8006186 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	761a      	strb	r2, [r3, #24]
    break;
 8005f2c:	e0e7      	b.n	80060fe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	791b      	ldrb	r3, [r3, #4]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fc21 	bl	800677c <USBH_LL_GetURBState>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d102      	bne.n	8005f4a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2209      	movs	r2, #9
 8005f48:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005f4a:	7bbb      	ldrb	r3, [r7, #14]
 8005f4c:	2b05      	cmp	r3, #5
 8005f4e:	d102      	bne.n	8005f56 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8005f50:	2303      	movs	r3, #3
 8005f52:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005f54:	e0cc      	b.n	80060f0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	f040 80c9 	bne.w	80060f0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	220b      	movs	r2, #11
 8005f62:	761a      	strb	r2, [r3, #24]
    break;
 8005f64:	e0c4      	b.n	80060f0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6899      	ldr	r1, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	899a      	ldrh	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7958      	ldrb	r0, [r3, #5]
 8005f72:	2301      	movs	r3, #1
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4603      	mov	r3, r0
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f8df 	bl	800613c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2206      	movs	r2, #6
 8005f8e:	761a      	strb	r2, [r3, #24]
    break;
 8005f90:	e0b5      	b.n	80060fe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	795b      	ldrb	r3, [r3, #5]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fbef 	bl	800677c <USBH_LL_GetURBState>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d103      	bne.n	8005fb0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2207      	movs	r2, #7
 8005fac:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005fae:	e0a1      	b.n	80060f4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d105      	bne.n	8005fc2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	220c      	movs	r2, #12
 8005fba:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8005fc0:	e098      	b.n	80060f4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d103      	bne.n	8005fd0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2205      	movs	r2, #5
 8005fcc:	761a      	strb	r2, [r3, #24]
    break;
 8005fce:	e091      	b.n	80060f4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	f040 808e 	bne.w	80060f4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	220b      	movs	r2, #11
 8005fdc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8005fde:	2302      	movs	r3, #2
 8005fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8005fe2:	e087      	b.n	80060f4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	791b      	ldrb	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2100      	movs	r1, #0
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f8ca 	bl	8006186 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2208      	movs	r2, #8
 8006002:	761a      	strb	r2, [r3, #24]

    break;
 8006004:	e07b      	b.n	80060fe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	791b      	ldrb	r3, [r3, #4]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fbb5 	bl	800677c <USBH_LL_GetURBState>
 8006012:	4603      	mov	r3, r0
 8006014:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	220d      	movs	r2, #13
 8006020:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006026:	e067      	b.n	80060f8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b04      	cmp	r3, #4
 800602c:	d103      	bne.n	8006036 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	220b      	movs	r2, #11
 8006032:	761a      	strb	r2, [r3, #24]
    break;
 8006034:	e060      	b.n	80060f8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b05      	cmp	r3, #5
 800603a:	d15d      	bne.n	80060f8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800603c:	2303      	movs	r3, #3
 800603e:	73fb      	strb	r3, [r7, #15]
    break;
 8006040:	e05a      	b.n	80060f8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	795a      	ldrb	r2, [r3, #5]
 8006046:	2301      	movs	r3, #1
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	2200      	movs	r2, #0
 800604e:	2100      	movs	r1, #0
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f873 	bl	800613c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	220a      	movs	r2, #10
 8006066:	761a      	strb	r2, [r3, #24]
    break;
 8006068:	e049      	b.n	80060fe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	795b      	ldrb	r3, [r3, #5]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fb83 	bl	800677c <USBH_LL_GetURBState>
 8006076:	4603      	mov	r3, r0
 8006078:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d105      	bne.n	800608c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	220d      	movs	r2, #13
 8006088:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800608a:	e037      	b.n	80060fc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d103      	bne.n	800609a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2209      	movs	r2, #9
 8006096:	761a      	strb	r2, [r3, #24]
    break;
 8006098:	e030      	b.n	80060fc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d12d      	bne.n	80060fc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	220b      	movs	r2, #11
 80060a4:	761a      	strb	r2, [r3, #24]
    break;
 80060a6:	e029      	b.n	80060fc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7e5b      	ldrb	r3, [r3, #25]
 80060ac:	3301      	adds	r3, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	765a      	strb	r2, [r3, #25]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7e5b      	ldrb	r3, [r3, #25]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d809      	bhi.n	80060d0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fab0 	bl	8006622 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80060ce:	e016      	b.n	80060fe <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060d6:	2106      	movs	r1, #6
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	73fb      	strb	r3, [r7, #15]
    break;
 80060e6:	e00a      	b.n	80060fe <USBH_HandleControl+0x2ca>

  default:
    break;
 80060e8:	bf00      	nop
 80060ea:	e008      	b.n	80060fe <USBH_HandleControl+0x2ca>
    break;
 80060ec:	bf00      	nop
 80060ee:	e006      	b.n	80060fe <USBH_HandleControl+0x2ca>
    break;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <USBH_HandleControl+0x2ca>
    break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <USBH_HandleControl+0x2ca>
    break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <USBH_HandleControl+0x2ca>
    break;
 80060fc:	bf00      	nop
  }
  return status;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af04      	add	r7, sp, #16
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006116:	79f9      	ldrb	r1, [r7, #7]
 8006118:	2300      	movs	r3, #0
 800611a:	9303      	str	r3, [sp, #12]
 800611c:	2308      	movs	r3, #8
 800611e:	9302      	str	r3, [sp, #8]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	2300      	movs	r3, #0
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	2300      	movs	r3, #0
 800612a:	2200      	movs	r2, #0
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 faf4 	bl	800671a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af04      	add	r7, sp, #16
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4611      	mov	r1, r2
 8006148:	461a      	mov	r2, r3
 800614a:	460b      	mov	r3, r1
 800614c:	80fb      	strh	r3, [r7, #6]
 800614e:	4613      	mov	r3, r2
 8006150:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006160:	7979      	ldrb	r1, [r7, #5]
 8006162:	7e3b      	ldrb	r3, [r7, #24]
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	88fb      	ldrh	r3, [r7, #6]
 8006168:	9302      	str	r3, [sp, #8]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	2301      	movs	r3, #1
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2300      	movs	r3, #0
 8006174:	2200      	movs	r2, #0
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 facf 	bl	800671a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b088      	sub	sp, #32
 800618a:	af04      	add	r7, sp, #16
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	4611      	mov	r1, r2
 8006192:	461a      	mov	r2, r3
 8006194:	460b      	mov	r3, r1
 8006196:	80fb      	strh	r3, [r7, #6]
 8006198:	4613      	mov	r3, r2
 800619a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800619c:	7979      	ldrb	r1, [r7, #5]
 800619e:	2300      	movs	r3, #0
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	9302      	str	r3, [sp, #8]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	2301      	movs	r3, #1
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	2300      	movs	r3, #0
 80061b0:	2201      	movs	r2, #1
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fab1 	bl	800671a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80061b8:	2300      	movs	r3, #0

}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b088      	sub	sp, #32
 80061c6:	af04      	add	r7, sp, #16
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	4611      	mov	r1, r2
 80061ce:	461a      	mov	r2, r3
 80061d0:	460b      	mov	r3, r1
 80061d2:	80fb      	strh	r3, [r7, #6]
 80061d4:	4613      	mov	r3, r2
 80061d6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80061e6:	7979      	ldrb	r1, [r7, #5]
 80061e8:	7e3b      	ldrb	r3, [r7, #24]
 80061ea:	9303      	str	r3, [sp, #12]
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	9302      	str	r3, [sp, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	2301      	movs	r3, #1
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2302      	movs	r3, #2
 80061fa:	2200      	movs	r2, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa8c 	bl	800671a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af04      	add	r7, sp, #16
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4611      	mov	r1, r2
 8006218:	461a      	mov	r2, r3
 800621a:	460b      	mov	r3, r1
 800621c:	80fb      	strh	r3, [r7, #6]
 800621e:	4613      	mov	r3, r2
 8006220:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006222:	7979      	ldrb	r1, [r7, #5]
 8006224:	2300      	movs	r3, #0
 8006226:	9303      	str	r3, [sp, #12]
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	9302      	str	r3, [sp, #8]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	2301      	movs	r3, #1
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2302      	movs	r3, #2
 8006236:	2201      	movs	r2, #1
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fa6e 	bl	800671a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af04      	add	r7, sp, #16
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	461a      	mov	r2, r3
 8006256:	4603      	mov	r3, r0
 8006258:	70fb      	strb	r3, [r7, #3]
 800625a:	460b      	mov	r3, r1
 800625c:	70bb      	strb	r3, [r7, #2]
 800625e:	4613      	mov	r3, r2
 8006260:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8006262:	7878      	ldrb	r0, [r7, #1]
 8006264:	78ba      	ldrb	r2, [r7, #2]
 8006266:	78f9      	ldrb	r1, [r7, #3]
 8006268:	8b3b      	ldrh	r3, [r7, #24]
 800626a:	9302      	str	r3, [sp, #8]
 800626c:	7d3b      	ldrb	r3, [r7, #20]
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	7c3b      	ldrb	r3, [r7, #16]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	4603      	mov	r3, r0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa01 	bl	800667e <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800627c:	2300      	movs	r3, #0

}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa20 	bl	80066dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800629c:	2300      	movs	r3, #0

}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f831 	bl	800631a <USBH_GetFreePipe>
 80062b8:	4603      	mov	r3, r0
 80062ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80062bc:	89fb      	ldrh	r3, [r7, #14]
 80062be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	89fa      	ldrh	r2, [r7, #14]
 80062ca:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32e0      	adds	r2, #224	; 0xe0
 80062d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80062d6:	89fb      	ldrh	r3, [r7, #14]
 80062d8:	b2db      	uxtb	r3, r3
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	2b0a      	cmp	r3, #10
 80062f2:	d80b      	bhi.n	800630c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	32e0      	adds	r2, #224	; 0xe0
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32e0      	adds	r2, #224	; 0xe0
 8006308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
 800632a:	e00e      	b.n	800634a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800632c:	7bfa      	ldrb	r2, [r7, #15]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	32e0      	adds	r2, #224	; 0xe0
 8006332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	b29b      	uxth	r3, r3
 8006342:	e007      	b.n	8006354 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	3301      	adds	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	2b0a      	cmp	r3, #10
 800634e:	d9ed      	bls.n	800632c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8006350:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006364:	2201      	movs	r2, #1
 8006366:	490e      	ldr	r1, [pc, #56]	; (80063a0 <MX_USB_HOST_Init+0x40>)
 8006368:	480e      	ldr	r0, [pc, #56]	; (80063a4 <MX_USB_HOST_Init+0x44>)
 800636a:	f7ff fb3d 	bl	80059e8 <USBH_Init>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006374:	f7fa fb72 	bl	8000a5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006378:	490b      	ldr	r1, [pc, #44]	; (80063a8 <MX_USB_HOST_Init+0x48>)
 800637a:	480a      	ldr	r0, [pc, #40]	; (80063a4 <MX_USB_HOST_Init+0x44>)
 800637c:	f7ff fba7 	bl	8005ace <USBH_RegisterClass>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006386:	f7fa fb69 	bl	8000a5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800638a:	4806      	ldr	r0, [pc, #24]	; (80063a4 <MX_USB_HOST_Init+0x44>)
 800638c:	f7ff fc2c 	bl	8005be8 <USBH_Start>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006396:	f7fa fb61 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	080063ad 	.word	0x080063ad
 80063a4:	200001b8 	.word	0x200001b8
 80063a8:	2000000c 	.word	0x2000000c

080063ac <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d819      	bhi.n	80063f4 <USBH_UserProcess+0x48>
 80063c0:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <USBH_UserProcess+0x1c>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063f5 	.word	0x080063f5
 80063cc:	080063e5 	.word	0x080063e5
 80063d0:	080063f5 	.word	0x080063f5
 80063d4:	080063ed 	.word	0x080063ed
 80063d8:	080063dd 	.word	0x080063dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <USBH_UserProcess+0x58>)
 80063de:	2203      	movs	r2, #3
 80063e0:	701a      	strb	r2, [r3, #0]
  break;
 80063e2:	e008      	b.n	80063f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <USBH_UserProcess+0x58>)
 80063e6:	2202      	movs	r2, #2
 80063e8:	701a      	strb	r2, [r3, #0]
  break;
 80063ea:	e004      	b.n	80063f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80063ec:	4b05      	ldr	r3, [pc, #20]	; (8006404 <USBH_UserProcess+0x58>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
  break;
 80063f2:	e000      	b.n	80063f6 <USBH_UserProcess+0x4a>

  default:
  break;
 80063f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	200000b4 	.word	0x200000b4

08006408 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006410:	f107 0314 	add.w	r3, r7, #20
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006428:	d147      	bne.n	80064ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	4a24      	ldr	r2, [pc, #144]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	6313      	str	r3, [r2, #48]	; 0x30
 800643a:	4b22      	ldr	r3, [pc, #136]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800644a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006454:	f107 0314 	add.w	r3, r7, #20
 8006458:	4619      	mov	r1, r3
 800645a:	481b      	ldr	r0, [pc, #108]	; (80064c8 <HAL_HCD_MspInit+0xc0>)
 800645c:	f7fa fe70 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006460:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006466:	2302      	movs	r3, #2
 8006468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800646e:	2303      	movs	r3, #3
 8006470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006472:	230a      	movs	r3, #10
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006476:	f107 0314 	add.w	r3, r7, #20
 800647a:	4619      	mov	r1, r3
 800647c:	4812      	ldr	r0, [pc, #72]	; (80064c8 <HAL_HCD_MspInit+0xc0>)
 800647e:	f7fa fe5f 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006482:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	4a0f      	ldr	r2, [pc, #60]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 8006488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648c:	6353      	str	r3, [r2, #52]	; 0x34
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	4a0b      	ldr	r2, [pc, #44]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 8006498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800649c:	6453      	str	r3, [r2, #68]	; 0x44
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_HCD_MspInit+0xbc>)
 80064a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80064aa:	2200      	movs	r2, #0
 80064ac:	2100      	movs	r1, #0
 80064ae:	2043      	movs	r0, #67	; 0x43
 80064b0:	f7fa fe0f 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80064b4:	2043      	movs	r0, #67	; 0x43
 80064b6:	f7fa fe28 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80064ba:	bf00      	nop
 80064bc:	3728      	adds	r7, #40	; 0x28
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40023800 	.word	0x40023800
 80064c8:	40020000 	.word	0x40020000

080064cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fba3 	bl	8005c26 <USBH_LL_IncTimer>
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fbdb 	bl	8005cb2 <USBH_LL_Connect>
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fbf3 	bl	8005cfe <USBH_LL_Disconnect>
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
 800652c:	4613      	mov	r3, r2
 800652e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fb95 	bl	8005c7a <USBH_LL_PortEnabled>
} 
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fb95 	bl	8005c96 <USBH_LL_PortDisabled>
} 
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8006582:	2b01      	cmp	r3, #1
 8006584:	d12a      	bne.n	80065dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006586:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <USBH_LL_Init+0x74>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <USBH_LL_Init+0x74>)
 8006592:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <USBH_LL_Init+0x74>)
 8006598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800659c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <USBH_LL_Init+0x74>)
 80065a0:	2208      	movs	r2, #8
 80065a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <USBH_LL_Init+0x74>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065aa:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <USBH_LL_Init+0x74>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80065b0:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <USBH_LL_Init+0x74>)
 80065b2:	2202      	movs	r2, #2
 80065b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065b6:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <USBH_LL_Init+0x74>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80065bc:	480a      	ldr	r0, [pc, #40]	; (80065e8 <USBH_LL_Init+0x74>)
 80065be:	f7fa ff5a 	bl	8001476 <HAL_HCD_Init>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80065c8:	f7fa fa48 	bl	8000a5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80065cc:	4806      	ldr	r0, [pc, #24]	; (80065e8 <USBH_LL_Init+0x74>)
 80065ce:	f7fb fb47 	bl	8001c60 <HAL_HCD_GetCurrentFrame>
 80065d2:	4603      	mov	r3, r0
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fb16 	bl	8005c08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000584 	.word	0x20000584

080065ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006602:	4618      	mov	r0, r3
 8006604:	f7fb fac2 	bl	8001b8c <HAL_HCD_Start>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f912 	bl	8006838 <USBH_Get_USB_Status>
 8006614:	4603      	mov	r3, r0
 8006616:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006618:	7bbb      	ldrb	r3, [r7, #14]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006638:	4618      	mov	r0, r3
 800663a:	f7fb faca 	bl	8001bd2 <HAL_HCD_Stop>
 800663e:	4603      	mov	r3, r0
 8006640:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	4618      	mov	r0, r3
 8006646:	f000 f8f7 	bl	8006838 <USBH_Get_USB_Status>
 800664a:	4603      	mov	r3, r0
 800664c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800664e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	4611      	mov	r1, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7fb fae1 	bl	8001c36 <HAL_HCD_HC_GetXferCount>
 8006674:	4603      	mov	r3, r0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800667e:	b590      	push	{r4, r7, lr}
 8006680:	b089      	sub	sp, #36	; 0x24
 8006682:	af04      	add	r7, sp, #16
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	4608      	mov	r0, r1
 8006688:	4611      	mov	r1, r2
 800668a:	461a      	mov	r2, r3
 800668c:	4603      	mov	r3, r0
 800668e:	70fb      	strb	r3, [r7, #3]
 8006690:	460b      	mov	r3, r1
 8006692:	70bb      	strb	r3, [r7, #2]
 8006694:	4613      	mov	r3, r2
 8006696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80066a6:	787c      	ldrb	r4, [r7, #1]
 80066a8:	78ba      	ldrb	r2, [r7, #2]
 80066aa:	78f9      	ldrb	r1, [r7, #3]
 80066ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066ae:	9302      	str	r3, [sp, #8]
 80066b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	4623      	mov	r3, r4
 80066be:	f7fa ff3c 	bl	800153a <HAL_HCD_HC_Init>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f8b5 	bl	8006838 <USBH_Get_USB_Status>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd90      	pop	{r4, r7, pc}

080066dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fa ffb5 	bl	800166a <HAL_HCD_HC_Halt>
 8006700:	4603      	mov	r3, r0
 8006702:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f896 	bl	8006838 <USBH_Get_USB_Status>
 800670c:	4603      	mov	r3, r0
 800670e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006710:	7bbb      	ldrb	r3, [r7, #14]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800671a:	b590      	push	{r4, r7, lr}
 800671c:	b089      	sub	sp, #36	; 0x24
 800671e:	af04      	add	r7, sp, #16
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	4608      	mov	r0, r1
 8006724:	4611      	mov	r1, r2
 8006726:	461a      	mov	r2, r3
 8006728:	4603      	mov	r3, r0
 800672a:	70fb      	strb	r3, [r7, #3]
 800672c:	460b      	mov	r3, r1
 800672e:	70bb      	strb	r3, [r7, #2]
 8006730:	4613      	mov	r3, r2
 8006732:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8006742:	787c      	ldrb	r4, [r7, #1]
 8006744:	78ba      	ldrb	r2, [r7, #2]
 8006746:	78f9      	ldrb	r1, [r7, #3]
 8006748:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006750:	9302      	str	r3, [sp, #8]
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4623      	mov	r3, r4
 800675e:	f7fa ffa7 	bl	80016b0 <HAL_HCD_HC_SubmitRequest>
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 f865 	bl	8006838 <USBH_Get_USB_Status>
 800676e:	4603      	mov	r3, r0
 8006770:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006772:	7bbb      	ldrb	r3, [r7, #14]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	bd90      	pop	{r4, r7, pc}

0800677c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800678e:	78fa      	ldrb	r2, [r7, #3]
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f7fb fa3a 	bl	8001c0c <HAL_HCD_HC_GetURBState>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d103      	bne.n	80067c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f868 	bl	8006890 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80067c0:	20c8      	movs	r0, #200	; 0xc8
 80067c2:	f7fa fb89 	bl	8000ed8 <HAL_Delay>
  return USBH_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
 80067dc:	4613      	mov	r3, r2
 80067de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	68f9      	ldr	r1, [r7, #12]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	440b      	add	r3, r1
 80067f6:	333b      	adds	r3, #59	; 0x3b
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	68f9      	ldr	r1, [r7, #12]
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	440b      	add	r3, r1
 800680c:	3350      	adds	r3, #80	; 0x50
 800680e:	78ba      	ldrb	r2, [r7, #2]
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e009      	b.n	8006828 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	440b      	add	r3, r1
 8006822:	3351      	adds	r3, #81	; 0x51
 8006824:	78ba      	ldrb	r2, [r7, #2]
 8006826:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d817      	bhi.n	800687c <USBH_Get_USB_Status+0x44>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <USBH_Get_USB_Status+0x1c>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006865 	.word	0x08006865
 8006858:	0800686b 	.word	0x0800686b
 800685c:	08006871 	.word	0x08006871
 8006860:	08006877 	.word	0x08006877
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
    break;
 8006868:	e00b      	b.n	8006882 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800686a:	2302      	movs	r3, #2
 800686c:	73fb      	strb	r3, [r7, #15]
    break;
 800686e:	e008      	b.n	8006882 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
    break;
 8006874:	e005      	b.n	8006882 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006876:	2302      	movs	r3, #2
 8006878:	73fb      	strb	r3, [r7, #15]
    break;
 800687a:	e002      	b.n	8006882 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800687c:	2302      	movs	r3, #2
 800687e:	73fb      	strb	r3, [r7, #15]
    break;
 8006880:	bf00      	nop
  }
  return usb_status;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d102      	bne.n	80068aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
 80068a8:	e001      	b.n	80068ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	461a      	mov	r2, r3
 80068b2:	2101      	movs	r1, #1
 80068b4:	4803      	ldr	r0, [pc, #12]	; (80068c4 <MX_DriverVbusFS+0x34>)
 80068b6:	f7fa fdc5 	bl	8001444 <HAL_GPIO_WritePin>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40020800 	.word	0x40020800

080068c8 <__errno>:
 80068c8:	4b01      	ldr	r3, [pc, #4]	; (80068d0 <__errno+0x8>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	2000002c 	.word	0x2000002c

080068d4 <__libc_init_array>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	4e0d      	ldr	r6, [pc, #52]	; (800690c <__libc_init_array+0x38>)
 80068d8:	4c0d      	ldr	r4, [pc, #52]	; (8006910 <__libc_init_array+0x3c>)
 80068da:	1ba4      	subs	r4, r4, r6
 80068dc:	10a4      	asrs	r4, r4, #2
 80068de:	2500      	movs	r5, #0
 80068e0:	42a5      	cmp	r5, r4
 80068e2:	d109      	bne.n	80068f8 <__libc_init_array+0x24>
 80068e4:	4e0b      	ldr	r6, [pc, #44]	; (8006914 <__libc_init_array+0x40>)
 80068e6:	4c0c      	ldr	r4, [pc, #48]	; (8006918 <__libc_init_array+0x44>)
 80068e8:	f000 f8ea 	bl	8006ac0 <_init>
 80068ec:	1ba4      	subs	r4, r4, r6
 80068ee:	10a4      	asrs	r4, r4, #2
 80068f0:	2500      	movs	r5, #0
 80068f2:	42a5      	cmp	r5, r4
 80068f4:	d105      	bne.n	8006902 <__libc_init_array+0x2e>
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068fc:	4798      	blx	r3
 80068fe:	3501      	adds	r5, #1
 8006900:	e7ee      	b.n	80068e0 <__libc_init_array+0xc>
 8006902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006906:	4798      	blx	r3
 8006908:	3501      	adds	r5, #1
 800690a:	e7f2      	b.n	80068f2 <__libc_init_array+0x1e>
 800690c:	08006afc 	.word	0x08006afc
 8006910:	08006afc 	.word	0x08006afc
 8006914:	08006afc 	.word	0x08006afc
 8006918:	08006b00 	.word	0x08006b00

0800691c <malloc>:
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <malloc+0xc>)
 800691e:	4601      	mov	r1, r0
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	f000 b861 	b.w	80069e8 <_malloc_r>
 8006926:	bf00      	nop
 8006928:	2000002c 	.word	0x2000002c

0800692c <free>:
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <free+0xc>)
 800692e:	4601      	mov	r1, r0
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f000 b80b 	b.w	800694c <_free_r>
 8006936:	bf00      	nop
 8006938:	2000002c 	.word	0x2000002c

0800693c <memset>:
 800693c:	4402      	add	r2, r0
 800693e:	4603      	mov	r3, r0
 8006940:	4293      	cmp	r3, r2
 8006942:	d100      	bne.n	8006946 <memset+0xa>
 8006944:	4770      	bx	lr
 8006946:	f803 1b01 	strb.w	r1, [r3], #1
 800694a:	e7f9      	b.n	8006940 <memset+0x4>

0800694c <_free_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4605      	mov	r5, r0
 8006950:	2900      	cmp	r1, #0
 8006952:	d045      	beq.n	80069e0 <_free_r+0x94>
 8006954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006958:	1f0c      	subs	r4, r1, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	bfb8      	it	lt
 800695e:	18e4      	addlt	r4, r4, r3
 8006960:	f000 f8ac 	bl	8006abc <__malloc_lock>
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <_free_r+0x98>)
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	4610      	mov	r0, r2
 800696a:	b933      	cbnz	r3, 800697a <_free_r+0x2e>
 800696c:	6063      	str	r3, [r4, #4]
 800696e:	6014      	str	r4, [r2, #0]
 8006970:	4628      	mov	r0, r5
 8006972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006976:	f000 b8a2 	b.w	8006abe <__malloc_unlock>
 800697a:	42a3      	cmp	r3, r4
 800697c:	d90c      	bls.n	8006998 <_free_r+0x4c>
 800697e:	6821      	ldr	r1, [r4, #0]
 8006980:	1862      	adds	r2, r4, r1
 8006982:	4293      	cmp	r3, r2
 8006984:	bf04      	itt	eq
 8006986:	681a      	ldreq	r2, [r3, #0]
 8006988:	685b      	ldreq	r3, [r3, #4]
 800698a:	6063      	str	r3, [r4, #4]
 800698c:	bf04      	itt	eq
 800698e:	1852      	addeq	r2, r2, r1
 8006990:	6022      	streq	r2, [r4, #0]
 8006992:	6004      	str	r4, [r0, #0]
 8006994:	e7ec      	b.n	8006970 <_free_r+0x24>
 8006996:	4613      	mov	r3, r2
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	b10a      	cbz	r2, 80069a0 <_free_r+0x54>
 800699c:	42a2      	cmp	r2, r4
 800699e:	d9fa      	bls.n	8006996 <_free_r+0x4a>
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	1858      	adds	r0, r3, r1
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d10b      	bne.n	80069c0 <_free_r+0x74>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	4401      	add	r1, r0
 80069ac:	1858      	adds	r0, r3, r1
 80069ae:	4282      	cmp	r2, r0
 80069b0:	6019      	str	r1, [r3, #0]
 80069b2:	d1dd      	bne.n	8006970 <_free_r+0x24>
 80069b4:	6810      	ldr	r0, [r2, #0]
 80069b6:	6852      	ldr	r2, [r2, #4]
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	4401      	add	r1, r0
 80069bc:	6019      	str	r1, [r3, #0]
 80069be:	e7d7      	b.n	8006970 <_free_r+0x24>
 80069c0:	d902      	bls.n	80069c8 <_free_r+0x7c>
 80069c2:	230c      	movs	r3, #12
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	e7d3      	b.n	8006970 <_free_r+0x24>
 80069c8:	6820      	ldr	r0, [r4, #0]
 80069ca:	1821      	adds	r1, r4, r0
 80069cc:	428a      	cmp	r2, r1
 80069ce:	bf04      	itt	eq
 80069d0:	6811      	ldreq	r1, [r2, #0]
 80069d2:	6852      	ldreq	r2, [r2, #4]
 80069d4:	6062      	str	r2, [r4, #4]
 80069d6:	bf04      	itt	eq
 80069d8:	1809      	addeq	r1, r1, r0
 80069da:	6021      	streq	r1, [r4, #0]
 80069dc:	605c      	str	r4, [r3, #4]
 80069de:	e7c7      	b.n	8006970 <_free_r+0x24>
 80069e0:	bd38      	pop	{r3, r4, r5, pc}
 80069e2:	bf00      	nop
 80069e4:	200000b8 	.word	0x200000b8

080069e8 <_malloc_r>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	1ccd      	adds	r5, r1, #3
 80069ec:	f025 0503 	bic.w	r5, r5, #3
 80069f0:	3508      	adds	r5, #8
 80069f2:	2d0c      	cmp	r5, #12
 80069f4:	bf38      	it	cc
 80069f6:	250c      	movcc	r5, #12
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	4606      	mov	r6, r0
 80069fc:	db01      	blt.n	8006a02 <_malloc_r+0x1a>
 80069fe:	42a9      	cmp	r1, r5
 8006a00:	d903      	bls.n	8006a0a <_malloc_r+0x22>
 8006a02:	230c      	movs	r3, #12
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	2000      	movs	r0, #0
 8006a08:	bd70      	pop	{r4, r5, r6, pc}
 8006a0a:	f000 f857 	bl	8006abc <__malloc_lock>
 8006a0e:	4a21      	ldr	r2, [pc, #132]	; (8006a94 <_malloc_r+0xac>)
 8006a10:	6814      	ldr	r4, [r2, #0]
 8006a12:	4621      	mov	r1, r4
 8006a14:	b991      	cbnz	r1, 8006a3c <_malloc_r+0x54>
 8006a16:	4c20      	ldr	r4, [pc, #128]	; (8006a98 <_malloc_r+0xb0>)
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	b91b      	cbnz	r3, 8006a24 <_malloc_r+0x3c>
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f83d 	bl	8006a9c <_sbrk_r>
 8006a22:	6020      	str	r0, [r4, #0]
 8006a24:	4629      	mov	r1, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	f000 f838 	bl	8006a9c <_sbrk_r>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d124      	bne.n	8006a7a <_malloc_r+0x92>
 8006a30:	230c      	movs	r3, #12
 8006a32:	6033      	str	r3, [r6, #0]
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 f842 	bl	8006abe <__malloc_unlock>
 8006a3a:	e7e4      	b.n	8006a06 <_malloc_r+0x1e>
 8006a3c:	680b      	ldr	r3, [r1, #0]
 8006a3e:	1b5b      	subs	r3, r3, r5
 8006a40:	d418      	bmi.n	8006a74 <_malloc_r+0x8c>
 8006a42:	2b0b      	cmp	r3, #11
 8006a44:	d90f      	bls.n	8006a66 <_malloc_r+0x7e>
 8006a46:	600b      	str	r3, [r1, #0]
 8006a48:	50cd      	str	r5, [r1, r3]
 8006a4a:	18cc      	adds	r4, r1, r3
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 f836 	bl	8006abe <__malloc_unlock>
 8006a52:	f104 000b 	add.w	r0, r4, #11
 8006a56:	1d23      	adds	r3, r4, #4
 8006a58:	f020 0007 	bic.w	r0, r0, #7
 8006a5c:	1ac3      	subs	r3, r0, r3
 8006a5e:	d0d3      	beq.n	8006a08 <_malloc_r+0x20>
 8006a60:	425a      	negs	r2, r3
 8006a62:	50e2      	str	r2, [r4, r3]
 8006a64:	e7d0      	b.n	8006a08 <_malloc_r+0x20>
 8006a66:	428c      	cmp	r4, r1
 8006a68:	684b      	ldr	r3, [r1, #4]
 8006a6a:	bf16      	itet	ne
 8006a6c:	6063      	strne	r3, [r4, #4]
 8006a6e:	6013      	streq	r3, [r2, #0]
 8006a70:	460c      	movne	r4, r1
 8006a72:	e7eb      	b.n	8006a4c <_malloc_r+0x64>
 8006a74:	460c      	mov	r4, r1
 8006a76:	6849      	ldr	r1, [r1, #4]
 8006a78:	e7cc      	b.n	8006a14 <_malloc_r+0x2c>
 8006a7a:	1cc4      	adds	r4, r0, #3
 8006a7c:	f024 0403 	bic.w	r4, r4, #3
 8006a80:	42a0      	cmp	r0, r4
 8006a82:	d005      	beq.n	8006a90 <_malloc_r+0xa8>
 8006a84:	1a21      	subs	r1, r4, r0
 8006a86:	4630      	mov	r0, r6
 8006a88:	f000 f808 	bl	8006a9c <_sbrk_r>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d0cf      	beq.n	8006a30 <_malloc_r+0x48>
 8006a90:	6025      	str	r5, [r4, #0]
 8006a92:	e7db      	b.n	8006a4c <_malloc_r+0x64>
 8006a94:	200000b8 	.word	0x200000b8
 8006a98:	200000bc 	.word	0x200000bc

08006a9c <_sbrk_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4c06      	ldr	r4, [pc, #24]	; (8006ab8 <_sbrk_r+0x1c>)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	f7fa f938 	bl	8000d1c <_sbrk>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_sbrk_r+0x1a>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_sbrk_r+0x1a>
 8006ab4:	602b      	str	r3, [r5, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20000848 	.word	0x20000848

08006abc <__malloc_lock>:
 8006abc:	4770      	bx	lr

08006abe <__malloc_unlock>:
 8006abe:	4770      	bx	lr

08006ac0 <_init>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr

08006acc <_fini>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr
